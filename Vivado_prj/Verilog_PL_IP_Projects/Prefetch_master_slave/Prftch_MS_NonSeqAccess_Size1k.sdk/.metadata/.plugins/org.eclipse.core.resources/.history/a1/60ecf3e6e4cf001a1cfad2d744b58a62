/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"
#include "Prefetch_M_S_IP.h"
#include "xparameters.h"
#include "xbasic_types.h"
#include "xil_io.h"
#include "xl2cc_counter.h"
#include "xl2cc.h"
#include "xtime_l.h"

#define debug 0

#define dummy_sz 1000000
#define data_arr_sz 10000
#define prefetch_window 1000

Xuint32 *baseaddr_p = (Xuint32 *)(0x43c00000);//XPAR_TEST_SLAVE_0_S00_AXI_BASEADDR;

void PL_start (){
	u32 baseaddr, check_start_bit;
	baseaddr = (u32)baseaddr_p;
	PREFETCH_M_S_IP_mWriteReg (baseaddr, 0, 1); // Set start reg in PL to 1
	if (debug == 1){
		check_start_bit = PREFETCH_M_S_IP_mReadReg (baseaddr, 0);
		xil_printf("Value written to start_reg: 0x%x\n",check_start_bit);
	}
}

int main()
{
    init_platform();
    int sum =0;
    int *hit_count = malloc(1*sizeof(int));
    int *req_count = malloc(1*sizeof(int));
    u32 baseaddr;
    u32 read_start_bit, check_done_bit;
    XTime start, stop;
    //u32 temp;
    int *data = (int *)malloc(data_arr_sz*sizeof(int));
    for (int i=0;i<data_arr_sz;i++){
    	data[i] = i+1;
    }

    /*for(int j=0;j<10;j++){
    	xil_printf("Address: 0x%x\n",(data+j));
    }*/

    // Eviction of initialized data from cache using dummy aray
    int *dum_array = (int *)malloc(dummy_sz*sizeof(int));
    int dum_sum = 0;
    for(int i=0;i<dummy_sz;i++){
    	dum_array[i] = i+1;
    }
    for(int j=0;j<dummy_sz;j++){
    	dum_sum = dum_sum + dum_array[j];
    }
    xil_printf("Dummy_arr sum: %d\n",dum_sum);
    // Disabling next line prefetcher of ARM cortex A9
    int control_register=Xil_In32(0xF8F02104);
	printf("Initial status Auxillary Control Register:%x\n",control_register);
	int control_register2=Xil_In32(0xF8F02F60);
	printf("Initial status Prefetch Control Register:%x\n",control_register2);
	control_register &= ~(1<<28);
	Xil_Out32(0xF8F02F60,control_register);
	//printf("Auxillary Control Register after setting:%x\n",control_register);

	int control_register1=Xil_In32(0xF8F02F60);
	//printf("Prefetch Control Register:%x\n",control_register1);
	control_register1 &= ~(1<<30);
	control_register1 &= (1<<1);
	control_register1 &= (1<<2);
	Xil_Out32(0xF8F02F60,control_register1);
	printf("Prefetch Control Register after disabling prefetch:%x\n",control_register1);
	int control_register3=Xil_In32(0xF8F02104);
	printf("Auxillary Control Register after disabling prefetch:%x\n",control_register3);

    //TEST_SLAVE_Reg_SelfTest ((void *)(baseaddr_p));
    baseaddr = (u32)(baseaddr_p);

    // Setting start address of prefetch
    /*PREFETCH_M_S_IP_mWriteReg (baseaddr, 12, (u32)(data));
    check_addr = PREFETCH_M_S_IP_mReadReg (baseaddr, 12);
    xil_printf("Data start Address written to PL: 0x%x\n",check_addr);*/

    // Initial status of start register
    read_start_bit = PREFETCH_M_S_IP_mReadReg (baseaddr, 0);
    xil_printf("Initial value of start reg: 0x%x\n", read_start_bit);

    // Initial status of done register
    check_done_bit = PREFETCH_M_S_IP_mReadReg (baseaddr, 4);
    xil_printf("Initial Value in done regs: 0x%x\n",check_done_bit);


    XL2cc_EventCtrInit((XL2CC_DRHIT),(XL2CC_DRREQ));
    XL2cc_EventCtrStart();
    XTime_GetTime(&start);

    // Setting start bit for PL ip
    for (int i=0;i<(data_arr_sz/prefetch_window);i++){

    	PREFETCH_M_S_IP_mWriteReg (baseaddr, 12, (u32)(data+(i * prefetch_window)));
		PL_start();

		// Waiting for done status signal from PL
		/*check_done_bit = PREFETCH_M_S_IP_mReadReg (baseaddr, 4);
		xil_printf("Initial Value in done regs: 0x%x\n",check_done_bit);*/

		u32 read_data = 0;
		while (read_data != 1){
			read_data = PREFETCH_M_S_IP_mReadReg (baseaddr, 4);
			//xil_printf("Done status : %d\n",(int)(read_data));
		}
		PREFETCH_M_S_IP_mWriteReg (baseaddr, 0, 0);

    }
    /*int k=0;
    for(int i=0;i<data_arr_sz;i=i+k*8){
    	//xil_printf("Data: %d\n",*(data+i));
    	sum = sum + data[i];
    	++k;
    }*/

    XTime_GetTime(&stop);
    XL2cc_EventCtrStop((u32 *)(hit_count), (u32 *)(req_count));
    xil_printf("\nL2_Hits: %d L2_Requests: %d\n",(int)(*hit_count),(int)(*req_count));
    printf("\nTime taken clock cycles: %llu \n",2*(stop-start));
    printf("Time taken: %.2f us\n",1.0*((stop-start)/(COUNTS_PER_SECOND/1000000)));
    xil_printf("PS computed sum: %d\n",sum);

    /*check_done_bit = PREFETCH_M_S_IP_mReadReg (baseaddr, 4);
    xil_printf("Initial Value in done regs: 0x%x\n",check_done_bit);*/

    //PREFETCH_M_S_IP_mWriteReg (baseaddr, 0, 0);

    cleanup_platform();
    return 0;
}
