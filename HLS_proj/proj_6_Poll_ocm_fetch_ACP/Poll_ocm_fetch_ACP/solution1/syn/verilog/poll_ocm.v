// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="poll_ocm,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1259,HLS_SYN_LUT=1392}" *)

module poll_ocm (
        ap_clk,
        ap_rst_n,
        m_axi_ADDR_BUS_AWVALID,
        m_axi_ADDR_BUS_AWREADY,
        m_axi_ADDR_BUS_AWADDR,
        m_axi_ADDR_BUS_AWID,
        m_axi_ADDR_BUS_AWLEN,
        m_axi_ADDR_BUS_AWSIZE,
        m_axi_ADDR_BUS_AWBURST,
        m_axi_ADDR_BUS_AWLOCK,
        m_axi_ADDR_BUS_AWCACHE,
        m_axi_ADDR_BUS_AWPROT,
        m_axi_ADDR_BUS_AWQOS,
        m_axi_ADDR_BUS_AWREGION,
        m_axi_ADDR_BUS_AWUSER,
        m_axi_ADDR_BUS_WVALID,
        m_axi_ADDR_BUS_WREADY,
        m_axi_ADDR_BUS_WDATA,
        m_axi_ADDR_BUS_WSTRB,
        m_axi_ADDR_BUS_WLAST,
        m_axi_ADDR_BUS_WID,
        m_axi_ADDR_BUS_WUSER,
        m_axi_ADDR_BUS_ARVALID,
        m_axi_ADDR_BUS_ARREADY,
        m_axi_ADDR_BUS_ARADDR,
        m_axi_ADDR_BUS_ARID,
        m_axi_ADDR_BUS_ARLEN,
        m_axi_ADDR_BUS_ARSIZE,
        m_axi_ADDR_BUS_ARBURST,
        m_axi_ADDR_BUS_ARLOCK,
        m_axi_ADDR_BUS_ARCACHE,
        m_axi_ADDR_BUS_ARPROT,
        m_axi_ADDR_BUS_ARQOS,
        m_axi_ADDR_BUS_ARREGION,
        m_axi_ADDR_BUS_ARUSER,
        m_axi_ADDR_BUS_RVALID,
        m_axi_ADDR_BUS_RREADY,
        m_axi_ADDR_BUS_RDATA,
        m_axi_ADDR_BUS_RLAST,
        m_axi_ADDR_BUS_RID,
        m_axi_ADDR_BUS_RUSER,
        m_axi_ADDR_BUS_RRESP,
        m_axi_ADDR_BUS_BVALID,
        m_axi_ADDR_BUS_BREADY,
        m_axi_ADDR_BUS_BRESP,
        m_axi_ADDR_BUS_BID,
        m_axi_ADDR_BUS_BUSER,
        m_axi_DATA_BUS_AWVALID,
        m_axi_DATA_BUS_AWREADY,
        m_axi_DATA_BUS_AWADDR,
        m_axi_DATA_BUS_AWID,
        m_axi_DATA_BUS_AWLEN,
        m_axi_DATA_BUS_AWSIZE,
        m_axi_DATA_BUS_AWBURST,
        m_axi_DATA_BUS_AWLOCK,
        m_axi_DATA_BUS_AWCACHE,
        m_axi_DATA_BUS_AWPROT,
        m_axi_DATA_BUS_AWQOS,
        m_axi_DATA_BUS_AWREGION,
        m_axi_DATA_BUS_AWUSER,
        m_axi_DATA_BUS_WVALID,
        m_axi_DATA_BUS_WREADY,
        m_axi_DATA_BUS_WDATA,
        m_axi_DATA_BUS_WSTRB,
        m_axi_DATA_BUS_WLAST,
        m_axi_DATA_BUS_WID,
        m_axi_DATA_BUS_WUSER,
        m_axi_DATA_BUS_ARVALID,
        m_axi_DATA_BUS_ARREADY,
        m_axi_DATA_BUS_ARADDR,
        m_axi_DATA_BUS_ARID,
        m_axi_DATA_BUS_ARLEN,
        m_axi_DATA_BUS_ARSIZE,
        m_axi_DATA_BUS_ARBURST,
        m_axi_DATA_BUS_ARLOCK,
        m_axi_DATA_BUS_ARCACHE,
        m_axi_DATA_BUS_ARPROT,
        m_axi_DATA_BUS_ARQOS,
        m_axi_DATA_BUS_ARREGION,
        m_axi_DATA_BUS_ARUSER,
        m_axi_DATA_BUS_RVALID,
        m_axi_DATA_BUS_RREADY,
        m_axi_DATA_BUS_RDATA,
        m_axi_DATA_BUS_RLAST,
        m_axi_DATA_BUS_RID,
        m_axi_DATA_BUS_RUSER,
        m_axi_DATA_BUS_RRESP,
        m_axi_DATA_BUS_BVALID,
        m_axi_DATA_BUS_BREADY,
        m_axi_DATA_BUS_BRESP,
        m_axi_DATA_BUS_BID,
        m_axi_DATA_BUS_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 16'b1;
parameter    ap_ST_fsm_state2 = 16'b10;
parameter    ap_ST_fsm_state3 = 16'b100;
parameter    ap_ST_fsm_state4 = 16'b1000;
parameter    ap_ST_fsm_state5 = 16'b10000;
parameter    ap_ST_fsm_state6 = 16'b100000;
parameter    ap_ST_fsm_state7 = 16'b1000000;
parameter    ap_ST_fsm_state8 = 16'b10000000;
parameter    ap_ST_fsm_state9 = 16'b100000000;
parameter    ap_ST_fsm_state10 = 16'b1000000000;
parameter    ap_ST_fsm_state11 = 16'b10000000000;
parameter    ap_ST_fsm_state12 = 16'b100000000000;
parameter    ap_ST_fsm_state13 = 16'b1000000000000;
parameter    ap_ST_fsm_state14 = 16'b10000000000000;
parameter    ap_ST_fsm_state15 = 16'b100000000000000;
parameter    ap_ST_fsm_state16 = 16'b1000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_F = 32'b1111;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_ADDR_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_ADDR_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_ADDR_BUS_DATA_WIDTH = 32;
parameter    C_M_AXI_ADDR_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_ADDR_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_ADDR_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_ADDR_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_ADDR_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_ADDR_BUS_USER_VALUE = 0;
parameter    C_M_AXI_ADDR_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_ADDR_BUS_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_BUS_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_BUS_USER_VALUE = 0;
parameter    C_M_AXI_DATA_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_BUS_CACHE_VALUE = 3;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_5 = 32'b101;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_ADDR_BUS_WSTRB_WIDTH = (C_M_AXI_ADDR_BUS_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_DATA_BUS_WSTRB_WIDTH = (C_M_AXI_DATA_BUS_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_ADDR_BUS_AWVALID;
input   m_axi_ADDR_BUS_AWREADY;
output  [C_M_AXI_ADDR_BUS_ADDR_WIDTH - 1 : 0] m_axi_ADDR_BUS_AWADDR;
output  [C_M_AXI_ADDR_BUS_ID_WIDTH - 1 : 0] m_axi_ADDR_BUS_AWID;
output  [7:0] m_axi_ADDR_BUS_AWLEN;
output  [2:0] m_axi_ADDR_BUS_AWSIZE;
output  [1:0] m_axi_ADDR_BUS_AWBURST;
output  [1:0] m_axi_ADDR_BUS_AWLOCK;
output  [3:0] m_axi_ADDR_BUS_AWCACHE;
output  [2:0] m_axi_ADDR_BUS_AWPROT;
output  [3:0] m_axi_ADDR_BUS_AWQOS;
output  [3:0] m_axi_ADDR_BUS_AWREGION;
output  [C_M_AXI_ADDR_BUS_AWUSER_WIDTH - 1 : 0] m_axi_ADDR_BUS_AWUSER;
output   m_axi_ADDR_BUS_WVALID;
input   m_axi_ADDR_BUS_WREADY;
output  [C_M_AXI_ADDR_BUS_DATA_WIDTH - 1 : 0] m_axi_ADDR_BUS_WDATA;
output  [C_M_AXI_ADDR_BUS_WSTRB_WIDTH - 1 : 0] m_axi_ADDR_BUS_WSTRB;
output   m_axi_ADDR_BUS_WLAST;
output  [C_M_AXI_ADDR_BUS_ID_WIDTH - 1 : 0] m_axi_ADDR_BUS_WID;
output  [C_M_AXI_ADDR_BUS_WUSER_WIDTH - 1 : 0] m_axi_ADDR_BUS_WUSER;
output   m_axi_ADDR_BUS_ARVALID;
input   m_axi_ADDR_BUS_ARREADY;
output  [C_M_AXI_ADDR_BUS_ADDR_WIDTH - 1 : 0] m_axi_ADDR_BUS_ARADDR;
output  [C_M_AXI_ADDR_BUS_ID_WIDTH - 1 : 0] m_axi_ADDR_BUS_ARID;
output  [7:0] m_axi_ADDR_BUS_ARLEN;
output  [2:0] m_axi_ADDR_BUS_ARSIZE;
output  [1:0] m_axi_ADDR_BUS_ARBURST;
output  [1:0] m_axi_ADDR_BUS_ARLOCK;
output  [3:0] m_axi_ADDR_BUS_ARCACHE;
output  [2:0] m_axi_ADDR_BUS_ARPROT;
output  [3:0] m_axi_ADDR_BUS_ARQOS;
output  [3:0] m_axi_ADDR_BUS_ARREGION;
output  [C_M_AXI_ADDR_BUS_ARUSER_WIDTH - 1 : 0] m_axi_ADDR_BUS_ARUSER;
input   m_axi_ADDR_BUS_RVALID;
output   m_axi_ADDR_BUS_RREADY;
input  [C_M_AXI_ADDR_BUS_DATA_WIDTH - 1 : 0] m_axi_ADDR_BUS_RDATA;
input   m_axi_ADDR_BUS_RLAST;
input  [C_M_AXI_ADDR_BUS_ID_WIDTH - 1 : 0] m_axi_ADDR_BUS_RID;
input  [C_M_AXI_ADDR_BUS_RUSER_WIDTH - 1 : 0] m_axi_ADDR_BUS_RUSER;
input  [1:0] m_axi_ADDR_BUS_RRESP;
input   m_axi_ADDR_BUS_BVALID;
output   m_axi_ADDR_BUS_BREADY;
input  [1:0] m_axi_ADDR_BUS_BRESP;
input  [C_M_AXI_ADDR_BUS_ID_WIDTH - 1 : 0] m_axi_ADDR_BUS_BID;
input  [C_M_AXI_ADDR_BUS_BUSER_WIDTH - 1 : 0] m_axi_ADDR_BUS_BUSER;
output   m_axi_DATA_BUS_AWVALID;
input   m_axi_DATA_BUS_AWREADY;
output  [C_M_AXI_DATA_BUS_ADDR_WIDTH - 1 : 0] m_axi_DATA_BUS_AWADDR;
output  [C_M_AXI_DATA_BUS_ID_WIDTH - 1 : 0] m_axi_DATA_BUS_AWID;
output  [7:0] m_axi_DATA_BUS_AWLEN;
output  [2:0] m_axi_DATA_BUS_AWSIZE;
output  [1:0] m_axi_DATA_BUS_AWBURST;
output  [1:0] m_axi_DATA_BUS_AWLOCK;
output  [3:0] m_axi_DATA_BUS_AWCACHE;
output  [2:0] m_axi_DATA_BUS_AWPROT;
output  [3:0] m_axi_DATA_BUS_AWQOS;
output  [3:0] m_axi_DATA_BUS_AWREGION;
output  [C_M_AXI_DATA_BUS_AWUSER_WIDTH - 1 : 0] m_axi_DATA_BUS_AWUSER;
output   m_axi_DATA_BUS_WVALID;
input   m_axi_DATA_BUS_WREADY;
output  [C_M_AXI_DATA_BUS_DATA_WIDTH - 1 : 0] m_axi_DATA_BUS_WDATA;
output  [C_M_AXI_DATA_BUS_WSTRB_WIDTH - 1 : 0] m_axi_DATA_BUS_WSTRB;
output   m_axi_DATA_BUS_WLAST;
output  [C_M_AXI_DATA_BUS_ID_WIDTH - 1 : 0] m_axi_DATA_BUS_WID;
output  [C_M_AXI_DATA_BUS_WUSER_WIDTH - 1 : 0] m_axi_DATA_BUS_WUSER;
output   m_axi_DATA_BUS_ARVALID;
input   m_axi_DATA_BUS_ARREADY;
output  [C_M_AXI_DATA_BUS_ADDR_WIDTH - 1 : 0] m_axi_DATA_BUS_ARADDR;
output  [C_M_AXI_DATA_BUS_ID_WIDTH - 1 : 0] m_axi_DATA_BUS_ARID;
output  [7:0] m_axi_DATA_BUS_ARLEN;
output  [2:0] m_axi_DATA_BUS_ARSIZE;
output  [1:0] m_axi_DATA_BUS_ARBURST;
output  [1:0] m_axi_DATA_BUS_ARLOCK;
output  [3:0] m_axi_DATA_BUS_ARCACHE;
output  [2:0] m_axi_DATA_BUS_ARPROT;
output  [3:0] m_axi_DATA_BUS_ARQOS;
output  [3:0] m_axi_DATA_BUS_ARREGION;
output  [C_M_AXI_DATA_BUS_ARUSER_WIDTH - 1 : 0] m_axi_DATA_BUS_ARUSER;
input   m_axi_DATA_BUS_RVALID;
output   m_axi_DATA_BUS_RREADY;
input  [C_M_AXI_DATA_BUS_DATA_WIDTH - 1 : 0] m_axi_DATA_BUS_RDATA;
input   m_axi_DATA_BUS_RLAST;
input  [C_M_AXI_DATA_BUS_ID_WIDTH - 1 : 0] m_axi_DATA_BUS_RID;
input  [C_M_AXI_DATA_BUS_RUSER_WIDTH - 1 : 0] m_axi_DATA_BUS_RUSER;
input  [1:0] m_axi_DATA_BUS_RRESP;
input   m_axi_DATA_BUS_BVALID;
output   m_axi_DATA_BUS_BREADY;
input  [1:0] m_axi_DATA_BUS_BRESP;
input  [C_M_AXI_DATA_BUS_ID_WIDTH - 1 : 0] m_axi_DATA_BUS_BID;
input  [C_M_AXI_DATA_BUS_BUSER_WIDTH - 1 : 0] m_axi_DATA_BUS_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire    ap_ready;
wire   [31:0] addr;
wire   [31:0] data;
reg    ADDR_BUS_blk_n_AR;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] or_cond_fu_148_p2;
reg    ADDR_BUS_blk_n_R;
wire   [0:0] ap_CS_fsm_state9;
reg    ADDR_BUS_blk_n_AW;
wire   [0:0] ap_CS_fsm_state10;
reg    ADDR_BUS_blk_n_W;
wire   [0:0] ap_CS_fsm_state11;
reg    ADDR_BUS_blk_n_B;
wire   [0:0] ap_CS_fsm_state16;
reg   [0:0] or_cond_reg_186;
reg    ADDR_BUS_AWVALID;
wire    ADDR_BUS_AWREADY;
reg    ADDR_BUS_WVALID;
wire    ADDR_BUS_WREADY;
reg    ADDR_BUS_ARVALID;
wire    ADDR_BUS_ARREADY;
wire    ADDR_BUS_RVALID;
reg    ADDR_BUS_RREADY;
wire   [31:0] ADDR_BUS_RDATA;
wire    ADDR_BUS_RLAST;
wire   [0:0] ADDR_BUS_RID;
wire   [0:0] ADDR_BUS_RUSER;
wire   [1:0] ADDR_BUS_RRESP;
wire    ADDR_BUS_BVALID;
reg    ADDR_BUS_BREADY;
wire   [1:0] ADDR_BUS_BRESP;
wire   [0:0] ADDR_BUS_BID;
wire   [0:0] ADDR_BUS_BUSER;
wire    DATA_BUS_AWREADY;
wire    DATA_BUS_WREADY;
wire    DATA_BUS_ARREADY;
wire    DATA_BUS_RVALID;
wire   [31:0] DATA_BUS_RDATA;
wire    DATA_BUS_RLAST;
wire   [0:0] DATA_BUS_RID;
wire   [0:0] DATA_BUS_RUSER;
wire   [1:0] DATA_BUS_RRESP;
wire    DATA_BUS_BVALID;
wire   [1:0] DATA_BUS_BRESP;
wire   [0:0] DATA_BUS_BID;
wire   [0:0] DATA_BUS_BUSER;
wire   [3:0] adjSize6_fu_113_p4;
reg   [3:0] adjSize6_reg_169;
reg   [31:0] ADDR_BUS_addr_reg_175;
wire   [0:0] ptr_cmp_fu_129_p2;
reg   [0:0] ptr_cmp_reg_181;
reg    ap_sig_ioackin_ADDR_BUS_ARREADY;
reg   [31:0] ADDR_BUS_addr_read_reg_190;
wire   [31:0] temp_fu_157_p2;
reg   [31:0] temp_reg_195;
reg    ap_sig_ioackin_ADDR_BUS_AWREADY;
wire   [31:0] tmp_2_fu_109_p1;
reg    ap_reg_ioackin_ADDR_BUS_ARREADY;
reg    ap_reg_ioackin_ADDR_BUS_AWREADY;
reg    ap_reg_ioackin_ADDR_BUS_WREADY;
reg    ap_sig_ioackin_ADDR_BUS_WREADY;
reg   [3:0] mem_index_phi5_fu_72;
wire   [29:0] addr1_fu_99_p4;
wire   [0:0] ptr_cmp7_fu_143_p2;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'b1;
#0 ap_reg_ioackin_ADDR_BUS_ARREADY = 1'b0;
#0 ap_reg_ioackin_ADDR_BUS_AWREADY = 1'b0;
#0 ap_reg_ioackin_ADDR_BUS_WREADY = 1'b0;
end

poll_ocm_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
poll_ocm_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .addr(addr),
    .data(data)
);

poll_ocm_ADDR_BUS_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_ADDR_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_ADDR_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_ADDR_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_ADDR_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_ADDR_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_ADDR_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_ADDR_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_ADDR_BUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_ADDR_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_ADDR_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_ADDR_BUS_CACHE_VALUE ))
poll_ocm_ADDR_BUS_m_axi_U(
    .AWVALID(m_axi_ADDR_BUS_AWVALID),
    .AWREADY(m_axi_ADDR_BUS_AWREADY),
    .AWADDR(m_axi_ADDR_BUS_AWADDR),
    .AWID(m_axi_ADDR_BUS_AWID),
    .AWLEN(m_axi_ADDR_BUS_AWLEN),
    .AWSIZE(m_axi_ADDR_BUS_AWSIZE),
    .AWBURST(m_axi_ADDR_BUS_AWBURST),
    .AWLOCK(m_axi_ADDR_BUS_AWLOCK),
    .AWCACHE(m_axi_ADDR_BUS_AWCACHE),
    .AWPROT(m_axi_ADDR_BUS_AWPROT),
    .AWQOS(m_axi_ADDR_BUS_AWQOS),
    .AWREGION(m_axi_ADDR_BUS_AWREGION),
    .AWUSER(m_axi_ADDR_BUS_AWUSER),
    .WVALID(m_axi_ADDR_BUS_WVALID),
    .WREADY(m_axi_ADDR_BUS_WREADY),
    .WDATA(m_axi_ADDR_BUS_WDATA),
    .WSTRB(m_axi_ADDR_BUS_WSTRB),
    .WLAST(m_axi_ADDR_BUS_WLAST),
    .WID(m_axi_ADDR_BUS_WID),
    .WUSER(m_axi_ADDR_BUS_WUSER),
    .ARVALID(m_axi_ADDR_BUS_ARVALID),
    .ARREADY(m_axi_ADDR_BUS_ARREADY),
    .ARADDR(m_axi_ADDR_BUS_ARADDR),
    .ARID(m_axi_ADDR_BUS_ARID),
    .ARLEN(m_axi_ADDR_BUS_ARLEN),
    .ARSIZE(m_axi_ADDR_BUS_ARSIZE),
    .ARBURST(m_axi_ADDR_BUS_ARBURST),
    .ARLOCK(m_axi_ADDR_BUS_ARLOCK),
    .ARCACHE(m_axi_ADDR_BUS_ARCACHE),
    .ARPROT(m_axi_ADDR_BUS_ARPROT),
    .ARQOS(m_axi_ADDR_BUS_ARQOS),
    .ARREGION(m_axi_ADDR_BUS_ARREGION),
    .ARUSER(m_axi_ADDR_BUS_ARUSER),
    .RVALID(m_axi_ADDR_BUS_RVALID),
    .RREADY(m_axi_ADDR_BUS_RREADY),
    .RDATA(m_axi_ADDR_BUS_RDATA),
    .RLAST(m_axi_ADDR_BUS_RLAST),
    .RID(m_axi_ADDR_BUS_RID),
    .RUSER(m_axi_ADDR_BUS_RUSER),
    .RRESP(m_axi_ADDR_BUS_RRESP),
    .BVALID(m_axi_ADDR_BUS_BVALID),
    .BREADY(m_axi_ADDR_BUS_BREADY),
    .BRESP(m_axi_ADDR_BUS_BRESP),
    .BID(m_axi_ADDR_BUS_BID),
    .BUSER(m_axi_ADDR_BUS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(ADDR_BUS_ARVALID),
    .I_ARREADY(ADDR_BUS_ARREADY),
    .I_ARADDR(ADDR_BUS_addr_reg_175),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_1),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(ADDR_BUS_RVALID),
    .I_RREADY(ADDR_BUS_RREADY),
    .I_RDATA(ADDR_BUS_RDATA),
    .I_RID(ADDR_BUS_RID),
    .I_RUSER(ADDR_BUS_RUSER),
    .I_RRESP(ADDR_BUS_RRESP),
    .I_RLAST(ADDR_BUS_RLAST),
    .I_AWVALID(ADDR_BUS_AWVALID),
    .I_AWREADY(ADDR_BUS_AWREADY),
    .I_AWADDR(ADDR_BUS_addr_reg_175),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_1),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(ADDR_BUS_WVALID),
    .I_WREADY(ADDR_BUS_WREADY),
    .I_WDATA(temp_reg_195),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(ap_const_lv4_F),
    .I_BVALID(ADDR_BUS_BVALID),
    .I_BREADY(ADDR_BUS_BREADY),
    .I_BRESP(ADDR_BUS_BRESP),
    .I_BID(ADDR_BUS_BID),
    .I_BUSER(ADDR_BUS_BUSER)
);

poll_ocm_DATA_BUS_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_BUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_BUS_CACHE_VALUE ))
poll_ocm_DATA_BUS_m_axi_U(
    .AWVALID(m_axi_DATA_BUS_AWVALID),
    .AWREADY(m_axi_DATA_BUS_AWREADY),
    .AWADDR(m_axi_DATA_BUS_AWADDR),
    .AWID(m_axi_DATA_BUS_AWID),
    .AWLEN(m_axi_DATA_BUS_AWLEN),
    .AWSIZE(m_axi_DATA_BUS_AWSIZE),
    .AWBURST(m_axi_DATA_BUS_AWBURST),
    .AWLOCK(m_axi_DATA_BUS_AWLOCK),
    .AWCACHE(m_axi_DATA_BUS_AWCACHE),
    .AWPROT(m_axi_DATA_BUS_AWPROT),
    .AWQOS(m_axi_DATA_BUS_AWQOS),
    .AWREGION(m_axi_DATA_BUS_AWREGION),
    .AWUSER(m_axi_DATA_BUS_AWUSER),
    .WVALID(m_axi_DATA_BUS_WVALID),
    .WREADY(m_axi_DATA_BUS_WREADY),
    .WDATA(m_axi_DATA_BUS_WDATA),
    .WSTRB(m_axi_DATA_BUS_WSTRB),
    .WLAST(m_axi_DATA_BUS_WLAST),
    .WID(m_axi_DATA_BUS_WID),
    .WUSER(m_axi_DATA_BUS_WUSER),
    .ARVALID(m_axi_DATA_BUS_ARVALID),
    .ARREADY(m_axi_DATA_BUS_ARREADY),
    .ARADDR(m_axi_DATA_BUS_ARADDR),
    .ARID(m_axi_DATA_BUS_ARID),
    .ARLEN(m_axi_DATA_BUS_ARLEN),
    .ARSIZE(m_axi_DATA_BUS_ARSIZE),
    .ARBURST(m_axi_DATA_BUS_ARBURST),
    .ARLOCK(m_axi_DATA_BUS_ARLOCK),
    .ARCACHE(m_axi_DATA_BUS_ARCACHE),
    .ARPROT(m_axi_DATA_BUS_ARPROT),
    .ARQOS(m_axi_DATA_BUS_ARQOS),
    .ARREGION(m_axi_DATA_BUS_ARREGION),
    .ARUSER(m_axi_DATA_BUS_ARUSER),
    .RVALID(m_axi_DATA_BUS_RVALID),
    .RREADY(m_axi_DATA_BUS_RREADY),
    .RDATA(m_axi_DATA_BUS_RDATA),
    .RLAST(m_axi_DATA_BUS_RLAST),
    .RID(m_axi_DATA_BUS_RID),
    .RUSER(m_axi_DATA_BUS_RUSER),
    .RRESP(m_axi_DATA_BUS_RRESP),
    .BVALID(m_axi_DATA_BUS_BVALID),
    .BREADY(m_axi_DATA_BUS_BREADY),
    .BRESP(m_axi_DATA_BUS_BRESP),
    .BID(m_axi_DATA_BUS_BID),
    .BUSER(m_axi_DATA_BUS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(DATA_BUS_ARREADY),
    .I_ARADDR(ap_const_lv32_0),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_0),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(DATA_BUS_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(DATA_BUS_RDATA),
    .I_RID(DATA_BUS_RID),
    .I_RUSER(DATA_BUS_RUSER),
    .I_RRESP(DATA_BUS_RRESP),
    .I_RLAST(DATA_BUS_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_BUS_AWREADY),
    .I_AWADDR(ap_const_lv32_0),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_0),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_BUS_WREADY),
    .I_WDATA(ap_const_lv32_0),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(ap_const_lv4_0),
    .I_BVALID(DATA_BUS_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_BUS_BRESP),
    .I_BID(DATA_BUS_BID),
    .I_BUSER(DATA_BUS_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_ADDR_BUS_ARREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (or_cond_fu_148_p2 == 1'b0))) begin
            if (~((or_cond_fu_148_p2 == 1'b0) & (1'b0 == ap_sig_ioackin_ADDR_BUS_ARREADY))) begin
                ap_reg_ioackin_ADDR_BUS_ARREADY <= 1'b0;
            end else if ((1'b1 == ADDR_BUS_ARREADY)) begin
                ap_reg_ioackin_ADDR_BUS_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_ADDR_BUS_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            if (~(1'b0 == ap_sig_ioackin_ADDR_BUS_AWREADY)) begin
                ap_reg_ioackin_ADDR_BUS_AWREADY <= 1'b0;
            end else if ((1'b1 == ADDR_BUS_AWREADY)) begin
                ap_reg_ioackin_ADDR_BUS_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_ADDR_BUS_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            if (~(1'b0 == ap_sig_ioackin_ADDR_BUS_WREADY)) begin
                ap_reg_ioackin_ADDR_BUS_WREADY <= 1'b0;
            end else if ((1'b1 == ADDR_BUS_WREADY)) begin
                ap_reg_ioackin_ADDR_BUS_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (or_cond_fu_148_p2 == 1'b0) & ~((or_cond_fu_148_p2 == 1'b0) & (1'b0 == ap_sig_ioackin_ADDR_BUS_ARREADY)))) begin
        mem_index_phi5_fu_72 <= adjSize6_reg_169;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        mem_index_phi5_fu_72 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(ADDR_BUS_RVALID == 1'b0))) begin
        ADDR_BUS_addr_read_reg_190 <= ADDR_BUS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        ADDR_BUS_addr_reg_175[29 : 0] <= tmp_2_fu_109_p1[29 : 0];
        adjSize6_reg_169 <= {{addr[ap_const_lv32_5 : ap_const_lv32_2]}};
        ptr_cmp_reg_181 <= ptr_cmp_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((or_cond_fu_148_p2 == 1'b0) & (1'b0 == ap_sig_ioackin_ADDR_BUS_ARREADY)))) begin
        or_cond_reg_186 <= or_cond_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == ap_sig_ioackin_ADDR_BUS_AWREADY))) begin
        temp_reg_195 <= temp_fu_157_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (or_cond_fu_148_p2 == 1'b0) & (1'b0 == ap_reg_ioackin_ADDR_BUS_ARREADY))) begin
        ADDR_BUS_ARVALID = 1'b1;
    end else begin
        ADDR_BUS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_reg_ioackin_ADDR_BUS_AWREADY))) begin
        ADDR_BUS_AWVALID = 1'b1;
    end else begin
        ADDR_BUS_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'b0 == or_cond_reg_186) & ~((1'b0 == or_cond_reg_186) & (ADDR_BUS_BVALID == 1'b0)))) begin
        ADDR_BUS_BREADY = 1'b1;
    end else begin
        ADDR_BUS_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(ADDR_BUS_RVALID == 1'b0))) begin
        ADDR_BUS_RREADY = 1'b1;
    end else begin
        ADDR_BUS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'b0 == ap_reg_ioackin_ADDR_BUS_WREADY))) begin
        ADDR_BUS_WVALID = 1'b1;
    end else begin
        ADDR_BUS_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (or_cond_fu_148_p2 == 1'b0))) begin
        ADDR_BUS_blk_n_AR = m_axi_ADDR_BUS_ARREADY;
    end else begin
        ADDR_BUS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ADDR_BUS_blk_n_AW = m_axi_ADDR_BUS_AWREADY;
    end else begin
        ADDR_BUS_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'b0 == or_cond_reg_186))) begin
        ADDR_BUS_blk_n_B = m_axi_ADDR_BUS_BVALID;
    end else begin
        ADDR_BUS_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ADDR_BUS_blk_n_R = m_axi_ADDR_BUS_RVALID;
    end else begin
        ADDR_BUS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ADDR_BUS_blk_n_W = m_axi_ADDR_BUS_WREADY;
    end else begin
        ADDR_BUS_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_ADDR_BUS_ARREADY)) begin
        ap_sig_ioackin_ADDR_BUS_ARREADY = ADDR_BUS_ARREADY;
    end else begin
        ap_sig_ioackin_ADDR_BUS_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_ADDR_BUS_AWREADY)) begin
        ap_sig_ioackin_ADDR_BUS_AWREADY = ADDR_BUS_AWREADY;
    end else begin
        ap_sig_ioackin_ADDR_BUS_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_ADDR_BUS_WREADY)) begin
        ap_sig_ioackin_ADDR_BUS_WREADY = ADDR_BUS_WREADY;
    end else begin
        ap_sig_ioackin_ADDR_BUS_WREADY = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((or_cond_fu_148_p2 == 1'b0) & (1'b0 == ap_sig_ioackin_ADDR_BUS_ARREADY)) & ~(or_cond_fu_148_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((or_cond_fu_148_p2 == 1'b0) & ~((or_cond_fu_148_p2 == 1'b0) & (1'b0 == ap_sig_ioackin_ADDR_BUS_ARREADY)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (~(ADDR_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (~(1'b0 == ap_sig_ioackin_ADDR_BUS_AWREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (~(1'b0 == ap_sig_ioackin_ADDR_BUS_WREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (~((1'b0 == or_cond_reg_186) & (ADDR_BUS_BVALID == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addr1_fu_99_p4 = {{addr[ap_const_lv32_1F : ap_const_lv32_2]}};

assign adjSize6_fu_113_p4 = {{addr[ap_const_lv32_5 : ap_const_lv32_2]}};

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign ap_done = 1'b0;

assign ap_ready = 1'b0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign or_cond_fu_148_p2 = (ptr_cmp_reg_181 | ptr_cmp7_fu_143_p2);

assign ptr_cmp7_fu_143_p2 = ((mem_index_phi5_fu_72 == adjSize6_reg_169) ? 1'b1 : 1'b0);

assign ptr_cmp_fu_129_p2 = ((adjSize6_fu_113_p4 == ap_const_lv4_0) ? 1'b1 : 1'b0);

assign temp_fu_157_p2 = (ADDR_BUS_addr_read_reg_190 + ap_const_lv32_1);

assign tmp_2_fu_109_p1 = addr1_fu_99_p4;

always @ (posedge ap_clk) begin
    ADDR_BUS_addr_reg_175[31:30] <= 2'b00;
end

endmodule //poll_ocm
