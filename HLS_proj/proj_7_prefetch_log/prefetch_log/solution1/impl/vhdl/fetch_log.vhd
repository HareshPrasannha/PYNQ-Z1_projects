-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fetch_log is
generic (
    C_M_AXI_A_BUS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_A_BUS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_A_BUS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LOG_BUS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_LOG_BUS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_LOG_BUS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LOG_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_LOG_BUS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LOG_BUS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LOG_BUS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LOG_BUS_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_LOG_BUS_USER_VALUE : INTEGER := 0;
    C_M_AXI_A_BUS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_A_BUS_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_LOG_BUS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_LOG_BUS_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_A_BUS_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_A_BUS_AWVALID : OUT STD_LOGIC;
    m_axi_A_BUS_AWREADY : IN STD_LOGIC;
    m_axi_A_BUS_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_A_BUS_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_A_BUS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_BUS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_BUS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_AWUSER_WIDTH-1 downto 0);
    m_axi_A_BUS_WVALID : OUT STD_LOGIC;
    m_axi_A_BUS_WREADY : IN STD_LOGIC;
    m_axi_A_BUS_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_DATA_WIDTH-1 downto 0);
    m_axi_A_BUS_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_DATA_WIDTH/8-1 downto 0);
    m_axi_A_BUS_WLAST : OUT STD_LOGIC;
    m_axi_A_BUS_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_WUSER_WIDTH-1 downto 0);
    m_axi_A_BUS_ARVALID : OUT STD_LOGIC;
    m_axi_A_BUS_ARREADY : IN STD_LOGIC;
    m_axi_A_BUS_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_A_BUS_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_A_BUS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_BUS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_BUS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ARUSER_WIDTH-1 downto 0);
    m_axi_A_BUS_RVALID : IN STD_LOGIC;
    m_axi_A_BUS_RREADY : OUT STD_LOGIC;
    m_axi_A_BUS_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_DATA_WIDTH-1 downto 0);
    m_axi_A_BUS_RLAST : IN STD_LOGIC;
    m_axi_A_BUS_RID : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_RUSER_WIDTH-1 downto 0);
    m_axi_A_BUS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_BVALID : IN STD_LOGIC;
    m_axi_A_BUS_BREADY : OUT STD_LOGIC;
    m_axi_A_BUS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_BID : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_BUSER_WIDTH-1 downto 0);
    m_axi_LOG_BUS_AWVALID : OUT STD_LOGIC;
    m_axi_LOG_BUS_AWREADY : IN STD_LOGIC;
    m_axi_LOG_BUS_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_LOG_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_LOG_BUS_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_LOG_BUS_ID_WIDTH-1 downto 0);
    m_axi_LOG_BUS_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_LOG_BUS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_LOG_BUS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_LOG_BUS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_LOG_BUS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_LOG_BUS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_LOG_BUS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_LOG_BUS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_LOG_BUS_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_LOG_BUS_AWUSER_WIDTH-1 downto 0);
    m_axi_LOG_BUS_WVALID : OUT STD_LOGIC;
    m_axi_LOG_BUS_WREADY : IN STD_LOGIC;
    m_axi_LOG_BUS_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_LOG_BUS_DATA_WIDTH-1 downto 0);
    m_axi_LOG_BUS_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_LOG_BUS_DATA_WIDTH/8-1 downto 0);
    m_axi_LOG_BUS_WLAST : OUT STD_LOGIC;
    m_axi_LOG_BUS_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_LOG_BUS_ID_WIDTH-1 downto 0);
    m_axi_LOG_BUS_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_LOG_BUS_WUSER_WIDTH-1 downto 0);
    m_axi_LOG_BUS_ARVALID : OUT STD_LOGIC;
    m_axi_LOG_BUS_ARREADY : IN STD_LOGIC;
    m_axi_LOG_BUS_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_LOG_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_LOG_BUS_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_LOG_BUS_ID_WIDTH-1 downto 0);
    m_axi_LOG_BUS_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_LOG_BUS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_LOG_BUS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_LOG_BUS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_LOG_BUS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_LOG_BUS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_LOG_BUS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_LOG_BUS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_LOG_BUS_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_LOG_BUS_ARUSER_WIDTH-1 downto 0);
    m_axi_LOG_BUS_RVALID : IN STD_LOGIC;
    m_axi_LOG_BUS_RREADY : OUT STD_LOGIC;
    m_axi_LOG_BUS_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_LOG_BUS_DATA_WIDTH-1 downto 0);
    m_axi_LOG_BUS_RLAST : IN STD_LOGIC;
    m_axi_LOG_BUS_RID : IN STD_LOGIC_VECTOR (C_M_AXI_LOG_BUS_ID_WIDTH-1 downto 0);
    m_axi_LOG_BUS_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_LOG_BUS_RUSER_WIDTH-1 downto 0);
    m_axi_LOG_BUS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_LOG_BUS_BVALID : IN STD_LOGIC;
    m_axi_LOG_BUS_BREADY : OUT STD_LOGIC;
    m_axi_LOG_BUS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_LOG_BUS_BID : IN STD_LOGIC_VECTOR (C_M_AXI_LOG_BUS_ID_WIDTH-1 downto 0);
    m_axi_LOG_BUS_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_LOG_BUS_BUSER_WIDTH-1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fetch_log is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fetch_log,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=128001,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1489,HLS_SYN_LUT=1591}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_FA00 : STD_LOGIC_VECTOR (15 downto 0) := "1111101000000000";
    constant ap_const_lv16_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (31 downto 0);
    signal log : STD_LOGIC_VECTOR (31 downto 0);
    signal A_BUS_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal A_BUS_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal A_BUS_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal A_BUS_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal A_BUS_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal LOG_BUS_blk_n_AW : STD_LOGIC;
    signal LOG_BUS_blk_n_W : STD_LOGIC;
    signal LOG_BUS_blk_n_B : STD_LOGIC;
    signal A_BUS_AWVALID : STD_LOGIC;
    signal A_BUS_AWREADY : STD_LOGIC;
    signal A_BUS_WVALID : STD_LOGIC;
    signal A_BUS_WREADY : STD_LOGIC;
    signal A_BUS_ARVALID : STD_LOGIC;
    signal A_BUS_ARREADY : STD_LOGIC;
    signal A_BUS_RVALID : STD_LOGIC;
    signal A_BUS_RREADY : STD_LOGIC;
    signal A_BUS_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal A_BUS_RLAST : STD_LOGIC;
    signal A_BUS_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal A_BUS_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal A_BUS_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal A_BUS_BVALID : STD_LOGIC;
    signal A_BUS_BREADY : STD_LOGIC;
    signal A_BUS_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal A_BUS_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal A_BUS_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal LOG_BUS_AWVALID : STD_LOGIC;
    signal LOG_BUS_AWREADY : STD_LOGIC;
    signal LOG_BUS_WVALID : STD_LOGIC;
    signal LOG_BUS_WREADY : STD_LOGIC;
    signal LOG_BUS_ARREADY : STD_LOGIC;
    signal LOG_BUS_RVALID : STD_LOGIC;
    signal LOG_BUS_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal LOG_BUS_RLAST : STD_LOGIC;
    signal LOG_BUS_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal LOG_BUS_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal LOG_BUS_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal LOG_BUS_BVALID : STD_LOGIC;
    signal LOG_BUS_BREADY : STD_LOGIC;
    signal LOG_BUS_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal LOG_BUS_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal LOG_BUS_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal LOG_BUS_addr_reg_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_cast_fu_171_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_cast_reg_233 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_cast1_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast1_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal a2_sum_fu_189_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal a2_sum_reg_246 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_251 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_200_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_1_reg_256 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_BUS_addr_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_A_BUS_ARREADY : STD_LOGIC;
    signal temp_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_val_1_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_val_1_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_A_BUS_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_LOG_BUS_AWREADY : STD_LOGIC;
    signal p_ret_val_fu_221_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_ret_val_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_val_reg_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a2_sum_cast_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_A_BUS_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_A_BUS_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_A_BUS_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_A_BUS_WREADY : STD_LOGIC;
    signal ap_sig_ioackin_LOG_BUS_WREADY : STD_LOGIC;
    signal ap_reg_ioackin_LOG_BUS_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_LOG_BUS_WREADY : STD_LOGIC := '0';
    signal log3_fu_141_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_fu_161_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal i_cast1_cast_fu_179_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component fetch_log_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        a : OUT STD_LOGIC_VECTOR (31 downto 0);
        log : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fetch_log_A_BUS_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fetch_log_LOG_BUS_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    fetch_log_AXILiteS_s_axi_U : component fetch_log_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ret_val_reg_118,
        a => a,
        log => log);

    fetch_log_A_BUS_m_axi_U : component fetch_log_A_BUS_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_A_BUS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_A_BUS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_A_BUS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_A_BUS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_A_BUS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_A_BUS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_A_BUS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_A_BUS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_A_BUS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_A_BUS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_A_BUS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_A_BUS_AWVALID,
        AWREADY => m_axi_A_BUS_AWREADY,
        AWADDR => m_axi_A_BUS_AWADDR,
        AWID => m_axi_A_BUS_AWID,
        AWLEN => m_axi_A_BUS_AWLEN,
        AWSIZE => m_axi_A_BUS_AWSIZE,
        AWBURST => m_axi_A_BUS_AWBURST,
        AWLOCK => m_axi_A_BUS_AWLOCK,
        AWCACHE => m_axi_A_BUS_AWCACHE,
        AWPROT => m_axi_A_BUS_AWPROT,
        AWQOS => m_axi_A_BUS_AWQOS,
        AWREGION => m_axi_A_BUS_AWREGION,
        AWUSER => m_axi_A_BUS_AWUSER,
        WVALID => m_axi_A_BUS_WVALID,
        WREADY => m_axi_A_BUS_WREADY,
        WDATA => m_axi_A_BUS_WDATA,
        WSTRB => m_axi_A_BUS_WSTRB,
        WLAST => m_axi_A_BUS_WLAST,
        WID => m_axi_A_BUS_WID,
        WUSER => m_axi_A_BUS_WUSER,
        ARVALID => m_axi_A_BUS_ARVALID,
        ARREADY => m_axi_A_BUS_ARREADY,
        ARADDR => m_axi_A_BUS_ARADDR,
        ARID => m_axi_A_BUS_ARID,
        ARLEN => m_axi_A_BUS_ARLEN,
        ARSIZE => m_axi_A_BUS_ARSIZE,
        ARBURST => m_axi_A_BUS_ARBURST,
        ARLOCK => m_axi_A_BUS_ARLOCK,
        ARCACHE => m_axi_A_BUS_ARCACHE,
        ARPROT => m_axi_A_BUS_ARPROT,
        ARQOS => m_axi_A_BUS_ARQOS,
        ARREGION => m_axi_A_BUS_ARREGION,
        ARUSER => m_axi_A_BUS_ARUSER,
        RVALID => m_axi_A_BUS_RVALID,
        RREADY => m_axi_A_BUS_RREADY,
        RDATA => m_axi_A_BUS_RDATA,
        RLAST => m_axi_A_BUS_RLAST,
        RID => m_axi_A_BUS_RID,
        RUSER => m_axi_A_BUS_RUSER,
        RRESP => m_axi_A_BUS_RRESP,
        BVALID => m_axi_A_BUS_BVALID,
        BREADY => m_axi_A_BUS_BREADY,
        BRESP => m_axi_A_BUS_BRESP,
        BID => m_axi_A_BUS_BID,
        BUSER => m_axi_A_BUS_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => A_BUS_ARVALID,
        I_ARREADY => A_BUS_ARREADY,
        I_ARADDR => a2_sum_cast_fu_206_p1,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => A_BUS_RVALID,
        I_RREADY => A_BUS_RREADY,
        I_RDATA => A_BUS_RDATA,
        I_RID => A_BUS_RID,
        I_RUSER => A_BUS_RUSER,
        I_RRESP => A_BUS_RRESP,
        I_RLAST => A_BUS_RLAST,
        I_AWVALID => A_BUS_AWVALID,
        I_AWREADY => A_BUS_AWREADY,
        I_AWADDR => A_BUS_addr_reg_261,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => A_BUS_WVALID,
        I_WREADY => A_BUS_WREADY,
        I_WDATA => ret_val_1_reg_272,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => A_BUS_BVALID,
        I_BREADY => A_BUS_BREADY,
        I_BRESP => A_BUS_BRESP,
        I_BID => A_BUS_BID,
        I_BUSER => A_BUS_BUSER);

    fetch_log_LOG_BUS_m_axi_U : component fetch_log_LOG_BUS_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_LOG_BUS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_LOG_BUS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_LOG_BUS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_LOG_BUS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_LOG_BUS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_LOG_BUS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_LOG_BUS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_LOG_BUS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_LOG_BUS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_LOG_BUS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_LOG_BUS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_LOG_BUS_AWVALID,
        AWREADY => m_axi_LOG_BUS_AWREADY,
        AWADDR => m_axi_LOG_BUS_AWADDR,
        AWID => m_axi_LOG_BUS_AWID,
        AWLEN => m_axi_LOG_BUS_AWLEN,
        AWSIZE => m_axi_LOG_BUS_AWSIZE,
        AWBURST => m_axi_LOG_BUS_AWBURST,
        AWLOCK => m_axi_LOG_BUS_AWLOCK,
        AWCACHE => m_axi_LOG_BUS_AWCACHE,
        AWPROT => m_axi_LOG_BUS_AWPROT,
        AWQOS => m_axi_LOG_BUS_AWQOS,
        AWREGION => m_axi_LOG_BUS_AWREGION,
        AWUSER => m_axi_LOG_BUS_AWUSER,
        WVALID => m_axi_LOG_BUS_WVALID,
        WREADY => m_axi_LOG_BUS_WREADY,
        WDATA => m_axi_LOG_BUS_WDATA,
        WSTRB => m_axi_LOG_BUS_WSTRB,
        WLAST => m_axi_LOG_BUS_WLAST,
        WID => m_axi_LOG_BUS_WID,
        WUSER => m_axi_LOG_BUS_WUSER,
        ARVALID => m_axi_LOG_BUS_ARVALID,
        ARREADY => m_axi_LOG_BUS_ARREADY,
        ARADDR => m_axi_LOG_BUS_ARADDR,
        ARID => m_axi_LOG_BUS_ARID,
        ARLEN => m_axi_LOG_BUS_ARLEN,
        ARSIZE => m_axi_LOG_BUS_ARSIZE,
        ARBURST => m_axi_LOG_BUS_ARBURST,
        ARLOCK => m_axi_LOG_BUS_ARLOCK,
        ARCACHE => m_axi_LOG_BUS_ARCACHE,
        ARPROT => m_axi_LOG_BUS_ARPROT,
        ARQOS => m_axi_LOG_BUS_ARQOS,
        ARREGION => m_axi_LOG_BUS_ARREGION,
        ARUSER => m_axi_LOG_BUS_ARUSER,
        RVALID => m_axi_LOG_BUS_RVALID,
        RREADY => m_axi_LOG_BUS_RREADY,
        RDATA => m_axi_LOG_BUS_RDATA,
        RLAST => m_axi_LOG_BUS_RLAST,
        RID => m_axi_LOG_BUS_RID,
        RUSER => m_axi_LOG_BUS_RUSER,
        RRESP => m_axi_LOG_BUS_RRESP,
        BVALID => m_axi_LOG_BUS_BVALID,
        BREADY => m_axi_LOG_BUS_BREADY,
        BRESP => m_axi_LOG_BUS_BRESP,
        BID => m_axi_LOG_BUS_BID,
        BUSER => m_axi_LOG_BUS_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => LOG_BUS_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => LOG_BUS_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => LOG_BUS_RDATA,
        I_RID => LOG_BUS_RID,
        I_RUSER => LOG_BUS_RUSER,
        I_RRESP => LOG_BUS_RRESP,
        I_RLAST => LOG_BUS_RLAST,
        I_AWVALID => LOG_BUS_AWVALID,
        I_AWREADY => LOG_BUS_AWREADY,
        I_AWADDR => LOG_BUS_addr_reg_228,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => LOG_BUS_WVALID,
        I_WREADY => LOG_BUS_WREADY,
        I_WDATA => i_cast1_reg_238,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => LOG_BUS_BVALID,
        I_BREADY => LOG_BUS_BREADY,
        I_BRESP => LOG_BUS_BRESP,
        I_BID => LOG_BUS_BID,
        I_BUSER => LOG_BUS_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_A_BUS_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_A_BUS_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state3)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) then 
                        ap_reg_ioackin_A_BUS_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = A_BUS_ARREADY)) then 
                        ap_reg_ioackin_A_BUS_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_A_BUS_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_A_BUS_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state11)) then
                    if (not(((ap_const_logic_0 = ap_sig_ioackin_A_BUS_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_LOG_BUS_AWREADY)))) then 
                        ap_reg_ioackin_A_BUS_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = A_BUS_AWREADY)) then 
                        ap_reg_ioackin_A_BUS_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_A_BUS_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_A_BUS_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state12)) then
                    if (not(((ap_const_logic_0 = ap_sig_ioackin_A_BUS_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_LOG_BUS_WREADY)))) then 
                        ap_reg_ioackin_A_BUS_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = A_BUS_WREADY)) then 
                        ap_reg_ioackin_A_BUS_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_LOG_BUS_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_LOG_BUS_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state11)) then
                    if (not(((ap_const_logic_0 = ap_sig_ioackin_A_BUS_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_LOG_BUS_AWREADY)))) then 
                        ap_reg_ioackin_LOG_BUS_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = LOG_BUS_AWREADY)) then 
                        ap_reg_ioackin_LOG_BUS_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_LOG_BUS_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_LOG_BUS_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state12)) then
                    if (not(((ap_const_logic_0 = ap_sig_ioackin_A_BUS_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_LOG_BUS_WREADY)))) then 
                        ap_reg_ioackin_LOG_BUS_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = LOG_BUS_WREADY)) then 
                        ap_reg_ioackin_LOG_BUS_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17) and not(((A_BUS_BVALID = ap_const_logic_0) or (LOG_BUS_BVALID = ap_const_logic_0))))) then 
                i_reg_130 <= i_1_reg_256;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_130 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    ret_val_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17) and not(((A_BUS_BVALID = ap_const_logic_0) or (LOG_BUS_BVALID = ap_const_logic_0))))) then 
                ret_val_reg_118 <= p_ret_val_reg_277;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                ret_val_reg_118 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)))) then
                    A_BUS_addr_reg_261(30 downto 0) <= a2_sum_cast_fu_206_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                    LOG_BUS_addr_reg_228(29 downto 0) <= tmp_1_fu_151_p1(29 downto 0);
                    tmp_3_cast_reg_233(29 downto 0) <= tmp_3_cast_fu_171_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_fu_183_p2 = ap_const_lv1_0)))) then
                a2_sum_reg_246 <= a2_sum_fu_189_p2;
                i_1_reg_256 <= i_1_fu_200_p2;
                tmp_2_reg_251 <= tmp_2_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                    i_cast1_reg_238(15 downto 0) <= i_cast1_fu_175_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11) and not(((ap_const_logic_0 = ap_sig_ioackin_A_BUS_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_LOG_BUS_AWREADY))))) then
                p_ret_val_reg_277 <= p_ret_val_fu_221_p3;
                ret_val_1_reg_272 <= ret_val_1_fu_216_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((A_BUS_RVALID = ap_const_logic_0)))) then
                temp_reg_267 <= A_BUS_RDATA;
            end if;
        end if;
    end process;
    LOG_BUS_addr_reg_228(31 downto 30) <= "00";
    tmp_3_cast_reg_233(30) <= '0';
    i_cast1_reg_238(31 downto 16) <= "0000000000000000";
    A_BUS_addr_reg_261(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, A_BUS_RVALID, A_BUS_BVALID, LOG_BUS_BVALID, tmp_fu_183_p2, ap_sig_ioackin_A_BUS_ARREADY, ap_sig_ioackin_A_BUS_AWREADY, ap_sig_ioackin_LOG_BUS_AWREADY, ap_sig_ioackin_A_BUS_WREADY, ap_sig_ioackin_LOG_BUS_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((tmp_fu_183_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (not((A_BUS_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_A_BUS_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_LOG_BUS_AWREADY)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_A_BUS_WREADY) or (ap_const_logic_0 = ap_sig_ioackin_LOG_BUS_WREADY)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (not(((A_BUS_BVALID = ap_const_logic_0) or (LOG_BUS_BVALID = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_BUS_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_reg_ioackin_A_BUS_ARREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY))) then 
            A_BUS_ARVALID <= ap_const_logic_1;
        else 
            A_BUS_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    A_BUS_AWVALID_assign_proc : process(ap_CS_fsm_state11, ap_reg_ioackin_A_BUS_AWREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state11) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_AWREADY))) then 
            A_BUS_AWVALID <= ap_const_logic_1;
        else 
            A_BUS_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    A_BUS_BREADY_assign_proc : process(ap_CS_fsm_state17, A_BUS_BVALID, LOG_BUS_BVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17) and not(((A_BUS_BVALID = ap_const_logic_0) or (LOG_BUS_BVALID = ap_const_logic_0))))) then 
            A_BUS_BREADY <= ap_const_logic_1;
        else 
            A_BUS_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    A_BUS_RREADY_assign_proc : process(ap_CS_fsm_state10, A_BUS_RVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((A_BUS_RVALID = ap_const_logic_0)))) then 
            A_BUS_RREADY <= ap_const_logic_1;
        else 
            A_BUS_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    A_BUS_WVALID_assign_proc : process(ap_CS_fsm_state12, ap_reg_ioackin_A_BUS_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_WREADY))) then 
            A_BUS_WVALID <= ap_const_logic_1;
        else 
            A_BUS_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    A_BUS_blk_n_AR_assign_proc : process(m_axi_A_BUS_ARREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            A_BUS_blk_n_AR <= m_axi_A_BUS_ARREADY;
        else 
            A_BUS_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    A_BUS_blk_n_AW_assign_proc : process(m_axi_A_BUS_AWREADY, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            A_BUS_blk_n_AW <= m_axi_A_BUS_AWREADY;
        else 
            A_BUS_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    A_BUS_blk_n_B_assign_proc : process(m_axi_A_BUS_BVALID, ap_CS_fsm_state17)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            A_BUS_blk_n_B <= m_axi_A_BUS_BVALID;
        else 
            A_BUS_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    A_BUS_blk_n_R_assign_proc : process(m_axi_A_BUS_RVALID, ap_CS_fsm_state10)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            A_BUS_blk_n_R <= m_axi_A_BUS_RVALID;
        else 
            A_BUS_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    A_BUS_blk_n_W_assign_proc : process(m_axi_A_BUS_WREADY, ap_CS_fsm_state12)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            A_BUS_blk_n_W <= m_axi_A_BUS_WREADY;
        else 
            A_BUS_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    LOG_BUS_AWVALID_assign_proc : process(ap_CS_fsm_state11, ap_reg_ioackin_LOG_BUS_AWREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state11) and (ap_const_logic_0 = ap_reg_ioackin_LOG_BUS_AWREADY))) then 
            LOG_BUS_AWVALID <= ap_const_logic_1;
        else 
            LOG_BUS_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    LOG_BUS_BREADY_assign_proc : process(ap_CS_fsm_state17, A_BUS_BVALID, LOG_BUS_BVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17) and not(((A_BUS_BVALID = ap_const_logic_0) or (LOG_BUS_BVALID = ap_const_logic_0))))) then 
            LOG_BUS_BREADY <= ap_const_logic_1;
        else 
            LOG_BUS_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    LOG_BUS_WVALID_assign_proc : process(ap_CS_fsm_state12, ap_reg_ioackin_LOG_BUS_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12) and (ap_const_logic_0 = ap_reg_ioackin_LOG_BUS_WREADY))) then 
            LOG_BUS_WVALID <= ap_const_logic_1;
        else 
            LOG_BUS_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    LOG_BUS_blk_n_AW_assign_proc : process(m_axi_LOG_BUS_AWREADY, ap_CS_fsm_state11)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state11))) then 
            LOG_BUS_blk_n_AW <= m_axi_LOG_BUS_AWREADY;
        else 
            LOG_BUS_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    LOG_BUS_blk_n_B_assign_proc : process(m_axi_LOG_BUS_BVALID, ap_CS_fsm_state17)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then 
            LOG_BUS_blk_n_B <= m_axi_LOG_BUS_BVALID;
        else 
            LOG_BUS_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    LOG_BUS_blk_n_W_assign_proc : process(m_axi_LOG_BUS_WREADY, ap_CS_fsm_state12)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state12))) then 
            LOG_BUS_blk_n_W <= m_axi_LOG_BUS_WREADY;
        else 
            LOG_BUS_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    a2_sum_cast_fu_206_p1 <= std_logic_vector(resize(unsigned(a2_sum_reg_246),32));
    a2_sum_fu_189_p2 <= std_logic_vector(unsigned(tmp_3_cast_reg_233) + unsigned(i_cast1_cast_fu_179_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);

    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_fu_183_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_fu_183_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_183_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_fu_183_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_A_BUS_ARREADY_assign_proc : process(A_BUS_ARREADY, ap_reg_ioackin_A_BUS_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) then 
            ap_sig_ioackin_A_BUS_ARREADY <= A_BUS_ARREADY;
        else 
            ap_sig_ioackin_A_BUS_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_A_BUS_AWREADY_assign_proc : process(A_BUS_AWREADY, ap_reg_ioackin_A_BUS_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_A_BUS_AWREADY)) then 
            ap_sig_ioackin_A_BUS_AWREADY <= A_BUS_AWREADY;
        else 
            ap_sig_ioackin_A_BUS_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_A_BUS_WREADY_assign_proc : process(A_BUS_WREADY, ap_reg_ioackin_A_BUS_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_A_BUS_WREADY)) then 
            ap_sig_ioackin_A_BUS_WREADY <= A_BUS_WREADY;
        else 
            ap_sig_ioackin_A_BUS_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_LOG_BUS_AWREADY_assign_proc : process(LOG_BUS_AWREADY, ap_reg_ioackin_LOG_BUS_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_LOG_BUS_AWREADY)) then 
            ap_sig_ioackin_LOG_BUS_AWREADY <= LOG_BUS_AWREADY;
        else 
            ap_sig_ioackin_LOG_BUS_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_LOG_BUS_WREADY_assign_proc : process(LOG_BUS_WREADY, ap_reg_ioackin_LOG_BUS_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_LOG_BUS_WREADY)) then 
            ap_sig_ioackin_LOG_BUS_WREADY <= LOG_BUS_WREADY;
        else 
            ap_sig_ioackin_LOG_BUS_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    i_1_fu_200_p2 <= std_logic_vector(unsigned(i_reg_130) + unsigned(ap_const_lv16_8));
    i_cast1_cast_fu_179_p1 <= std_logic_vector(resize(unsigned(i_reg_130),31));
    i_cast1_fu_175_p1 <= std_logic_vector(resize(unsigned(i_reg_130),32));
    log3_fu_141_p4 <= log(31 downto 2);
    p_ret_val_fu_221_p3 <= 
        ret_val_1_fu_216_p2 when (tmp_2_reg_251(0) = '1') else 
        ret_val_reg_118;
    ret_val_1_fu_216_p2 <= std_logic_vector(unsigned(temp_reg_267) + unsigned(ap_const_lv32_A));
    tmp_1_fu_151_p1 <= std_logic_vector(resize(unsigned(log3_fu_141_p4),32));
    tmp_2_fu_194_p2 <= "1" when (i_reg_130 = ap_const_lv16_10) else "0";
    tmp_3_cast_fu_171_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_161_p4),31));
    tmp_3_fu_161_p4 <= a(31 downto 2);
    tmp_fu_183_p2 <= "1" when (unsigned(i_reg_130) < unsigned(ap_const_lv16_FA00)) else "0";
end behav;
