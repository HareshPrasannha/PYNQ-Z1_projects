// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="LL_prefetch,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=22.380000,HLS_SYN_LAT=78715,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=1183,HLS_SYN_LUT=1458}" *)

module LL_prefetch (
        ap_clk,
        ap_rst_n,
        m_axi_A_BUS_AWVALID,
        m_axi_A_BUS_AWREADY,
        m_axi_A_BUS_AWADDR,
        m_axi_A_BUS_AWID,
        m_axi_A_BUS_AWLEN,
        m_axi_A_BUS_AWSIZE,
        m_axi_A_BUS_AWBURST,
        m_axi_A_BUS_AWLOCK,
        m_axi_A_BUS_AWCACHE,
        m_axi_A_BUS_AWPROT,
        m_axi_A_BUS_AWQOS,
        m_axi_A_BUS_AWREGION,
        m_axi_A_BUS_AWUSER,
        m_axi_A_BUS_WVALID,
        m_axi_A_BUS_WREADY,
        m_axi_A_BUS_WDATA,
        m_axi_A_BUS_WSTRB,
        m_axi_A_BUS_WLAST,
        m_axi_A_BUS_WID,
        m_axi_A_BUS_WUSER,
        m_axi_A_BUS_ARVALID,
        m_axi_A_BUS_ARREADY,
        m_axi_A_BUS_ARADDR,
        m_axi_A_BUS_ARID,
        m_axi_A_BUS_ARLEN,
        m_axi_A_BUS_ARSIZE,
        m_axi_A_BUS_ARBURST,
        m_axi_A_BUS_ARLOCK,
        m_axi_A_BUS_ARCACHE,
        m_axi_A_BUS_ARPROT,
        m_axi_A_BUS_ARQOS,
        m_axi_A_BUS_ARREGION,
        m_axi_A_BUS_ARUSER,
        m_axi_A_BUS_RVALID,
        m_axi_A_BUS_RREADY,
        m_axi_A_BUS_RDATA,
        m_axi_A_BUS_RLAST,
        m_axi_A_BUS_RID,
        m_axi_A_BUS_RUSER,
        m_axi_A_BUS_RRESP,
        m_axi_A_BUS_BVALID,
        m_axi_A_BUS_BREADY,
        m_axi_A_BUS_BRESP,
        m_axi_A_BUS_BID,
        m_axi_A_BUS_BUSER,
        s_axi_CFG_AWVALID,
        s_axi_CFG_AWREADY,
        s_axi_CFG_AWADDR,
        s_axi_CFG_WVALID,
        s_axi_CFG_WREADY,
        s_axi_CFG_WDATA,
        s_axi_CFG_WSTRB,
        s_axi_CFG_ARVALID,
        s_axi_CFG_ARREADY,
        s_axi_CFG_ARADDR,
        s_axi_CFG_RVALID,
        s_axi_CFG_RREADY,
        s_axi_CFG_RDATA,
        s_axi_CFG_RRESP,
        s_axi_CFG_BVALID,
        s_axi_CFG_BREADY,
        s_axi_CFG_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 40'b1;
parameter    ap_ST_fsm_state2 = 40'b10;
parameter    ap_ST_fsm_state3 = 40'b100;
parameter    ap_ST_fsm_state4 = 40'b1000;
parameter    ap_ST_fsm_state5 = 40'b10000;
parameter    ap_ST_fsm_state6 = 40'b100000;
parameter    ap_ST_fsm_state7 = 40'b1000000;
parameter    ap_ST_fsm_state8 = 40'b10000000;
parameter    ap_ST_fsm_state9 = 40'b100000000;
parameter    ap_ST_fsm_state10 = 40'b1000000000;
parameter    ap_ST_fsm_state11 = 40'b10000000000;
parameter    ap_ST_fsm_state12 = 40'b100000000000;
parameter    ap_ST_fsm_state13 = 40'b1000000000000;
parameter    ap_ST_fsm_state14 = 40'b10000000000000;
parameter    ap_ST_fsm_state15 = 40'b100000000000000;
parameter    ap_ST_fsm_state16 = 40'b1000000000000000;
parameter    ap_ST_fsm_state17 = 40'b10000000000000000;
parameter    ap_ST_fsm_state18 = 40'b100000000000000000;
parameter    ap_ST_fsm_state19 = 40'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 40'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 40'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 40'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 40'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 40'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 40'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 40'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 40'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 40'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 40'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 40'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 40'b1000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage0 = 40'b10000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage1 = 40'b100000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage2 = 40'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage3 = 40'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage4 = 40'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage5 = 40'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage6 = 40'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage7 = 40'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state49 = 40'b1000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    C_S_AXI_CFG_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CFG_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_A_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_A_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_A_BUS_DATA_WIDTH = 64;
parameter    C_M_AXI_A_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_A_BUS_USER_VALUE = 0;
parameter    C_M_AXI_A_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_A_BUS_CACHE_VALUE = 3;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv25_0 = 25'b0000000000000000000000000;
parameter    ap_const_lv14_0 = 14'b00000000000000;
parameter    ap_const_lv9_19 = 9'b11001;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv9_1F4 = 9'b111110100;
parameter    ap_const_lv14_2341 = 14'b10001101000001;
parameter    ap_const_lv14_1 = 14'b1;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv8_0 = 8'b00000000;

parameter C_S_AXI_CFG_WSTRB_WIDTH = (C_S_AXI_CFG_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_A_BUS_WSTRB_WIDTH = (C_M_AXI_A_BUS_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_A_BUS_AWVALID;
input   m_axi_A_BUS_AWREADY;
output  [C_M_AXI_A_BUS_ADDR_WIDTH - 1 : 0] m_axi_A_BUS_AWADDR;
output  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_AWID;
output  [7:0] m_axi_A_BUS_AWLEN;
output  [2:0] m_axi_A_BUS_AWSIZE;
output  [1:0] m_axi_A_BUS_AWBURST;
output  [1:0] m_axi_A_BUS_AWLOCK;
output  [3:0] m_axi_A_BUS_AWCACHE;
output  [2:0] m_axi_A_BUS_AWPROT;
output  [3:0] m_axi_A_BUS_AWQOS;
output  [3:0] m_axi_A_BUS_AWREGION;
output  [C_M_AXI_A_BUS_AWUSER_WIDTH - 1 : 0] m_axi_A_BUS_AWUSER;
output   m_axi_A_BUS_WVALID;
input   m_axi_A_BUS_WREADY;
output  [C_M_AXI_A_BUS_DATA_WIDTH - 1 : 0] m_axi_A_BUS_WDATA;
output  [C_M_AXI_A_BUS_WSTRB_WIDTH - 1 : 0] m_axi_A_BUS_WSTRB;
output   m_axi_A_BUS_WLAST;
output  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_WID;
output  [C_M_AXI_A_BUS_WUSER_WIDTH - 1 : 0] m_axi_A_BUS_WUSER;
output   m_axi_A_BUS_ARVALID;
input   m_axi_A_BUS_ARREADY;
output  [C_M_AXI_A_BUS_ADDR_WIDTH - 1 : 0] m_axi_A_BUS_ARADDR;
output  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_ARID;
output  [7:0] m_axi_A_BUS_ARLEN;
output  [2:0] m_axi_A_BUS_ARSIZE;
output  [1:0] m_axi_A_BUS_ARBURST;
output  [1:0] m_axi_A_BUS_ARLOCK;
output  [3:0] m_axi_A_BUS_ARCACHE;
output  [2:0] m_axi_A_BUS_ARPROT;
output  [3:0] m_axi_A_BUS_ARQOS;
output  [3:0] m_axi_A_BUS_ARREGION;
output  [C_M_AXI_A_BUS_ARUSER_WIDTH - 1 : 0] m_axi_A_BUS_ARUSER;
input   m_axi_A_BUS_RVALID;
output   m_axi_A_BUS_RREADY;
input  [C_M_AXI_A_BUS_DATA_WIDTH - 1 : 0] m_axi_A_BUS_RDATA;
input   m_axi_A_BUS_RLAST;
input  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_RID;
input  [C_M_AXI_A_BUS_RUSER_WIDTH - 1 : 0] m_axi_A_BUS_RUSER;
input  [1:0] m_axi_A_BUS_RRESP;
input   m_axi_A_BUS_BVALID;
output   m_axi_A_BUS_BREADY;
input  [1:0] m_axi_A_BUS_BRESP;
input  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_BID;
input  [C_M_AXI_A_BUS_BUSER_WIDTH - 1 : 0] m_axi_A_BUS_BUSER;
input   s_axi_CFG_AWVALID;
output   s_axi_CFG_AWREADY;
input  [C_S_AXI_CFG_ADDR_WIDTH - 1 : 0] s_axi_CFG_AWADDR;
input   s_axi_CFG_WVALID;
output   s_axi_CFG_WREADY;
input  [C_S_AXI_CFG_DATA_WIDTH - 1 : 0] s_axi_CFG_WDATA;
input  [C_S_AXI_CFG_WSTRB_WIDTH - 1 : 0] s_axi_CFG_WSTRB;
input   s_axi_CFG_ARVALID;
output   s_axi_CFG_ARREADY;
input  [C_S_AXI_CFG_ADDR_WIDTH - 1 : 0] s_axi_CFG_ARADDR;
output   s_axi_CFG_RVALID;
input   s_axi_CFG_RREADY;
output  [C_S_AXI_CFG_DATA_WIDTH - 1 : 0] s_axi_CFG_RDATA;
output  [1:0] s_axi_CFG_RRESP;
output   s_axi_CFG_BVALID;
input   s_axi_CFG_BREADY;
output  [1:0] s_axi_CFG_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] a;
reg    A_BUS_blk_n_AR;
wire   [0:0] ap_CS_fsm_state2;
reg    A_BUS_blk_n_R;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] ap_CS_fsm_state12;
wire   [0:0] ap_CS_fsm_state19;
wire   [0:0] ap_CS_fsm_state13;
wire   [0:0] ap_CS_fsm_state20;
wire   [0:0] ap_CS_fsm_state14;
wire   [0:0] ap_CS_fsm_state21;
wire   [0:0] ap_CS_fsm_state15;
wire   [0:0] ap_CS_fsm_state22;
wire   [0:0] ap_CS_fsm_state24;
wire   [0:0] ap_CS_fsm_state31;
wire   [0:0] ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] exitcond_flatten_reg_502;
wire   [0:0] ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    A_BUS_AWREADY;
wire    A_BUS_WREADY;
reg    A_BUS_ARVALID;
wire    A_BUS_ARREADY;
reg   [31:0] A_BUS_ARADDR;
wire    A_BUS_RVALID;
reg    A_BUS_RREADY;
wire   [63:0] A_BUS_RDATA;
wire    A_BUS_RLAST;
wire   [0:0] A_BUS_RID;
wire   [0:0] A_BUS_RUSER;
wire   [1:0] A_BUS_RRESP;
wire    A_BUS_BVALID;
wire   [1:0] A_BUS_BRESP;
wire   [0:0] A_BUS_BID;
wire   [0:0] A_BUS_BUSER;
reg   [13:0] indvar_flatten_reg_169;
reg   [8:0] i2_reg_180;
reg   [15:0] reg_211;
reg   [28:0] a1_reg_411;
wire   [31:0] tmp_1_fu_225_p1;
reg   [31:0] tmp_1_reg_417;
reg    ap_sig_ioackin_A_BUS_ARREADY;
wire   [30:0] tmp_1_cast1_fu_235_p1;
reg   [30:0] tmp_1_cast1_reg_429;
wire   [0:0] ap_CS_fsm_state10;
wire  signed [24:0] skip_cum_offs_cast_fu_238_p1;
wire   [30:0] a2_sum_fu_271_p2;
reg   [30:0] a2_sum_reg_449;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] exitcond3_fu_256_p2;
wire   [30:0] a2_sum3_fu_276_p2;
reg   [30:0] a2_sum3_reg_454;
wire   [8:0] i_1_fu_281_p2;
reg   [8:0] i_1_reg_459;
wire   [30:0] a2_sum4_fu_287_p2;
reg   [30:0] a2_sum4_reg_464;
reg   [31:0] A_BUS_addr_2_reg_469;
reg   [31:0] A_BUS_addr_3_reg_475;
wire   [15:0] grp_fu_201_p4;
reg   [15:0] a_offs_load_new_reg_481;
wire   [24:0] cum_offs_3_fu_315_p2;
reg   [24:0] cum_offs_3_reg_486;
wire   [24:0] skip_cum_offs_3_1_fu_325_p2;
wire   [0:0] ap_CS_fsm_state23;
wire   [0:0] exitcond_flatten_fu_341_p2;
wire   [13:0] indvar_flatten_next_fu_347_p2;
reg   [13:0] indvar_flatten_next_reg_506;
reg   [8:0] buff_addr_2_reg_511;
reg   [8:0] ap_pipeline_reg_pp0_iter1_buff_addr_2_reg_511;
wire   [8:0] i_2_fu_372_p2;
reg   [8:0] i_2_reg_517;
wire   [31:0] buff_q0;
reg   [31:0] buff_load_reg_522;
wire   [31:0] a2_sum5_fu_378_p2;
reg   [31:0] a2_sum5_reg_527;
wire   [0:0] ap_CS_fsm_pp0_stage7;
reg   [8:0] buff_address0;
reg    buff_ce0;
reg    buff_we0;
wire   [31:0] buff_d0;
reg   [8:0] buff_address1;
reg    buff_ce1;
reg    buff_we1;
reg   [31:0] buff_d1;
reg   [8:0] i_reg_136;
reg   [24:0] skip_cum_offs1_reg_147;
reg   [24:0] cum_offs_reg_157;
reg   [13:0] indvar_flatten_phi_fu_173_p4;
reg   [8:0] i2_phi_fu_184_p4;
wire   [31:0] i_cast2_fu_242_p1;
wire   [31:0] i2_cast1_fu_367_p1;
wire  signed [31:0] a2_sum_cast_fu_292_p1;
wire  signed [31:0] a2_sum3_cast_fu_302_p1;
wire  signed [31:0] a2_sum4_cast_fu_331_p1;
wire   [31:0] a2_sum6_fu_399_p2;
reg    ap_reg_ioackin_A_BUS_ARREADY;
wire  signed [31:0] skip_cum_offs1_cast_fu_247_p1;
wire   [31:0] seq_skip_offs_fu_393_p2;
wire  signed [30:0] cum_offs_cast7_cast_fu_267_p1;
wire  signed [30:0] skip_cum_offs1_cast_s_fu_252_p1;
wire  signed [24:0] tmp_1_cast_fu_312_p1;
wire  signed [24:0] tmp_3_1_cast_fu_321_p1;
wire   [0:0] exitcond9_fu_353_p2;
wire   [8:0] i2_mid2_fu_359_p3;
wire  signed [31:0] tmp_6_fu_389_p1;
wire   [0:0] ap_CS_fsm_state49;
reg   [39:0] ap_NS_fsm;
reg    ap_condition_210;
reg    ap_condition_567;

// power-on initialization
initial begin
#0 ap_CS_fsm = 40'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_A_BUS_ARREADY = 1'b0;
end

LL_prefetch_CFG_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CFG_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CFG_DATA_WIDTH ))
LL_prefetch_CFG_s_axi_U(
    .AWVALID(s_axi_CFG_AWVALID),
    .AWREADY(s_axi_CFG_AWREADY),
    .AWADDR(s_axi_CFG_AWADDR),
    .WVALID(s_axi_CFG_WVALID),
    .WREADY(s_axi_CFG_WREADY),
    .WDATA(s_axi_CFG_WDATA),
    .WSTRB(s_axi_CFG_WSTRB),
    .ARVALID(s_axi_CFG_ARVALID),
    .ARREADY(s_axi_CFG_ARREADY),
    .ARADDR(s_axi_CFG_ARADDR),
    .RVALID(s_axi_CFG_RVALID),
    .RREADY(s_axi_CFG_RREADY),
    .RDATA(s_axi_CFG_RDATA),
    .RRESP(s_axi_CFG_RRESP),
    .BVALID(s_axi_CFG_BVALID),
    .BREADY(s_axi_CFG_BREADY),
    .BRESP(s_axi_CFG_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .a(a)
);

LL_prefetch_A_BUS_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_A_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_A_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_A_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_A_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_A_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_A_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_A_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_A_BUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_A_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_A_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_A_BUS_CACHE_VALUE ))
LL_prefetch_A_BUS_m_axi_U(
    .AWVALID(m_axi_A_BUS_AWVALID),
    .AWREADY(m_axi_A_BUS_AWREADY),
    .AWADDR(m_axi_A_BUS_AWADDR),
    .AWID(m_axi_A_BUS_AWID),
    .AWLEN(m_axi_A_BUS_AWLEN),
    .AWSIZE(m_axi_A_BUS_AWSIZE),
    .AWBURST(m_axi_A_BUS_AWBURST),
    .AWLOCK(m_axi_A_BUS_AWLOCK),
    .AWCACHE(m_axi_A_BUS_AWCACHE),
    .AWPROT(m_axi_A_BUS_AWPROT),
    .AWQOS(m_axi_A_BUS_AWQOS),
    .AWREGION(m_axi_A_BUS_AWREGION),
    .AWUSER(m_axi_A_BUS_AWUSER),
    .WVALID(m_axi_A_BUS_WVALID),
    .WREADY(m_axi_A_BUS_WREADY),
    .WDATA(m_axi_A_BUS_WDATA),
    .WSTRB(m_axi_A_BUS_WSTRB),
    .WLAST(m_axi_A_BUS_WLAST),
    .WID(m_axi_A_BUS_WID),
    .WUSER(m_axi_A_BUS_WUSER),
    .ARVALID(m_axi_A_BUS_ARVALID),
    .ARREADY(m_axi_A_BUS_ARREADY),
    .ARADDR(m_axi_A_BUS_ARADDR),
    .ARID(m_axi_A_BUS_ARID),
    .ARLEN(m_axi_A_BUS_ARLEN),
    .ARSIZE(m_axi_A_BUS_ARSIZE),
    .ARBURST(m_axi_A_BUS_ARBURST),
    .ARLOCK(m_axi_A_BUS_ARLOCK),
    .ARCACHE(m_axi_A_BUS_ARCACHE),
    .ARPROT(m_axi_A_BUS_ARPROT),
    .ARQOS(m_axi_A_BUS_ARQOS),
    .ARREGION(m_axi_A_BUS_ARREGION),
    .ARUSER(m_axi_A_BUS_ARUSER),
    .RVALID(m_axi_A_BUS_RVALID),
    .RREADY(m_axi_A_BUS_RREADY),
    .RDATA(m_axi_A_BUS_RDATA),
    .RLAST(m_axi_A_BUS_RLAST),
    .RID(m_axi_A_BUS_RID),
    .RUSER(m_axi_A_BUS_RUSER),
    .RRESP(m_axi_A_BUS_RRESP),
    .BVALID(m_axi_A_BUS_BVALID),
    .BREADY(m_axi_A_BUS_BREADY),
    .BRESP(m_axi_A_BUS_BRESP),
    .BID(m_axi_A_BUS_BID),
    .BUSER(m_axi_A_BUS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(A_BUS_ARVALID),
    .I_ARREADY(A_BUS_ARREADY),
    .I_ARADDR(A_BUS_ARADDR),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_1),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(A_BUS_RVALID),
    .I_RREADY(A_BUS_RREADY),
    .I_RDATA(A_BUS_RDATA),
    .I_RID(A_BUS_RID),
    .I_RUSER(A_BUS_RUSER),
    .I_RRESP(A_BUS_RRESP),
    .I_RLAST(A_BUS_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(A_BUS_AWREADY),
    .I_AWADDR(ap_const_lv32_0),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_0),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(1'b0),
    .I_WREADY(A_BUS_WREADY),
    .I_WDATA(ap_const_lv64_0),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(ap_const_lv8_0),
    .I_BVALID(A_BUS_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(A_BUS_BRESP),
    .I_BID(A_BUS_BID),
    .I_BUSER(A_BUS_BUSER)
);

LL_prefetch_buff #(
    .DataWidth( 32 ),
    .AddressRange( 500 ),
    .AddressWidth( 9 ))
buff_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buff_address0),
    .ce0(buff_ce0),
    .we0(buff_we0),
    .d0(buff_d0),
    .q0(buff_q0),
    .address1(buff_address1),
    .ce1(buff_ce1),
    .we1(buff_we1),
    .d1(buff_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b1 == ap_enable_reg_pp0_iter2) & (A_BUS_RVALID == 1'b0)) & ~(1'b0 == exitcond_flatten_fu_341_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state31) & ~(A_BUS_RVALID == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((exitcond_flatten_reg_502 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((1'b1 == ap_CS_fsm_state31) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & ~(exitcond_flatten_reg_502 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage7)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state31) & ~(A_BUS_RVALID == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_A_BUS_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state12) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state24) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state13) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state15) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_502 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_502 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (A_BUS_RVALID == 1'b0)) | ((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))))))) begin
            ap_reg_ioackin_A_BUS_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state2) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state13) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state14) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state15) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state24) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_502 == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b1 == A_BUS_ARREADY) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (A_BUS_RVALID == 1'b0))))) begin
            ap_reg_ioackin_A_BUS_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        cum_offs_reg_157 <= cum_offs_3_reg_486;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cum_offs_reg_157 <= ap_const_lv25_0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_502 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b1 == ap_enable_reg_pp0_iter2) & (A_BUS_RVALID == 1'b0)))) begin
        i2_reg_180 <= i_2_reg_517;
    end else if (((1'b1 == ap_CS_fsm_state31) & ~(A_BUS_RVALID == 1'b0))) begin
        i2_reg_180 <= ap_const_lv9_19;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_reg_136 <= i_1_reg_459;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_reg_136 <= ap_const_lv9_1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_502 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b1 == ap_enable_reg_pp0_iter2) & (A_BUS_RVALID == 1'b0)))) begin
        indvar_flatten_reg_169 <= indvar_flatten_next_reg_506;
    end else if (((1'b1 == ap_CS_fsm_state31) & ~(A_BUS_RVALID == 1'b0))) begin
        indvar_flatten_reg_169 <= ap_const_lv14_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        skip_cum_offs1_reg_147 <= skip_cum_offs_3_1_fu_325_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        skip_cum_offs1_reg_147 <= skip_cum_offs_cast_fu_238_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
        A_BUS_addr_2_reg_469 <= a2_sum_cast_fu_292_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
        A_BUS_addr_3_reg_475 <= a2_sum3_cast_fu_302_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        a1_reg_411 <= {{a[ap_const_lv32_1F : ap_const_lv32_3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'b0 == exitcond3_fu_256_p2))) begin
        a2_sum3_reg_454 <= a2_sum3_fu_276_p2;
        a2_sum_reg_449 <= a2_sum_fu_271_p2;
        i_1_reg_459 <= i_1_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~(1'b0 == exitcond3_fu_256_p2))) begin
        a2_sum4_reg_464 <= a2_sum4_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_502 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (A_BUS_RVALID == 1'b0)) | ((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))))) begin
        a2_sum5_reg_527 <= a2_sum5_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & ~(A_BUS_RVALID == 1'b0))) begin
        a_offs_load_new_reg_481 <= {{A_BUS_RDATA[ap_const_lv32_2F : ap_const_lv32_20]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b1 == ap_enable_reg_pp0_iter2) & (A_BUS_RVALID == 1'b0)))) begin
        ap_pipeline_reg_pp0_iter1_buff_addr_2_reg_511 <= buff_addr_2_reg_511;
        ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502 <= exitcond_flatten_reg_502;
        exitcond_flatten_reg_502 <= exitcond_flatten_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b1 == ap_enable_reg_pp0_iter2) & (A_BUS_RVALID == 1'b0)) & (1'b0 == exitcond_flatten_fu_341_p2))) begin
        buff_addr_2_reg_511 <= i2_cast1_fu_367_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_502 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (A_BUS_RVALID == 1'b0)) | ((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))))) begin
        buff_load_reg_522 <= buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & ~(A_BUS_RVALID == 1'b0))) begin
        cum_offs_3_reg_486 <= cum_offs_3_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b1 == ap_enable_reg_pp0_iter2) & (A_BUS_RVALID == 1'b0)) & (1'b0 == exitcond_flatten_fu_341_p2))) begin
        i_2_reg_517 <= i_2_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b1 == ap_enable_reg_pp0_iter2) & (A_BUS_RVALID == 1'b0)))) begin
        indvar_flatten_next_reg_506 <= indvar_flatten_next_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state9) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state22) & ~(A_BUS_RVALID == 1'b0)))) begin
        reg_211 <= {{A_BUS_RDATA[ap_const_lv32_3F : ap_const_lv32_30]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_1_cast1_reg_429[28 : 0] <= tmp_1_cast1_fu_235_p1[28 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
        tmp_1_reg_417[28 : 0] <= tmp_1_fu_225_p1[28 : 0];
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) begin
        if ((ap_condition_567 == 1'b1)) begin
            A_BUS_ARADDR = a2_sum6_fu_399_p2;
        end else if ((ap_condition_210 == 1'b1)) begin
            A_BUS_ARADDR = a2_sum5_reg_527;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            A_BUS_ARADDR = a2_sum4_cast_fu_331_p1;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            A_BUS_ARADDR = A_BUS_addr_3_reg_475;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            A_BUS_ARADDR = a2_sum3_cast_fu_302_p1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            A_BUS_ARADDR = A_BUS_addr_2_reg_469;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            A_BUS_ARADDR = a2_sum_cast_fu_292_p1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            A_BUS_ARADDR = tmp_1_fu_225_p1;
        end else begin
            A_BUS_ARADDR = 'bx;
        end
    end else begin
        A_BUS_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state13) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state14) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state15) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state24) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_502 == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (A_BUS_RVALID == 1'b0))))) begin
        A_BUS_ARVALID = 1'b1;
    end else begin
        A_BUS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state22) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state20) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state21) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state31) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (A_BUS_RVALID == 1'b0)) | ((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))))) | ((1'b1 == ap_CS_fsm_state19) & ~(A_BUS_RVALID == 1'b0)) | ((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter2) & ~((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b1 == ap_enable_reg_pp0_iter2) & (A_BUS_RVALID == 1'b0))))) begin
        A_BUS_RREADY = 1'b1;
    end else begin
        A_BUS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state24) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_502 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502)))) begin
        A_BUS_blk_n_AR = m_axi_A_BUS_ARREADY;
    end else begin
        A_BUS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state31) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502)) | ((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
        A_BUS_blk_n_R = m_axi_A_BUS_RVALID;
    end else begin
        A_BUS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) begin
        ap_sig_ioackin_A_BUS_ARREADY = A_BUS_ARREADY;
    end else begin
        ap_sig_ioackin_A_BUS_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buff_address0 = i2_cast1_fu_367_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buff_address0 = ap_const_lv32_0;
    end else begin
        buff_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        buff_address1 = ap_pipeline_reg_pp0_iter1_buff_addr_2_reg_511;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buff_address1 = i_cast2_fu_242_p1;
    end else begin
        buff_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b1 == ap_enable_reg_pp0_iter2) & (A_BUS_RVALID == 1'b0))))) begin
        buff_ce0 = 1'b1;
    end else begin
        buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (A_BUS_RVALID == 1'b0)) | ((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))))))) begin
        buff_ce1 = 1'b1;
    end else begin
        buff_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        buff_d1 = seq_skip_offs_fu_393_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buff_d1 = skip_cum_offs1_cast_fu_247_p1;
    end else begin
        buff_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'b0 == exitcond3_fu_256_p2))) begin
        buff_we0 = 1'b1;
    end else begin
        buff_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (1'b0 == exitcond3_fu_256_p2)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (A_BUS_RVALID == 1'b0)) | ((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))))))) begin
        buff_we1 = 1'b1;
    end else begin
        buff_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_502 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i2_phi_fu_184_p4 = i_2_reg_517;
    end else begin
        i2_phi_fu_184_p4 = i2_reg_180;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_502 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_phi_fu_173_p4 = indvar_flatten_next_reg_506;
    end else begin
        indvar_flatten_phi_fu_173_p4 = indvar_flatten_reg_169;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (~(1'b0 == exitcond3_fu_256_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state24 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b1 == ap_enable_reg_pp0_iter2) & (A_BUS_RVALID == 1'b0)) & ~((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter2) & ~((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b1 == ap_enable_reg_pp0_iter2) & (A_BUS_RVALID == 1'b0)) & ~(1'b1 == ap_enable_reg_pp0_iter1)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b1 == ap_enable_reg_pp0_iter2) & (A_BUS_RVALID == 1'b0)) & ~(1'b0 == exitcond_flatten_fu_341_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter2) & ~((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b1 == ap_enable_reg_pp0_iter2) & (A_BUS_RVALID == 1'b0)) & ~(1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b1 == ap_enable_reg_pp0_iter2) & (A_BUS_RVALID == 1'b0)) & ~(1'b0 == exitcond_flatten_fu_341_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (A_BUS_RVALID == 1'b0)) | ((1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_502 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage4;
        end
        ap_ST_fsm_pp0_stage4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage5;
        end
        ap_ST_fsm_pp0_stage5 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage6;
        end
        ap_ST_fsm_pp0_stage6 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage7;
        end
        ap_ST_fsm_pp0_stage7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a2_sum3_cast_fu_302_p1 = $signed(a2_sum3_reg_454);

assign a2_sum3_fu_276_p2 = ($signed(skip_cum_offs1_cast_s_fu_252_p1) + $signed(tmp_1_cast1_reg_429));

assign a2_sum4_cast_fu_331_p1 = $signed(a2_sum4_reg_464);

assign a2_sum4_fu_287_p2 = ($signed(tmp_1_cast1_reg_429) + $signed(skip_cum_offs1_cast_s_fu_252_p1));

assign a2_sum5_fu_378_p2 = (tmp_1_reg_417 + buff_q0);

assign a2_sum6_fu_399_p2 = (tmp_1_reg_417 + seq_skip_offs_fu_393_p2);

assign a2_sum_cast_fu_292_p1 = $signed(a2_sum_reg_449);

assign a2_sum_fu_271_p2 = ($signed(cum_offs_cast7_cast_fu_267_p1) + $signed(tmp_1_cast1_reg_429));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1F];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[ap_const_lv32_20];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[ap_const_lv32_21];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[ap_const_lv32_26];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state22 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state23 = ap_CS_fsm[ap_const_lv32_16];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state31 = ap_CS_fsm[ap_const_lv32_1E];

assign ap_CS_fsm_state49 = ap_CS_fsm[ap_const_lv32_27];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

always @ (*) begin
    ap_condition_210 = ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_reg_502 == 1'b0));
end

always @ (*) begin
    ap_condition_567 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_502) & (A_BUS_RVALID == 1'b0)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign buff_d0 = $signed(cum_offs_reg_157);

assign cum_offs_3_fu_315_p2 = ($signed(cum_offs_reg_157) + $signed(tmp_1_cast_fu_312_p1));

assign cum_offs_cast7_cast_fu_267_p1 = $signed(cum_offs_reg_157);

assign exitcond3_fu_256_p2 = ((i_reg_136 == ap_const_lv9_1F4) ? 1'b1 : 1'b0);

assign exitcond9_fu_353_p2 = ((i2_phi_fu_184_p4 == ap_const_lv9_1F4) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_341_p2 = ((indvar_flatten_phi_fu_173_p4 == ap_const_lv14_2341) ? 1'b1 : 1'b0);

assign grp_fu_201_p4 = {{A_BUS_RDATA[ap_const_lv32_2F : ap_const_lv32_20]}};

assign i2_cast1_fu_367_p1 = i2_mid2_fu_359_p3;

assign i2_mid2_fu_359_p3 = ((exitcond9_fu_353_p2[0:0] === 1'b1) ? ap_const_lv9_19 : i2_phi_fu_184_p4);

assign i_1_fu_281_p2 = (i_reg_136 + ap_const_lv9_1);

assign i_2_fu_372_p2 = (i2_mid2_fu_359_p3 + ap_const_lv9_1);

assign i_cast2_fu_242_p1 = i_reg_136;

assign indvar_flatten_next_fu_347_p2 = (indvar_flatten_phi_fu_173_p4 + ap_const_lv14_1);

assign seq_skip_offs_fu_393_p2 = ($signed(buff_load_reg_522) + $signed(tmp_6_fu_389_p1));

assign skip_cum_offs1_cast_fu_247_p1 = $signed(skip_cum_offs1_reg_147);

assign skip_cum_offs1_cast_s_fu_252_p1 = $signed(skip_cum_offs1_reg_147);

assign skip_cum_offs_3_1_fu_325_p2 = ($signed(skip_cum_offs1_reg_147) + $signed(tmp_3_1_cast_fu_321_p1));

assign skip_cum_offs_cast_fu_238_p1 = $signed(reg_211);

assign tmp_1_cast1_fu_235_p1 = a1_reg_411;

assign tmp_1_cast_fu_312_p1 = $signed(a_offs_load_new_reg_481);

assign tmp_1_fu_225_p1 = a1_reg_411;

assign tmp_3_1_cast_fu_321_p1 = $signed(reg_211);

assign tmp_6_fu_389_p1 = $signed(grp_fu_201_p4);

always @ (posedge ap_clk) begin
    tmp_1_reg_417[31:29] <= 3'b000;
    tmp_1_cast1_reg_429[30:29] <= 2'b00;
end

endmodule //LL_prefetch
