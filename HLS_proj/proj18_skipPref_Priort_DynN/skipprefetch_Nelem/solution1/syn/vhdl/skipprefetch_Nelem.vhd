-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity skipprefetch_Nelem is
generic (
    C_M_AXI_A_BUS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_A_BUS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_A_BUS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_PREF_WINDOW_ID_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PREF_WINDOW_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CFG_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CFG_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_A_BUS_USER_VALUE : INTEGER := 0;
    C_M_AXI_A_BUS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_PREF_WINDOW_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_A_BUS_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_PREF_WINDOW_PROT_VALUE : INTEGER := 0;
    C_M_AXI_PREF_WINDOW_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_A_BUS_AWVALID : OUT STD_LOGIC;
    m_axi_A_BUS_AWREADY : IN STD_LOGIC;
    m_axi_A_BUS_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_A_BUS_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_A_BUS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_BUS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_BUS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_AWUSER_WIDTH-1 downto 0);
    m_axi_A_BUS_WVALID : OUT STD_LOGIC;
    m_axi_A_BUS_WREADY : IN STD_LOGIC;
    m_axi_A_BUS_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_DATA_WIDTH-1 downto 0);
    m_axi_A_BUS_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_DATA_WIDTH/8-1 downto 0);
    m_axi_A_BUS_WLAST : OUT STD_LOGIC;
    m_axi_A_BUS_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_WUSER_WIDTH-1 downto 0);
    m_axi_A_BUS_ARVALID : OUT STD_LOGIC;
    m_axi_A_BUS_ARREADY : IN STD_LOGIC;
    m_axi_A_BUS_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_A_BUS_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_A_BUS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_BUS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_BUS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ARUSER_WIDTH-1 downto 0);
    m_axi_A_BUS_RVALID : IN STD_LOGIC;
    m_axi_A_BUS_RREADY : OUT STD_LOGIC;
    m_axi_A_BUS_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_DATA_WIDTH-1 downto 0);
    m_axi_A_BUS_RLAST : IN STD_LOGIC;
    m_axi_A_BUS_RID : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_RUSER_WIDTH-1 downto 0);
    m_axi_A_BUS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_BVALID : IN STD_LOGIC;
    m_axi_A_BUS_BREADY : OUT STD_LOGIC;
    m_axi_A_BUS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_BID : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_BUSER_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_AWVALID : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_AWREADY : IN STD_LOGIC;
    m_axi_PREF_WINDOW_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ADDR_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ID_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_PREF_WINDOW_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_PREF_WINDOW_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_PREF_WINDOW_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_AWUSER_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_WVALID : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_WREADY : IN STD_LOGIC;
    m_axi_PREF_WINDOW_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_DATA_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_DATA_WIDTH/8-1 downto 0);
    m_axi_PREF_WINDOW_WLAST : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ID_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_WUSER_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_ARVALID : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_ARREADY : IN STD_LOGIC;
    m_axi_PREF_WINDOW_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ADDR_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ID_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_PREF_WINDOW_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_PREF_WINDOW_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_PREF_WINDOW_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ARUSER_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_RVALID : IN STD_LOGIC;
    m_axi_PREF_WINDOW_RREADY : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_DATA_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_RLAST : IN STD_LOGIC;
    m_axi_PREF_WINDOW_RID : IN STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ID_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_RUSER_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_BVALID : IN STD_LOGIC;
    m_axi_PREF_WINDOW_BREADY : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_BID : IN STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ID_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_BUSER_WIDTH-1 downto 0);
    s_axi_CFG_AWVALID : IN STD_LOGIC;
    s_axi_CFG_AWREADY : OUT STD_LOGIC;
    s_axi_CFG_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_ADDR_WIDTH-1 downto 0);
    s_axi_CFG_WVALID : IN STD_LOGIC;
    s_axi_CFG_WREADY : OUT STD_LOGIC;
    s_axi_CFG_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_DATA_WIDTH-1 downto 0);
    s_axi_CFG_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_DATA_WIDTH/8-1 downto 0);
    s_axi_CFG_ARVALID : IN STD_LOGIC;
    s_axi_CFG_ARREADY : OUT STD_LOGIC;
    s_axi_CFG_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_ADDR_WIDTH-1 downto 0);
    s_axi_CFG_RVALID : OUT STD_LOGIC;
    s_axi_CFG_RREADY : IN STD_LOGIC;
    s_axi_CFG_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CFG_DATA_WIDTH-1 downto 0);
    s_axi_CFG_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CFG_BVALID : OUT STD_LOGIC;
    s_axi_CFG_BREADY : IN STD_LOGIC;
    s_axi_CFG_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of skipprefetch_Nelem is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "skipprefetch_Nelem,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=13.900000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=40,HLS_SYN_DSP=7,HLS_SYN_FF=2402,HLS_SYN_LUT=3112}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (71 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (71 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (71 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (71 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (71 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (71 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (71 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (71 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (71 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (71 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (71 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (71 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (71 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv65_147AE147B : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101000111101011100001010001111011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv26_1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_const_lv31_31 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000110001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv25_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_const_lv27_C8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000011001000";
    constant ap_const_lv33_31 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000110001";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (71 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (31 downto 0);
    signal n : STD_LOGIC_VECTOR (31 downto 0);
    signal A_BUS_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal A_BUS_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal PREF_WINDOW_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal PREF_WINDOW_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal A_BUS_AWREADY : STD_LOGIC;
    signal A_BUS_WREADY : STD_LOGIC;
    signal A_BUS_ARVALID : STD_LOGIC;
    signal A_BUS_ARREADY : STD_LOGIC;
    signal A_BUS_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal A_BUS_RVALID : STD_LOGIC;
    signal A_BUS_RREADY : STD_LOGIC;
    signal A_BUS_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal A_BUS_RLAST : STD_LOGIC;
    signal A_BUS_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal A_BUS_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal A_BUS_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal A_BUS_BVALID : STD_LOGIC;
    signal A_BUS_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal A_BUS_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal A_BUS_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal PREF_WINDOW_AWREADY : STD_LOGIC;
    signal PREF_WINDOW_WREADY : STD_LOGIC;
    signal PREF_WINDOW_ARVALID : STD_LOGIC;
    signal PREF_WINDOW_ARREADY : STD_LOGIC;
    signal PREF_WINDOW_RVALID : STD_LOGIC;
    signal PREF_WINDOW_RREADY : STD_LOGIC;
    signal PREF_WINDOW_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal PREF_WINDOW_RLAST : STD_LOGIC;
    signal PREF_WINDOW_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal PREF_WINDOW_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal PREF_WINDOW_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal PREF_WINDOW_BVALID : STD_LOGIC;
    signal PREF_WINDOW_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal PREF_WINDOW_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal PREF_WINDOW_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_A_BUS_ARREADY : STD_LOGIC;
    signal n3_reg_830 : STD_LOGIC_VECTOR (29 downto 0);
    signal a1_reg_835 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_sig_ioackin_PREF_WINDOW_ARREADY : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_26_reg_857 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_420_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul6_reg_865 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_28_reg_870 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_32_reg_876 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_25_fu_454_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_881 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_29_fu_484_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_29_reg_887 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_35_fu_527_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_35_reg_892 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_36_fu_531_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_36_reg_897 : STD_LOGIC_VECTOR (24 downto 0);
    signal i_cast4_fu_535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast4_reg_906 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_548_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal i_1_reg_915 : STD_LOGIC_VECTOR (25 downto 0);
    signal a2_sum1_fu_554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a2_sum1_reg_920 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_562_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal bound_reg_925 : STD_LOGIC_VECTOR (30 downto 0);
    signal A_BUS_addr_reg_930 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_346_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_reg_936 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_reg_941 : STD_LOGIC_VECTOR (15 downto 0);
    signal cum_offs_1_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal indvar_flatten_next_fu_617_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_next_reg_954 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal buff_addr_1_reg_959 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_flatten_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_636_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_4_reg_964 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_2_fu_653_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal i_2_reg_969 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal exitcond2_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal j_fu_666_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_979 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_3_fu_679_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal i_3_reg_984 : STD_LOGIC_VECTOR (26 downto 0);
    signal buff_addr_2_reg_997 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_4_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_698_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal i_5_reg_1002 : STD_LOGIC_VECTOR (24 downto 0);
    signal exitcond1_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal j_1_fu_721_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_1011 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_37_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_1016 : STD_LOGIC_VECTOR (0 downto 0);
    signal buff_addr_3_reg_1024 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal tmp_8_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_746_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal i_6_reg_1029 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal grp_fu_778_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal bound5_reg_1039 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal indvar_flatten_next8_fu_789_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal indvar_flatten_next8_reg_1047 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal buff_addr_4_reg_1052 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_flatten9_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_fu_813_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal i_7_reg_1057 : STD_LOGIC_VECTOR (26 downto 0);
    signal buff_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal buff_ce0 : STD_LOGIC;
    signal buff_we0 : STD_LOGIC;
    signal buff_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_241 : STD_LOGIC_VECTOR (25 downto 0);
    signal cum_offs_reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_264 : STD_LOGIC_VECTOR (30 downto 0);
    signal i1_reg_275 : STD_LOGIC_VECTOR (23 downto 0);
    signal j2_reg_286 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal i3_reg_297 : STD_LOGIC_VECTOR (24 downto 0);
    signal j4_reg_306 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal i5_reg_317 : STD_LOGIC_VECTOR (25 downto 0);
    signal indvar_flatten7_reg_326 : STD_LOGIC_VECTOR (32 downto 0);
    signal i7_reg_337 : STD_LOGIC_VECTOR (26 downto 0);
    signal i1_cast3_fu_631_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i3_cast2_fu_693_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i5_cast1_fu_741_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i7_cast_fu_808_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_PREF_WINDOW_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_A_BUS_ARREADY : STD_LOGIC := '0';
    signal sz_fu_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_646_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_756_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_823_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_420_p0 : STD_LOGIC_VECTOR (33 downto 0);
    signal neg_mul7_fu_457_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_27_fu_462_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_v_v_fu_472_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal neg_ti1_fu_478_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_30_fu_490_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_31_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_507_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_ti_fu_514_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_9_fu_520_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_539_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal bound_fu_562_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_1_fu_574_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_cast_fu_603_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_7_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_mid2_fu_623_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_fu_642_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_672_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal i3_cast_fu_684_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_5_fu_704_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i5_cast_fu_732_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_10_fu_752_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax_fu_763_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_38_fu_769_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_778_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_778_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_39_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i7_mid2_fu_801_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_13_fu_819_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (71 downto 0);
    signal bound_fu_562_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_778_p00 : STD_LOGIC_VECTOR (32 downto 0);

    component skipprefetch_Nelecud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (33 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component skipprefetch_NeledEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (26 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component skipprefetch_Nelebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component skipprefetch_Nelem_CFG_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        a : OUT STD_LOGIC_VECTOR (31 downto 0);
        n : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component skipprefetch_Nelem_A_BUS_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component skipprefetch_Nelem_PREF_WINDOW_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    skipprefetch_Nelem_CFG_s_axi_U : component skipprefetch_Nelem_CFG_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CFG_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CFG_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CFG_AWVALID,
        AWREADY => s_axi_CFG_AWREADY,
        AWADDR => s_axi_CFG_AWADDR,
        WVALID => s_axi_CFG_WVALID,
        WREADY => s_axi_CFG_WREADY,
        WDATA => s_axi_CFG_WDATA,
        WSTRB => s_axi_CFG_WSTRB,
        ARVALID => s_axi_CFG_ARVALID,
        ARREADY => s_axi_CFG_ARREADY,
        ARADDR => s_axi_CFG_ARADDR,
        RVALID => s_axi_CFG_RVALID,
        RREADY => s_axi_CFG_RREADY,
        RDATA => s_axi_CFG_RDATA,
        RRESP => s_axi_CFG_RRESP,
        BVALID => s_axi_CFG_BVALID,
        BREADY => s_axi_CFG_BREADY,
        BRESP => s_axi_CFG_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        a => a,
        n => n);

    skipprefetch_Nelem_A_BUS_m_axi_U : component skipprefetch_Nelem_A_BUS_m_axi
    generic map (
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_A_BUS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_A_BUS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_A_BUS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_A_BUS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_A_BUS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_A_BUS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_A_BUS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_A_BUS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_A_BUS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_A_BUS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_A_BUS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_A_BUS_AWVALID,
        AWREADY => m_axi_A_BUS_AWREADY,
        AWADDR => m_axi_A_BUS_AWADDR,
        AWID => m_axi_A_BUS_AWID,
        AWLEN => m_axi_A_BUS_AWLEN,
        AWSIZE => m_axi_A_BUS_AWSIZE,
        AWBURST => m_axi_A_BUS_AWBURST,
        AWLOCK => m_axi_A_BUS_AWLOCK,
        AWCACHE => m_axi_A_BUS_AWCACHE,
        AWPROT => m_axi_A_BUS_AWPROT,
        AWQOS => m_axi_A_BUS_AWQOS,
        AWREGION => m_axi_A_BUS_AWREGION,
        AWUSER => m_axi_A_BUS_AWUSER,
        WVALID => m_axi_A_BUS_WVALID,
        WREADY => m_axi_A_BUS_WREADY,
        WDATA => m_axi_A_BUS_WDATA,
        WSTRB => m_axi_A_BUS_WSTRB,
        WLAST => m_axi_A_BUS_WLAST,
        WID => m_axi_A_BUS_WID,
        WUSER => m_axi_A_BUS_WUSER,
        ARVALID => m_axi_A_BUS_ARVALID,
        ARREADY => m_axi_A_BUS_ARREADY,
        ARADDR => m_axi_A_BUS_ARADDR,
        ARID => m_axi_A_BUS_ARID,
        ARLEN => m_axi_A_BUS_ARLEN,
        ARSIZE => m_axi_A_BUS_ARSIZE,
        ARBURST => m_axi_A_BUS_ARBURST,
        ARLOCK => m_axi_A_BUS_ARLOCK,
        ARCACHE => m_axi_A_BUS_ARCACHE,
        ARPROT => m_axi_A_BUS_ARPROT,
        ARQOS => m_axi_A_BUS_ARQOS,
        ARREGION => m_axi_A_BUS_ARREGION,
        ARUSER => m_axi_A_BUS_ARUSER,
        RVALID => m_axi_A_BUS_RVALID,
        RREADY => m_axi_A_BUS_RREADY,
        RDATA => m_axi_A_BUS_RDATA,
        RLAST => m_axi_A_BUS_RLAST,
        RID => m_axi_A_BUS_RID,
        RUSER => m_axi_A_BUS_RUSER,
        RRESP => m_axi_A_BUS_RRESP,
        BVALID => m_axi_A_BUS_BVALID,
        BREADY => m_axi_A_BUS_BREADY,
        BRESP => m_axi_A_BUS_BRESP,
        BID => m_axi_A_BUS_BID,
        BUSER => m_axi_A_BUS_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => A_BUS_ARVALID,
        I_ARREADY => A_BUS_ARREADY,
        I_ARADDR => A_BUS_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => A_BUS_RVALID,
        I_RREADY => A_BUS_RREADY,
        I_RDATA => A_BUS_RDATA,
        I_RID => A_BUS_RID,
        I_RUSER => A_BUS_RUSER,
        I_RRESP => A_BUS_RRESP,
        I_RLAST => A_BUS_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => A_BUS_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => A_BUS_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => A_BUS_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => A_BUS_BRESP,
        I_BID => A_BUS_BID,
        I_BUSER => A_BUS_BUSER);

    skipprefetch_Nelem_PREF_WINDOW_m_axi_U : component skipprefetch_Nelem_PREF_WINDOW_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_PREF_WINDOW_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_PREF_WINDOW_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_PREF_WINDOW_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_PREF_WINDOW_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_PREF_WINDOW_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_PREF_WINDOW_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_PREF_WINDOW_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_PREF_WINDOW_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_PREF_WINDOW_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_PREF_WINDOW_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_PREF_WINDOW_CACHE_VALUE)
    port map (
        AWVALID => m_axi_PREF_WINDOW_AWVALID,
        AWREADY => m_axi_PREF_WINDOW_AWREADY,
        AWADDR => m_axi_PREF_WINDOW_AWADDR,
        AWID => m_axi_PREF_WINDOW_AWID,
        AWLEN => m_axi_PREF_WINDOW_AWLEN,
        AWSIZE => m_axi_PREF_WINDOW_AWSIZE,
        AWBURST => m_axi_PREF_WINDOW_AWBURST,
        AWLOCK => m_axi_PREF_WINDOW_AWLOCK,
        AWCACHE => m_axi_PREF_WINDOW_AWCACHE,
        AWPROT => m_axi_PREF_WINDOW_AWPROT,
        AWQOS => m_axi_PREF_WINDOW_AWQOS,
        AWREGION => m_axi_PREF_WINDOW_AWREGION,
        AWUSER => m_axi_PREF_WINDOW_AWUSER,
        WVALID => m_axi_PREF_WINDOW_WVALID,
        WREADY => m_axi_PREF_WINDOW_WREADY,
        WDATA => m_axi_PREF_WINDOW_WDATA,
        WSTRB => m_axi_PREF_WINDOW_WSTRB,
        WLAST => m_axi_PREF_WINDOW_WLAST,
        WID => m_axi_PREF_WINDOW_WID,
        WUSER => m_axi_PREF_WINDOW_WUSER,
        ARVALID => m_axi_PREF_WINDOW_ARVALID,
        ARREADY => m_axi_PREF_WINDOW_ARREADY,
        ARADDR => m_axi_PREF_WINDOW_ARADDR,
        ARID => m_axi_PREF_WINDOW_ARID,
        ARLEN => m_axi_PREF_WINDOW_ARLEN,
        ARSIZE => m_axi_PREF_WINDOW_ARSIZE,
        ARBURST => m_axi_PREF_WINDOW_ARBURST,
        ARLOCK => m_axi_PREF_WINDOW_ARLOCK,
        ARCACHE => m_axi_PREF_WINDOW_ARCACHE,
        ARPROT => m_axi_PREF_WINDOW_ARPROT,
        ARQOS => m_axi_PREF_WINDOW_ARQOS,
        ARREGION => m_axi_PREF_WINDOW_ARREGION,
        ARUSER => m_axi_PREF_WINDOW_ARUSER,
        RVALID => m_axi_PREF_WINDOW_RVALID,
        RREADY => m_axi_PREF_WINDOW_RREADY,
        RDATA => m_axi_PREF_WINDOW_RDATA,
        RLAST => m_axi_PREF_WINDOW_RLAST,
        RID => m_axi_PREF_WINDOW_RID,
        RUSER => m_axi_PREF_WINDOW_RUSER,
        RRESP => m_axi_PREF_WINDOW_RRESP,
        BVALID => m_axi_PREF_WINDOW_BVALID,
        BREADY => m_axi_PREF_WINDOW_BREADY,
        BRESP => m_axi_PREF_WINDOW_BRESP,
        BID => m_axi_PREF_WINDOW_BID,
        BUSER => m_axi_PREF_WINDOW_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => PREF_WINDOW_ARVALID,
        I_ARREADY => PREF_WINDOW_ARREADY,
        I_ARADDR => tmp_12_fu_398_p1,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => PREF_WINDOW_RVALID,
        I_RREADY => PREF_WINDOW_RREADY,
        I_RDATA => PREF_WINDOW_RDATA,
        I_RID => PREF_WINDOW_RID,
        I_RUSER => PREF_WINDOW_RUSER,
        I_RRESP => PREF_WINDOW_RRESP,
        I_RLAST => PREF_WINDOW_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => PREF_WINDOW_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => PREF_WINDOW_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => PREF_WINDOW_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => PREF_WINDOW_BRESP,
        I_BID => PREF_WINDOW_BID,
        I_BUSER => PREF_WINDOW_BUSER);

    buff_U : component skipprefetch_Nelebkb
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_address0,
        ce0 => buff_ce0,
        we0 => buff_we0,
        d0 => buff_d0,
        q0 => buff_q0);

    skipprefetch_Nelecud_U0 : component skipprefetch_Nelecud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 34,
        din1_WIDTH => 32,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_420_p0,
        din1 => sz_fu_162,
        ce => ap_const_logic_1,
        dout => grp_fu_420_p2);

    skipprefetch_NeledEe_U1 : component skipprefetch_NeledEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 27,
        din1_WIDTH => 7,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_778_p0,
        din1 => grp_fu_778_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_778_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_A_BUS_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_A_BUS_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_lv1_1 = ap_CS_fsm_state29) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state40) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state51) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state64) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state18) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state19) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))))) then 
                    ap_reg_ioackin_A_BUS_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state18) and (ap_const_logic_1 = A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state19) and (ap_const_logic_1 = A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state29) and (ap_const_logic_1 = A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state40) and (ap_const_logic_1 = A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state51) and (ap_const_logic_1 = A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state64) and (ap_const_logic_1 = A_BUS_ARREADY)))) then 
                    ap_reg_ioackin_A_BUS_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_PREF_WINDOW_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_PREF_WINDOW_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state2)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_PREF_WINDOW_ARREADY))) then 
                        ap_reg_ioackin_PREF_WINDOW_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = PREF_WINDOW_ARREADY)) then 
                        ap_reg_ioackin_PREF_WINDOW_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    cum_offs_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
                cum_offs_reg_252 <= cum_offs_1_fu_597_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                cum_offs_reg_252 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i1_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state36) and not((A_BUS_RVALID = ap_const_logic_0)))) then 
                i1_reg_275 <= i_4_reg_964;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state17) and (tmp_fu_543_p2 = ap_const_lv1_0))) then 
                i1_reg_275 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    i3_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state38) and (ap_const_lv1_0 = exitcond2_fu_660_p2))) then 
                i3_reg_297 <= tmp_36_reg_897;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state47) and not((A_BUS_RVALID = ap_const_logic_0)))) then 
                i3_reg_297 <= i_5_reg_1002;
            end if; 
        end if;
    end process;

    i5_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state49) and (ap_const_lv1_0 = exitcond1_fu_715_p2))) then 
                i5_reg_317 <= i_2_reg_969;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state58) and not((A_BUS_RVALID = ap_const_logic_0)))) then 
                i5_reg_317 <= i_6_reg_1029;
            end if; 
        end if;
    end process;

    i7_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state71) and not((A_BUS_RVALID = ap_const_logic_0)))) then 
                i7_reg_337 <= i_7_reg_1057;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state62))) then 
                i7_reg_337 <= i_3_reg_984;
            end if; 
        end if;
    end process;

    i_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
                i_reg_241 <= i_1_reg_915;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                i_reg_241 <= ap_const_lv26_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state71) and not((A_BUS_RVALID = ap_const_logic_0)))) then 
                indvar_flatten7_reg_326 <= indvar_flatten_next8_reg_1047;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state62))) then 
                indvar_flatten7_reg_326 <= ap_const_lv33_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state36) and not((A_BUS_RVALID = ap_const_logic_0)))) then 
                indvar_flatten_reg_264 <= indvar_flatten_next_reg_954;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state17) and (tmp_fu_543_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_264 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j2_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state48))) then 
                j2_reg_286 <= j_reg_979;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state37))) then 
                j2_reg_286 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j4_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state59))) then 
                j4_reg_306 <= j_1_reg_1011;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state38) and not((ap_const_lv1_0 = exitcond2_fu_660_p2)))) then 
                j4_reg_306 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state18) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)))) then
                A_BUS_addr_reg_930 <= a2_sum1_reg_920;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                a1_reg_835 <= a(31 downto 3);
                n3_reg_830 <= n(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17) and not((tmp_fu_543_p2 = ap_const_lv1_0)))) then
                a2_sum1_reg_920 <= a2_sum1_fu_554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state62))) then
                bound5_reg_1039 <= grp_fu_778_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17) and (tmp_fu_543_p2 = ap_const_lv1_0))) then
                bound_reg_925 <= bound_fu_562_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state28) and (ap_const_lv1_0 = exitcond_flatten_fu_612_p2))) then
                buff_addr_1_reg_959 <= i1_cast3_fu_631_p1(14 - 1 downto 0);
                i_4_reg_964 <= i_4_fu_636_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state39) and not((ap_const_lv1_0 = tmp_4_fu_688_p2)))) then
                buff_addr_2_reg_997 <= i3_cast2_fu_693_p1(14 - 1 downto 0);
                i_5_reg_1002 <= i_5_fu_698_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state50) and not((ap_const_lv1_0 = tmp_8_fu_736_p2)))) then
                buff_addr_3_reg_1024 <= i5_cast1_fu_741_p1(14 - 1 downto 0);
                i_6_reg_1029 <= i_6_fu_746_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state63) and (ap_const_lv1_0 = exitcond_flatten9_fu_784_p2))) then
                buff_addr_4_reg_1052 <= i7_cast_fu_808_p1(14 - 1 downto 0);
                i_7_reg_1057 <= i_7_fu_813_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then
                i_1_reg_915 <= i_1_fu_548_p2;
                    i_cast4_reg_906(25 downto 0) <= i_cast4_fu_535_p1(25 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state37))) then
                    i_2_reg_969(25 downto 1) <= i_2_fu_653_p3(25 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state38) and not((ap_const_lv1_0 = exitcond2_fu_660_p2)))) then
                i_3_reg_984 <= i_3_fu_679_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state63))) then
                indvar_flatten_next8_reg_1047 <= indvar_flatten_next8_fu_789_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state28))) then
                indvar_flatten_next_reg_954 <= indvar_flatten_next_fu_617_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state49))) then
                j_1_reg_1011 <= j_1_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state38))) then
                j_reg_979 <= j_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then
                mul6_reg_865 <= grp_fu_420_p2;
                tmp_28_reg_870 <= grp_fu_420_p2(64 downto 38);
                tmp_32_reg_876 <= grp_fu_420_p2(64 downto 40);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state29) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state40) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state51) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state64) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))))) then
                reg_368 <= buff_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((PREF_WINDOW_RVALID = ap_const_logic_0)))) then
                sz_fu_162 <= PREF_WINDOW_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25) and not((A_BUS_RVALID = ap_const_logic_0)))) then
                tmp_15_reg_936 <= A_BUS_RDATA(47 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26) and not((A_BUS_RVALID = ap_const_logic_0)))) then
                tmp_16_reg_941 <= A_BUS_RDATA(63 downto 48);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then
                    tmp_25_reg_881(28 downto 0) <= tmp_25_fu_454_p1(28 downto 0);
                tmp_29_reg_887 <= tmp_29_fu_484_p3;
                tmp_35_reg_892 <= tmp_35_fu_527_p1;
                tmp_36_reg_897 <= tmp_36_fu_531_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                tmp_26_reg_857 <= sz_fu_162(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state49) and not((ap_const_lv1_0 = exitcond1_fu_715_p2)))) then
                tmp_37_reg_1016 <= tmp_37_fu_727_p2;
            end if;
        end if;
    end process;
    tmp_25_reg_881(31 downto 29) <= "000";
    i_cast4_reg_906(31 downto 26) <= "000000";
    i_2_reg_969(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, A_BUS_RVALID, PREF_WINDOW_RVALID, ap_sig_ioackin_A_BUS_ARREADY, ap_sig_ioackin_PREF_WINDOW_ARREADY, tmp_fu_543_p2, exitcond_flatten_fu_612_p2, exitcond2_fu_660_p2, tmp_4_fu_688_p2, exitcond1_fu_715_p2, tmp_8_fu_736_p2, exitcond_flatten9_fu_784_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_PREF_WINDOW_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (not((PREF_WINDOW_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if ((tmp_fu_543_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (not((A_BUS_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (not((A_BUS_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state28 => 
                if ((ap_const_lv1_0 = exitcond_flatten_fu_612_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state29 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (not((A_BUS_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_660_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                if (not((ap_const_lv1_0 = tmp_4_fu_688_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state40 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (not((A_BUS_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state49 => 
                if ((ap_const_lv1_0 = exitcond1_fu_715_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state50 => 
                if (not((ap_const_lv1_0 = tmp_8_fu_736_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state51 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if (not((A_BUS_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                if ((ap_const_lv1_0 = exitcond_flatten9_fu_784_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state72;
                end if;
            when ap_ST_fsm_state64 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (not((A_BUS_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_BUS_ARADDR_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state40, ap_CS_fsm_state51, ap_CS_fsm_state64, a2_sum1_reg_920, A_BUS_addr_reg_930, grp_fu_356_p2, ap_reg_ioackin_A_BUS_ARREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state29) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state40) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state51) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state64) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)))) then 
            A_BUS_ARADDR <= grp_fu_356_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state19) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY))) then 
            A_BUS_ARADDR <= A_BUS_addr_reg_930;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state18) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY))) then 
            A_BUS_ARADDR <= a2_sum1_reg_920;
        else 
            A_BUS_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_BUS_ARVALID_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state40, ap_CS_fsm_state51, ap_CS_fsm_state64, ap_reg_ioackin_A_BUS_ARREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state18) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state19) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state29) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state40) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state51) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state64) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)))) then 
            A_BUS_ARVALID <= ap_const_logic_1;
        else 
            A_BUS_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    A_BUS_RREADY_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state36, ap_CS_fsm_state47, ap_CS_fsm_state58, ap_CS_fsm_state71, A_BUS_RVALID)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state25) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state26) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state36) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state47) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state58) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state71) and not((A_BUS_RVALID = ap_const_logic_0))))) then 
            A_BUS_RREADY <= ap_const_logic_1;
        else 
            A_BUS_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    A_BUS_blk_n_AR_assign_proc : process(m_axi_A_BUS_ARREADY, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state40, ap_CS_fsm_state51, ap_CS_fsm_state64)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_lv1_1 = ap_CS_fsm_state29)) or ((ap_const_lv1_1 = ap_CS_fsm_state40)) or ((ap_const_lv1_1 = ap_CS_fsm_state51)) or ((ap_const_lv1_1 = ap_CS_fsm_state64)))) then 
            A_BUS_blk_n_AR <= m_axi_A_BUS_ARREADY;
        else 
            A_BUS_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    A_BUS_blk_n_R_assign_proc : process(m_axi_A_BUS_RVALID, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state36, ap_CS_fsm_state47, ap_CS_fsm_state58, ap_CS_fsm_state71)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state25)) or ((ap_const_lv1_1 = ap_CS_fsm_state26)) or ((ap_const_lv1_1 = ap_CS_fsm_state36)) or ((ap_const_lv1_1 = ap_CS_fsm_state47)) or ((ap_const_lv1_1 = ap_CS_fsm_state58)) or ((ap_const_lv1_1 = ap_CS_fsm_state71)))) then 
            A_BUS_blk_n_R <= m_axi_A_BUS_RVALID;
        else 
            A_BUS_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    PREF_WINDOW_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_PREF_WINDOW_ARREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_reg_ioackin_PREF_WINDOW_ARREADY))) then 
            PREF_WINDOW_ARVALID <= ap_const_logic_1;
        else 
            PREF_WINDOW_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    PREF_WINDOW_RREADY_assign_proc : process(ap_CS_fsm_state9, PREF_WINDOW_RVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((PREF_WINDOW_RVALID = ap_const_logic_0)))) then 
            PREF_WINDOW_RREADY <= ap_const_logic_1;
        else 
            PREF_WINDOW_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    PREF_WINDOW_blk_n_AR_assign_proc : process(m_axi_PREF_WINDOW_ARREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            PREF_WINDOW_blk_n_AR <= m_axi_PREF_WINDOW_ARREADY;
        else 
            PREF_WINDOW_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    PREF_WINDOW_blk_n_R_assign_proc : process(m_axi_PREF_WINDOW_RVALID, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            PREF_WINDOW_blk_n_R <= m_axi_PREF_WINDOW_RVALID;
        else 
            PREF_WINDOW_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    a2_sum1_fu_554_p2 <= std_logic_vector(unsigned(tmp_25_reg_881) + unsigned(cum_offs_reg_252));
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state25 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27 downto 27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28 downto 28);
    ap_CS_fsm_state36 <= ap_CS_fsm(35 downto 35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36 downto 36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37 downto 37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38 downto 38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39 downto 39);
    ap_CS_fsm_state47 <= ap_CS_fsm(46 downto 46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47 downto 47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48 downto 48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49 downto 49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50 downto 50);
    ap_CS_fsm_state58 <= ap_CS_fsm(57 downto 57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58 downto 58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59 downto 59);
    ap_CS_fsm_state62 <= ap_CS_fsm(61 downto 61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62 downto 62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63 downto 63);
    ap_CS_fsm_state71 <= ap_CS_fsm(70 downto 70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71 downto 71);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_CS_fsm_state72)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state72))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state72)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state72))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_A_BUS_ARREADY_assign_proc : process(A_BUS_ARREADY, ap_reg_ioackin_A_BUS_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) then 
            ap_sig_ioackin_A_BUS_ARREADY <= A_BUS_ARREADY;
        else 
            ap_sig_ioackin_A_BUS_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_PREF_WINDOW_ARREADY_assign_proc : process(PREF_WINDOW_ARREADY, ap_reg_ioackin_PREF_WINDOW_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_PREF_WINDOW_ARREADY)) then 
            ap_sig_ioackin_PREF_WINDOW_ARREADY <= PREF_WINDOW_ARREADY;
        else 
            ap_sig_ioackin_PREF_WINDOW_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    bound_fu_562_p0 <= bound_fu_562_p00(25 - 1 downto 0);
    bound_fu_562_p00 <= std_logic_vector(resize(unsigned(tmp_36_reg_897),31));
    bound_fu_562_p2 <= std_logic_vector(resize(unsigned(bound_fu_562_p0) * unsigned(ap_const_lv31_31), 31));

    buff_address0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state36, ap_CS_fsm_state47, ap_CS_fsm_state58, ap_CS_fsm_state71, i_cast4_reg_906, ap_CS_fsm_state28, buff_addr_1_reg_959, buff_addr_2_reg_997, ap_CS_fsm_state39, buff_addr_3_reg_1024, ap_CS_fsm_state50, ap_CS_fsm_state63, buff_addr_4_reg_1052, i1_cast3_fu_631_p1, i3_cast2_fu_693_p1, i5_cast1_fu_741_p1, i7_cast_fu_808_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state71))) then 
            buff_address0 <= buff_addr_4_reg_1052;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state63))) then 
            buff_address0 <= i7_cast_fu_808_p1(14 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state58))) then 
            buff_address0 <= buff_addr_3_reg_1024;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state50))) then 
            buff_address0 <= i5_cast1_fu_741_p1(14 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state47))) then 
            buff_address0 <= buff_addr_2_reg_997;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state39))) then 
            buff_address0 <= i3_cast2_fu_693_p1(14 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state36))) then 
            buff_address0 <= buff_addr_1_reg_959;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state28))) then 
            buff_address0 <= i1_cast3_fu_631_p1(14 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
            buff_address0 <= i_cast4_reg_906(14 - 1 downto 0);
        else 
            buff_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    buff_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state36, ap_CS_fsm_state47, ap_CS_fsm_state58, ap_CS_fsm_state71, A_BUS_RVALID, ap_CS_fsm_state28, ap_CS_fsm_state39, ap_CS_fsm_state50, ap_CS_fsm_state63)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state26) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state28)) or ((ap_const_lv1_1 = ap_CS_fsm_state39)) or ((ap_const_lv1_1 = ap_CS_fsm_state50)) or ((ap_const_lv1_1 = ap_CS_fsm_state63)) or ((ap_const_lv1_1 = ap_CS_fsm_state36) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state47) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state58) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state71) and not((A_BUS_RVALID = ap_const_logic_0))))) then 
            buff_ce0 <= ap_const_logic_1;
        else 
            buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_d0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state36, ap_CS_fsm_state47, ap_CS_fsm_state58, ap_CS_fsm_state71, tmp_2_fu_577_p2, tmp_s_fu_646_p2, tmp_6_fu_708_p2, tmp_11_fu_756_p2, tmp_14_fu_823_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state71))) then 
            buff_d0 <= tmp_14_fu_823_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state58))) then 
            buff_d0 <= tmp_11_fu_756_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state47))) then 
            buff_d0 <= tmp_6_fu_708_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state36))) then 
            buff_d0 <= tmp_s_fu_646_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
            buff_d0 <= tmp_2_fu_577_p2;
        else 
            buff_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buff_we0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state36, ap_CS_fsm_state47, ap_CS_fsm_state58, ap_CS_fsm_state71, A_BUS_RVALID)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state26) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state36) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state47) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state58) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state71) and not((A_BUS_RVALID = ap_const_logic_0))))) then 
            buff_we0 <= ap_const_logic_1;
        else 
            buff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cum_offs_1_fu_597_p2 <= std_logic_vector(signed(tmp_3_fu_594_p1) + signed(cum_offs_reg_252));
    exitcond1_fu_715_p2 <= "1" when (j4_reg_306 = ap_const_lv6_31) else "0";
    exitcond2_fu_660_p2 <= "1" when (j2_reg_286 = ap_const_lv6_31) else "0";
    exitcond_flatten9_fu_784_p2 <= "1" when (indvar_flatten7_reg_326 = bound5_reg_1039) else "0";
    exitcond_flatten_fu_612_p2 <= "1" when (indvar_flatten_reg_264 = bound_reg_925) else "0";
    grp_fu_346_p4 <= A_BUS_RDATA(47 downto 32);
    grp_fu_356_p2 <= std_logic_vector(unsigned(tmp_25_reg_881) + unsigned(buff_q0));
    grp_fu_420_p0 <= ap_const_lv65_147AE147B(34 - 1 downto 0);
    grp_fu_778_p0 <= grp_fu_778_p00(27 - 1 downto 0);
    grp_fu_778_p00 <= std_logic_vector(resize(unsigned(tmp_38_fu_769_p2),33));
    grp_fu_778_p1 <= ap_const_lv33_31(7 - 1 downto 0);
    i1_cast3_fu_631_p1 <= std_logic_vector(resize(unsigned(i1_mid2_fu_623_p3),32));
    i1_cast_fu_603_p1 <= std_logic_vector(resize(unsigned(i1_reg_275),25));
    i1_mid2_fu_623_p3 <= 
        i1_reg_275 when (tmp_7_fu_607_p2(0) = '1') else 
        ap_const_lv24_0;
        i3_cast2_fu_693_p1 <= std_logic_vector(resize(signed(i3_reg_297),32));

        i3_cast_fu_684_p1 <= std_logic_vector(resize(signed(i3_reg_297),26));

        i5_cast1_fu_741_p1 <= std_logic_vector(resize(signed(i5_reg_317),32));

        i5_cast_fu_732_p1 <= std_logic_vector(resize(signed(i5_reg_317),27));

        i7_cast_fu_808_p1 <= std_logic_vector(resize(signed(i7_mid2_fu_801_p3),32));

    i7_mid2_fu_801_p3 <= 
        i7_reg_337 when (tmp_39_fu_795_p2(0) = '1') else 
        i_3_reg_984;
    i_1_fu_548_p2 <= std_logic_vector(unsigned(i_reg_241) + unsigned(ap_const_lv26_1));
    i_2_fu_653_p3 <= (tmp_36_reg_897 & ap_const_lv1_0);
    i_3_fu_679_p2 <= std_logic_vector(unsigned(p_shl_fu_672_p3) - unsigned(tmp_35_reg_892));
    i_4_fu_636_p2 <= std_logic_vector(unsigned(i1_mid2_fu_623_p3) + unsigned(ap_const_lv24_1));
    i_5_fu_698_p2 <= std_logic_vector(unsigned(i3_reg_297) + unsigned(ap_const_lv25_1));
    i_6_fu_746_p2 <= std_logic_vector(unsigned(i5_reg_317) + unsigned(ap_const_lv26_1));
    i_7_fu_813_p2 <= std_logic_vector(unsigned(i7_mid2_fu_801_p3) + unsigned(ap_const_lv27_1));
    i_9_fu_520_p3 <= 
        neg_ti_fu_514_p2 when (tmp_26_reg_857(0) = '1') else 
        tmp_33_fu_504_p1;
    i_cast4_fu_535_p1 <= std_logic_vector(resize(unsigned(i_reg_241),32));
    i_cast_fu_539_p1 <= std_logic_vector(resize(unsigned(i_reg_241),27));
    indvar_flatten_next8_fu_789_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_326) + unsigned(ap_const_lv33_1));
    indvar_flatten_next_fu_617_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_264) + unsigned(ap_const_lv31_1));
    j_1_fu_721_p2 <= std_logic_vector(unsigned(j4_reg_306) + unsigned(ap_const_lv6_1));
    j_fu_666_p2 <= std_logic_vector(unsigned(j2_reg_286) + unsigned(ap_const_lv6_1));
    neg_mul7_fu_457_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul6_reg_865));
    neg_ti1_fu_478_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(p_v_v_fu_472_p3));
    neg_ti_fu_514_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_34_fu_507_p3));
    p_shl_fu_672_p3 <= (tmp_36_reg_897 & ap_const_lv2_0);
    p_v_v_fu_472_p3 <= 
        tmp_27_fu_462_p4 when (tmp_26_reg_857(0) = '1') else 
        tmp_28_reg_870;
    smax_fu_763_p3 <= 
        i_3_reg_984 when (tmp_37_reg_1016(0) = '1') else 
        ap_const_lv27_C8;
        tmp_10_fu_752_p1 <= std_logic_vector(resize(signed(grp_fu_346_p4),32));

    tmp_11_fu_756_p2 <= std_logic_vector(unsigned(reg_368) + unsigned(tmp_10_fu_752_p1));
    tmp_12_fu_398_p1 <= std_logic_vector(resize(unsigned(n3_reg_830),32));
        tmp_13_fu_819_p1 <= std_logic_vector(resize(signed(grp_fu_346_p4),32));

    tmp_14_fu_823_p2 <= std_logic_vector(unsigned(reg_368) + unsigned(tmp_13_fu_819_p1));
        tmp_1_fu_574_p1 <= std_logic_vector(resize(signed(tmp_15_reg_936),32));

    tmp_25_fu_454_p1 <= std_logic_vector(resize(unsigned(a1_reg_835),32));
    tmp_27_fu_462_p4 <= neg_mul7_fu_457_p2(64 downto 38);
    tmp_29_fu_484_p3 <= 
        neg_ti1_fu_478_p2 when (tmp_26_reg_857(0) = '1') else 
        tmp_28_reg_870;
    tmp_2_fu_577_p2 <= std_logic_vector(unsigned(cum_offs_reg_252) + unsigned(tmp_1_fu_574_p1));
    tmp_30_fu_490_p4 <= neg_mul7_fu_457_p2(64 downto 40);
        tmp_31_fu_500_p1 <= std_logic_vector(resize(signed(tmp_30_fu_490_p4),32));

        tmp_33_fu_504_p1 <= std_logic_vector(resize(signed(tmp_32_reg_876),32));

    tmp_34_fu_507_p3 <= 
        tmp_31_fu_500_p1 when (tmp_26_reg_857(0) = '1') else 
        tmp_33_fu_504_p1;
    tmp_35_fu_527_p1 <= i_9_fu_520_p3(27 - 1 downto 0);
    tmp_36_fu_531_p1 <= i_9_fu_520_p3(25 - 1 downto 0);
    tmp_37_fu_727_p2 <= "1" when (signed(i_3_reg_984) > signed(ap_const_lv27_C8)) else "0";
    tmp_38_fu_769_p2 <= std_logic_vector(unsigned(smax_fu_763_p3) - unsigned(i_3_reg_984));
    tmp_39_fu_795_p2 <= "1" when (signed(i7_reg_337) < signed(ap_const_lv27_C8)) else "0";
        tmp_3_fu_594_p1 <= std_logic_vector(resize(signed(tmp_16_reg_941),32));

    tmp_4_fu_688_p2 <= "1" when (signed(i3_cast_fu_684_p1) < signed(i_2_reg_969)) else "0";
        tmp_5_fu_704_p1 <= std_logic_vector(resize(signed(grp_fu_346_p4),32));

    tmp_6_fu_708_p2 <= std_logic_vector(unsigned(reg_368) + unsigned(tmp_5_fu_704_p1));
    tmp_7_fu_607_p2 <= "1" when (signed(i1_cast_fu_603_p1) < signed(tmp_36_reg_897)) else "0";
    tmp_8_fu_736_p2 <= "1" when (signed(i5_cast_fu_732_p1) < signed(i_3_reg_984)) else "0";
        tmp_9_fu_642_p1 <= std_logic_vector(resize(signed(grp_fu_346_p4),32));

    tmp_fu_543_p2 <= "1" when (signed(i_cast_fu_539_p1) < signed(tmp_29_reg_887)) else "0";
    tmp_s_fu_646_p2 <= std_logic_vector(unsigned(reg_368) + unsigned(tmp_9_fu_642_p1));
end behav;
