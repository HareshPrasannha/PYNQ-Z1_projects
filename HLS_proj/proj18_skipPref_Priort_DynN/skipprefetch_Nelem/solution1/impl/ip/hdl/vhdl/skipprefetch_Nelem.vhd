-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity skipprefetch_Nelem is
generic (
    C_M_AXI_A_BUS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_A_BUS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_A_BUS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_PREF_WINDOW_ID_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PREF_WINDOW_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CFG_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CFG_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PREF_WINDOW_PROT_VALUE : INTEGER := 0;
    C_M_AXI_A_BUS_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_PREF_WINDOW_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_A_BUS_USER_VALUE : INTEGER := 0;
    C_M_AXI_A_BUS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_PREF_WINDOW_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_A_BUS_AWVALID : OUT STD_LOGIC;
    m_axi_A_BUS_AWREADY : IN STD_LOGIC;
    m_axi_A_BUS_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_A_BUS_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_A_BUS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_BUS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_BUS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_AWUSER_WIDTH-1 downto 0);
    m_axi_A_BUS_WVALID : OUT STD_LOGIC;
    m_axi_A_BUS_WREADY : IN STD_LOGIC;
    m_axi_A_BUS_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_DATA_WIDTH-1 downto 0);
    m_axi_A_BUS_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_DATA_WIDTH/8-1 downto 0);
    m_axi_A_BUS_WLAST : OUT STD_LOGIC;
    m_axi_A_BUS_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_WUSER_WIDTH-1 downto 0);
    m_axi_A_BUS_ARVALID : OUT STD_LOGIC;
    m_axi_A_BUS_ARREADY : IN STD_LOGIC;
    m_axi_A_BUS_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_A_BUS_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_A_BUS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_BUS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_BUS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ARUSER_WIDTH-1 downto 0);
    m_axi_A_BUS_RVALID : IN STD_LOGIC;
    m_axi_A_BUS_RREADY : OUT STD_LOGIC;
    m_axi_A_BUS_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_DATA_WIDTH-1 downto 0);
    m_axi_A_BUS_RLAST : IN STD_LOGIC;
    m_axi_A_BUS_RID : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_RUSER_WIDTH-1 downto 0);
    m_axi_A_BUS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_BVALID : IN STD_LOGIC;
    m_axi_A_BUS_BREADY : OUT STD_LOGIC;
    m_axi_A_BUS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_BID : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_BUSER_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_AWVALID : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_AWREADY : IN STD_LOGIC;
    m_axi_PREF_WINDOW_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ADDR_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ID_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_PREF_WINDOW_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_PREF_WINDOW_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_PREF_WINDOW_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_AWUSER_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_WVALID : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_WREADY : IN STD_LOGIC;
    m_axi_PREF_WINDOW_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_DATA_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_DATA_WIDTH/8-1 downto 0);
    m_axi_PREF_WINDOW_WLAST : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ID_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_WUSER_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_ARVALID : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_ARREADY : IN STD_LOGIC;
    m_axi_PREF_WINDOW_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ADDR_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ID_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_PREF_WINDOW_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_PREF_WINDOW_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_PREF_WINDOW_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ARUSER_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_RVALID : IN STD_LOGIC;
    m_axi_PREF_WINDOW_RREADY : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_DATA_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_RLAST : IN STD_LOGIC;
    m_axi_PREF_WINDOW_RID : IN STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ID_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_RUSER_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_BVALID : IN STD_LOGIC;
    m_axi_PREF_WINDOW_BREADY : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_BID : IN STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ID_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_BUSER_WIDTH-1 downto 0);
    s_axi_CFG_AWVALID : IN STD_LOGIC;
    s_axi_CFG_AWREADY : OUT STD_LOGIC;
    s_axi_CFG_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_ADDR_WIDTH-1 downto 0);
    s_axi_CFG_WVALID : IN STD_LOGIC;
    s_axi_CFG_WREADY : OUT STD_LOGIC;
    s_axi_CFG_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_DATA_WIDTH-1 downto 0);
    s_axi_CFG_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_DATA_WIDTH/8-1 downto 0);
    s_axi_CFG_ARVALID : IN STD_LOGIC;
    s_axi_CFG_ARREADY : OUT STD_LOGIC;
    s_axi_CFG_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_ADDR_WIDTH-1 downto 0);
    s_axi_CFG_RVALID : OUT STD_LOGIC;
    s_axi_CFG_RREADY : IN STD_LOGIC;
    s_axi_CFG_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CFG_DATA_WIDTH-1 downto 0);
    s_axi_CFG_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CFG_BVALID : OUT STD_LOGIC;
    s_axi_CFG_BREADY : IN STD_LOGIC;
    s_axi_CFG_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of skipprefetch_Nelem is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "skipprefetch_Nelem,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=13.900000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=40,HLS_SYN_DSP=7,HLS_SYN_FF=2508,HLS_SYN_LUT=3184}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (86 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (86 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (86 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (86 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (86 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (86 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (86 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (86 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (86 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (86 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (86 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (86 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv65_147AE147B : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101000111101011100001010001111011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv26_1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_const_lv31_31 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000110001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv25_1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_const_lv33_31 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000110001";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (31 downto 0);
    signal n : STD_LOGIC_VECTOR (31 downto 0);
    signal A_BUS_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal A_BUS_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal A_BUS_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state26 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal A_BUS_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state27 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal A_BUS_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state32 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal PREF_WINDOW_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal PREF_WINDOW_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal A_BUS_AWVALID : STD_LOGIC;
    signal A_BUS_AWREADY : STD_LOGIC;
    signal A_BUS_WVALID : STD_LOGIC;
    signal A_BUS_WREADY : STD_LOGIC;
    signal A_BUS_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal A_BUS_ARVALID : STD_LOGIC;
    signal A_BUS_ARREADY : STD_LOGIC;
    signal A_BUS_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal A_BUS_RVALID : STD_LOGIC;
    signal A_BUS_RREADY : STD_LOGIC;
    signal A_BUS_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal A_BUS_RLAST : STD_LOGIC;
    signal A_BUS_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal A_BUS_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal A_BUS_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal A_BUS_BVALID : STD_LOGIC;
    signal A_BUS_BREADY : STD_LOGIC;
    signal A_BUS_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal A_BUS_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal A_BUS_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal PREF_WINDOW_AWREADY : STD_LOGIC;
    signal PREF_WINDOW_WREADY : STD_LOGIC;
    signal PREF_WINDOW_ARVALID : STD_LOGIC;
    signal PREF_WINDOW_ARREADY : STD_LOGIC;
    signal PREF_WINDOW_RVALID : STD_LOGIC;
    signal PREF_WINDOW_RREADY : STD_LOGIC;
    signal PREF_WINDOW_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal PREF_WINDOW_RLAST : STD_LOGIC;
    signal PREF_WINDOW_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal PREF_WINDOW_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal PREF_WINDOW_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal PREF_WINDOW_BVALID : STD_LOGIC;
    signal PREF_WINDOW_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal PREF_WINDOW_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal PREF_WINDOW_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_385 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_A_BUS_ARREADY : STD_LOGIC;
    signal n3_reg_866 : STD_LOGIC_VECTOR (29 downto 0);
    signal a1_reg_871 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_sig_ioackin_PREF_WINDOW_ARREADY : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_27_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_437_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul6_reg_901 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_29_reg_906 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_33_reg_912 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_26_fu_471_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_917 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_30_fu_501_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_30_reg_923 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_36_fu_544_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_36_reg_928 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_37_fu_548_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_37_reg_933 : STD_LOGIC_VECTOR (24 downto 0);
    signal i_cast4_fu_552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast4_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_565_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal i_1_reg_957 : STD_LOGIC_VECTOR (25 downto 0);
    signal a2_sum1_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a2_sum1_reg_962 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_579_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal bound_reg_967 : STD_LOGIC_VECTOR (30 downto 0);
    signal A_BUS_addr_reg_972 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_978 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_A_BUS_AWREADY : STD_LOGIC;
    signal grp_fu_363_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_983 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_reg_988 : STD_LOGIC_VECTOR (15 downto 0);
    signal cum_offs_1_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal indvar_flatten_next_fu_656_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_next_reg_1001 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal buff_addr_1_reg_1006 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_flatten_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_675_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_3_reg_1011 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_2_fu_692_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal i_2_reg_1016 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal exitcond2_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal j_fu_705_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_1026 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_fu_711_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_shl_reg_1031 : STD_LOGIC_VECTOR (26 downto 0);
    signal i_4_fu_718_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal i_4_reg_1038 : STD_LOGIC_VECTOR (26 downto 0);
    signal buff_addr_2_reg_1051 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal tmp_6_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_737_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal i_5_reg_1056 : STD_LOGIC_VECTOR (24 downto 0);
    signal exitcond1_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal j_1_fu_760_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_1065 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_38_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_reg_1070 : STD_LOGIC_VECTOR (0 downto 0);
    signal buff_addr_3_reg_1078 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal tmp_11_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_784_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal i_6_reg_1083 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal grp_fu_815_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal bound5_reg_1093 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal indvar_flatten_next8_fu_826_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal indvar_flatten_next8_reg_1101 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal buff_addr_4_reg_1106 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_flatten9_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_fu_849_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal i_7_reg_1111 : STD_LOGIC_VECTOR (26 downto 0);
    signal buff_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal buff_ce0 : STD_LOGIC;
    signal buff_we0 : STD_LOGIC;
    signal buff_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_258 : STD_LOGIC_VECTOR (25 downto 0);
    signal cum_offs_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_281 : STD_LOGIC_VECTOR (30 downto 0);
    signal i1_reg_292 : STD_LOGIC_VECTOR (23 downto 0);
    signal j2_reg_303 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal i3_reg_314 : STD_LOGIC_VECTOR (24 downto 0);
    signal j4_reg_323 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal i5_reg_334 : STD_LOGIC_VECTOR (25 downto 0);
    signal indvar_flatten7_reg_343 : STD_LOGIC_VECTOR (32 downto 0);
    signal i7_reg_354 : STD_LOGIC_VECTOR (26 downto 0);
    signal i1_cast3_fu_670_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i3_cast2_fu_732_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i5_cast1_fu_779_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i7_cast_fu_844_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_415_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_PREF_WINDOW_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_A_BUS_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_A_BUS_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_A_BUS_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_A_BUS_WREADY : STD_LOGIC;
    signal sz_fu_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_fu_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_fu_591_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_685_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_747_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_794_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_859_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_437_p0 : STD_LOGIC_VECTOR (33 downto 0);
    signal neg_mul7_fu_474_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_28_fu_479_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_v_v_fu_489_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal neg_ti1_fu_495_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_31_fu_507_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_32_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_521_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_524_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_ti_fu_531_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_9_fu_537_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_556_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal bound_fu_579_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_2_fu_613_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_cast_fu_642_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_8_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_mid2_fu_662_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i3_cast_fu_723_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_9_fu_743_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i5_cast_fu_770_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_12_fu_790_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal smax_fu_801_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_39_fu_806_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_815_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_815_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_40_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i7_mid2_fu_837_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_15_fu_855_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (86 downto 0);
    signal bound_fu_579_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_815_p00 : STD_LOGIC_VECTOR (32 downto 0);

    component skipprefetch_Nelecud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (33 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component skipprefetch_NeledEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (26 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component skipprefetch_Nelebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component skipprefetch_Nelem_CFG_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        a : OUT STD_LOGIC_VECTOR (31 downto 0);
        n : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component skipprefetch_Nelem_A_BUS_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component skipprefetch_Nelem_PREF_WINDOW_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    skipprefetch_Nelem_CFG_s_axi_U : component skipprefetch_Nelem_CFG_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CFG_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CFG_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CFG_AWVALID,
        AWREADY => s_axi_CFG_AWREADY,
        AWADDR => s_axi_CFG_AWADDR,
        WVALID => s_axi_CFG_WVALID,
        WREADY => s_axi_CFG_WREADY,
        WDATA => s_axi_CFG_WDATA,
        WSTRB => s_axi_CFG_WSTRB,
        ARVALID => s_axi_CFG_ARVALID,
        ARREADY => s_axi_CFG_ARREADY,
        ARADDR => s_axi_CFG_ARADDR,
        RVALID => s_axi_CFG_RVALID,
        RREADY => s_axi_CFG_RREADY,
        RDATA => s_axi_CFG_RDATA,
        RRESP => s_axi_CFG_RRESP,
        BVALID => s_axi_CFG_BVALID,
        BREADY => s_axi_CFG_BREADY,
        BRESP => s_axi_CFG_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        a => a,
        n => n);

    skipprefetch_Nelem_A_BUS_m_axi_U : component skipprefetch_Nelem_A_BUS_m_axi
    generic map (
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_A_BUS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_A_BUS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_A_BUS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_A_BUS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_A_BUS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_A_BUS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_A_BUS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_A_BUS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_A_BUS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_A_BUS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_A_BUS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_A_BUS_AWVALID,
        AWREADY => m_axi_A_BUS_AWREADY,
        AWADDR => m_axi_A_BUS_AWADDR,
        AWID => m_axi_A_BUS_AWID,
        AWLEN => m_axi_A_BUS_AWLEN,
        AWSIZE => m_axi_A_BUS_AWSIZE,
        AWBURST => m_axi_A_BUS_AWBURST,
        AWLOCK => m_axi_A_BUS_AWLOCK,
        AWCACHE => m_axi_A_BUS_AWCACHE,
        AWPROT => m_axi_A_BUS_AWPROT,
        AWQOS => m_axi_A_BUS_AWQOS,
        AWREGION => m_axi_A_BUS_AWREGION,
        AWUSER => m_axi_A_BUS_AWUSER,
        WVALID => m_axi_A_BUS_WVALID,
        WREADY => m_axi_A_BUS_WREADY,
        WDATA => m_axi_A_BUS_WDATA,
        WSTRB => m_axi_A_BUS_WSTRB,
        WLAST => m_axi_A_BUS_WLAST,
        WID => m_axi_A_BUS_WID,
        WUSER => m_axi_A_BUS_WUSER,
        ARVALID => m_axi_A_BUS_ARVALID,
        ARREADY => m_axi_A_BUS_ARREADY,
        ARADDR => m_axi_A_BUS_ARADDR,
        ARID => m_axi_A_BUS_ARID,
        ARLEN => m_axi_A_BUS_ARLEN,
        ARSIZE => m_axi_A_BUS_ARSIZE,
        ARBURST => m_axi_A_BUS_ARBURST,
        ARLOCK => m_axi_A_BUS_ARLOCK,
        ARCACHE => m_axi_A_BUS_ARCACHE,
        ARPROT => m_axi_A_BUS_ARPROT,
        ARQOS => m_axi_A_BUS_ARQOS,
        ARREGION => m_axi_A_BUS_ARREGION,
        ARUSER => m_axi_A_BUS_ARUSER,
        RVALID => m_axi_A_BUS_RVALID,
        RREADY => m_axi_A_BUS_RREADY,
        RDATA => m_axi_A_BUS_RDATA,
        RLAST => m_axi_A_BUS_RLAST,
        RID => m_axi_A_BUS_RID,
        RUSER => m_axi_A_BUS_RUSER,
        RRESP => m_axi_A_BUS_RRESP,
        BVALID => m_axi_A_BUS_BVALID,
        BREADY => m_axi_A_BUS_BREADY,
        BRESP => m_axi_A_BUS_BRESP,
        BID => m_axi_A_BUS_BID,
        BUSER => m_axi_A_BUS_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => A_BUS_ARVALID,
        I_ARREADY => A_BUS_ARREADY,
        I_ARADDR => A_BUS_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => A_BUS_RVALID,
        I_RREADY => A_BUS_RREADY,
        I_RDATA => A_BUS_RDATA,
        I_RID => A_BUS_RID,
        I_RUSER => A_BUS_RUSER,
        I_RRESP => A_BUS_RRESP,
        I_RLAST => A_BUS_RLAST,
        I_AWVALID => A_BUS_AWVALID,
        I_AWREADY => A_BUS_AWREADY,
        I_AWADDR => A_BUS_addr_reg_972,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => A_BUS_WVALID,
        I_WREADY => A_BUS_WREADY,
        I_WDATA => A_BUS_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_F,
        I_BVALID => A_BUS_BVALID,
        I_BREADY => A_BUS_BREADY,
        I_BRESP => A_BUS_BRESP,
        I_BID => A_BUS_BID,
        I_BUSER => A_BUS_BUSER);

    skipprefetch_Nelem_PREF_WINDOW_m_axi_U : component skipprefetch_Nelem_PREF_WINDOW_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_PREF_WINDOW_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_PREF_WINDOW_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_PREF_WINDOW_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_PREF_WINDOW_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_PREF_WINDOW_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_PREF_WINDOW_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_PREF_WINDOW_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_PREF_WINDOW_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_PREF_WINDOW_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_PREF_WINDOW_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_PREF_WINDOW_CACHE_VALUE)
    port map (
        AWVALID => m_axi_PREF_WINDOW_AWVALID,
        AWREADY => m_axi_PREF_WINDOW_AWREADY,
        AWADDR => m_axi_PREF_WINDOW_AWADDR,
        AWID => m_axi_PREF_WINDOW_AWID,
        AWLEN => m_axi_PREF_WINDOW_AWLEN,
        AWSIZE => m_axi_PREF_WINDOW_AWSIZE,
        AWBURST => m_axi_PREF_WINDOW_AWBURST,
        AWLOCK => m_axi_PREF_WINDOW_AWLOCK,
        AWCACHE => m_axi_PREF_WINDOW_AWCACHE,
        AWPROT => m_axi_PREF_WINDOW_AWPROT,
        AWQOS => m_axi_PREF_WINDOW_AWQOS,
        AWREGION => m_axi_PREF_WINDOW_AWREGION,
        AWUSER => m_axi_PREF_WINDOW_AWUSER,
        WVALID => m_axi_PREF_WINDOW_WVALID,
        WREADY => m_axi_PREF_WINDOW_WREADY,
        WDATA => m_axi_PREF_WINDOW_WDATA,
        WSTRB => m_axi_PREF_WINDOW_WSTRB,
        WLAST => m_axi_PREF_WINDOW_WLAST,
        WID => m_axi_PREF_WINDOW_WID,
        WUSER => m_axi_PREF_WINDOW_WUSER,
        ARVALID => m_axi_PREF_WINDOW_ARVALID,
        ARREADY => m_axi_PREF_WINDOW_ARREADY,
        ARADDR => m_axi_PREF_WINDOW_ARADDR,
        ARID => m_axi_PREF_WINDOW_ARID,
        ARLEN => m_axi_PREF_WINDOW_ARLEN,
        ARSIZE => m_axi_PREF_WINDOW_ARSIZE,
        ARBURST => m_axi_PREF_WINDOW_ARBURST,
        ARLOCK => m_axi_PREF_WINDOW_ARLOCK,
        ARCACHE => m_axi_PREF_WINDOW_ARCACHE,
        ARPROT => m_axi_PREF_WINDOW_ARPROT,
        ARQOS => m_axi_PREF_WINDOW_ARQOS,
        ARREGION => m_axi_PREF_WINDOW_ARREGION,
        ARUSER => m_axi_PREF_WINDOW_ARUSER,
        RVALID => m_axi_PREF_WINDOW_RVALID,
        RREADY => m_axi_PREF_WINDOW_RREADY,
        RDATA => m_axi_PREF_WINDOW_RDATA,
        RLAST => m_axi_PREF_WINDOW_RLAST,
        RID => m_axi_PREF_WINDOW_RID,
        RUSER => m_axi_PREF_WINDOW_RUSER,
        RRESP => m_axi_PREF_WINDOW_RRESP,
        BVALID => m_axi_PREF_WINDOW_BVALID,
        BREADY => m_axi_PREF_WINDOW_BREADY,
        BRESP => m_axi_PREF_WINDOW_BRESP,
        BID => m_axi_PREF_WINDOW_BID,
        BUSER => m_axi_PREF_WINDOW_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => PREF_WINDOW_ARVALID,
        I_ARREADY => PREF_WINDOW_ARREADY,
        I_ARADDR => tmp_14_fu_415_p1,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => PREF_WINDOW_RVALID,
        I_RREADY => PREF_WINDOW_RREADY,
        I_RDATA => PREF_WINDOW_RDATA,
        I_RID => PREF_WINDOW_RID,
        I_RUSER => PREF_WINDOW_RUSER,
        I_RRESP => PREF_WINDOW_RRESP,
        I_RLAST => PREF_WINDOW_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => PREF_WINDOW_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => PREF_WINDOW_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => PREF_WINDOW_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => PREF_WINDOW_BRESP,
        I_BID => PREF_WINDOW_BID,
        I_BUSER => PREF_WINDOW_BUSER);

    buff_U : component skipprefetch_Nelebkb
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_address0,
        ce0 => buff_ce0,
        we0 => buff_we0,
        d0 => buff_d0,
        q0 => buff_q0);

    skipprefetch_Nelecud_U0 : component skipprefetch_Nelecud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 34,
        din1_WIDTH => 32,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_437_p0,
        din1 => sz_fu_170,
        ce => ap_const_logic_1,
        dout => grp_fu_437_p2);

    skipprefetch_NeledEe_U1 : component skipprefetch_NeledEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 27,
        din1_WIDTH => 7,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_815_p0,
        din1 => grp_fu_815_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_815_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_A_BUS_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_A_BUS_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_lv1_1 = ap_CS_fsm_state44) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state55) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state66) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state79) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state18) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state33) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state34) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))))) then 
                    ap_reg_ioackin_A_BUS_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state18) and (ap_const_logic_1 = A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state33) and (ap_const_logic_1 = A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state34) and (ap_const_logic_1 = A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state44) and (ap_const_logic_1 = A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state55) and (ap_const_logic_1 = A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state66) and (ap_const_logic_1 = A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state79) and (ap_const_logic_1 = A_BUS_ARREADY)))) then 
                    ap_reg_ioackin_A_BUS_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_A_BUS_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_A_BUS_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state26)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_AWREADY))) then 
                        ap_reg_ioackin_A_BUS_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = A_BUS_AWREADY)) then 
                        ap_reg_ioackin_A_BUS_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_A_BUS_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_A_BUS_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state27)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_WREADY))) then 
                        ap_reg_ioackin_A_BUS_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = A_BUS_WREADY)) then 
                        ap_reg_ioackin_A_BUS_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_PREF_WINDOW_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_PREF_WINDOW_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state2)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_PREF_WINDOW_ARREADY))) then 
                        ap_reg_ioackin_PREF_WINDOW_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = PREF_WINDOW_ARREADY)) then 
                        ap_reg_ioackin_PREF_WINDOW_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    cum_offs_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
                cum_offs_reg_269 <= cum_offs_1_fu_636_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                cum_offs_reg_269 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i1_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state51) and not((A_BUS_RVALID = ap_const_logic_0)))) then 
                i1_reg_292 <= i_3_reg_1011;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state17) and (tmp_fu_560_p2 = ap_const_lv1_0))) then 
                i1_reg_292 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    i3_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state53) and (ap_const_lv1_0 = exitcond2_fu_699_p2))) then 
                i3_reg_314 <= tmp_37_reg_933;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state62) and not((A_BUS_RVALID = ap_const_logic_0)))) then 
                i3_reg_314 <= i_5_reg_1056;
            end if; 
        end if;
    end process;

    i5_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state64) and (ap_const_lv1_0 = exitcond1_fu_754_p2))) then 
                i5_reg_334 <= i_2_reg_1016;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state73) and not((A_BUS_RVALID = ap_const_logic_0)))) then 
                i5_reg_334 <= i_6_reg_1083;
            end if; 
        end if;
    end process;

    i7_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state86) and not((A_BUS_RVALID = ap_const_logic_0)))) then 
                i7_reg_354 <= i_7_reg_1111;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state77))) then 
                i7_reg_354 <= i_4_reg_1038;
            end if; 
        end if;
    end process;

    i_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state42))) then 
                i_reg_258 <= i_1_reg_957;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state16))) then 
                i_reg_258 <= ap_const_lv26_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state86) and not((A_BUS_RVALID = ap_const_logic_0)))) then 
                indvar_flatten7_reg_343 <= indvar_flatten_next8_reg_1101;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state77))) then 
                indvar_flatten7_reg_343 <= ap_const_lv33_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state51) and not((A_BUS_RVALID = ap_const_logic_0)))) then 
                indvar_flatten_reg_281 <= indvar_flatten_next_reg_1001;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state17) and (tmp_fu_560_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_281 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j2_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state63))) then 
                j2_reg_303 <= j_reg_1026;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state52))) then 
                j2_reg_303 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j4_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state74))) then 
                j4_reg_323 <= j_1_reg_1065;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state53) and not((ap_const_lv1_0 = exitcond2_fu_699_p2)))) then 
                j4_reg_323 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state18) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)))) then
                A_BUS_addr_reg_972 <= a2_sum1_reg_962;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                a1_reg_871 <= a(31 downto 3);
                n3_reg_866 <= n(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17) and not((tmp_fu_560_p2 = ap_const_lv1_0)))) then
                a2_sum1_reg_962 <= a2_sum1_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state77))) then
                bound5_reg_1093 <= grp_fu_815_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17) and (tmp_fu_560_p2 = ap_const_lv1_0))) then
                bound_reg_967 <= bound_fu_579_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state43) and (ap_const_lv1_0 = exitcond_flatten_fu_651_p2))) then
                buff_addr_1_reg_1006 <= i1_cast3_fu_670_p1(14 - 1 downto 0);
                i_3_reg_1011 <= i_3_fu_675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state54) and not((ap_const_lv1_0 = tmp_6_fu_727_p2)))) then
                buff_addr_2_reg_1051 <= i3_cast2_fu_732_p1(14 - 1 downto 0);
                i_5_reg_1056 <= i_5_fu_737_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state65) and not((ap_const_lv1_0 = tmp_11_fu_774_p2)))) then
                buff_addr_3_reg_1078 <= i5_cast1_fu_779_p1(14 - 1 downto 0);
                i_6_reg_1083 <= i_6_fu_784_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state78) and (ap_const_lv1_0 = exitcond_flatten9_fu_821_p2))) then
                buff_addr_4_reg_1106 <= i7_cast_fu_844_p1(14 - 1 downto 0);
                i_7_reg_1111 <= i_7_fu_849_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state17))) then
                i_1_reg_957 <= i_1_fu_565_p2;
                    i_cast4_reg_948(25 downto 0) <= i_cast4_fu_552_p1(25 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state52))) then
                    i_2_reg_1016(25 downto 1) <= i_2_fu_692_p3(25 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state53) and not((ap_const_lv1_0 = exitcond2_fu_699_p2)))) then
                i_4_reg_1038 <= i_4_fu_718_p2;
                    p_shl_reg_1031(26 downto 2) <= p_shl_fu_711_p3(26 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state78))) then
                indvar_flatten_next8_reg_1101 <= indvar_flatten_next8_fu_826_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state43))) then
                indvar_flatten_next_reg_1001 <= indvar_flatten_next_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state64))) then
                j_1_reg_1065 <= j_1_fu_760_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state53))) then
                j_reg_1026 <= j_fu_705_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state15))) then
                mul6_reg_901 <= grp_fu_437_p2;
                tmp_29_reg_906 <= grp_fu_437_p2(64 downto 38);
                tmp_33_reg_912 <= grp_fu_437_p2(64 downto 40);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state44) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state55) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state66) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state79) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))))) then
                reg_385 <= buff_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((PREF_WINDOW_RVALID = ap_const_logic_0)))) then
                sz_fu_170 <= PREF_WINDOW_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state25) and not((A_BUS_RVALID = ap_const_logic_0)))) then
                temp_fu_174 <= temp_1_fu_591_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state41) and not((A_BUS_RVALID = ap_const_logic_0)))) then
                tmp_17_reg_988 <= A_BUS_RDATA(63 downto 48);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_AWREADY)))) then
                tmp_1_reg_978 <= tmp_1_fu_603_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state16))) then
                    tmp_26_reg_917(28 downto 0) <= tmp_26_fu_471_p1(28 downto 0);
                tmp_30_reg_923 <= tmp_30_fu_501_p3;
                tmp_36_reg_928 <= tmp_36_fu_544_p1;
                tmp_37_reg_933 <= tmp_37_fu_548_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                tmp_27_reg_893 <= sz_fu_170(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state64) and not((ap_const_lv1_0 = exitcond1_fu_754_p2)))) then
                tmp_38_reg_1070 <= tmp_38_fu_766_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state40) and not((A_BUS_RVALID = ap_const_logic_0)))) then
                tmp_7_reg_983 <= A_BUS_RDATA(47 downto 32);
            end if;
        end if;
    end process;
    tmp_26_reg_917(31 downto 29) <= "000";
    i_cast4_reg_948(31 downto 26) <= "000000";
    i_2_reg_1016(0) <= '0';
    p_shl_reg_1031(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, A_BUS_RVALID, A_BUS_BVALID, PREF_WINDOW_RVALID, ap_sig_ioackin_A_BUS_ARREADY, ap_sig_ioackin_PREF_WINDOW_ARREADY, tmp_fu_560_p2, ap_sig_ioackin_A_BUS_AWREADY, exitcond_flatten_fu_651_p2, exitcond2_fu_699_p2, tmp_6_fu_727_p2, exitcond1_fu_754_p2, tmp_11_fu_774_p2, exitcond_flatten9_fu_821_p2, ap_sig_ioackin_A_BUS_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_PREF_WINDOW_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (not((PREF_WINDOW_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if ((tmp_fu_560_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (not((A_BUS_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_AWREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_WREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (not((A_BUS_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (not((A_BUS_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (not((A_BUS_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state43 => 
                if ((ap_const_lv1_0 = exitcond_flatten_fu_651_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state44 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                if (not((A_BUS_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_699_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                if (not((ap_const_lv1_0 = tmp_6_fu_727_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state55 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state56;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                if (not((A_BUS_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state64 => 
                if ((ap_const_lv1_0 = exitcond1_fu_754_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state65 => 
                if (not((ap_const_lv1_0 = tmp_11_fu_774_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state74;
                end if;
            when ap_ST_fsm_state66 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (not((A_BUS_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                if ((ap_const_lv1_0 = exitcond_flatten9_fu_821_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state79 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                if (not((A_BUS_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_BUS_ARADDR_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_CS_fsm_state55, ap_CS_fsm_state66, ap_CS_fsm_state79, a2_sum1_reg_962, A_BUS_addr_reg_972, grp_fu_373_p2, ap_reg_ioackin_A_BUS_ARREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state44) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state55) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state66) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state79) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)))) then 
            A_BUS_ARADDR <= grp_fu_373_p2;
        elsif ((((ap_const_lv1_1 = ap_CS_fsm_state33) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state34) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)))) then 
            A_BUS_ARADDR <= A_BUS_addr_reg_972;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state18) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY))) then 
            A_BUS_ARADDR <= a2_sum1_reg_962;
        else 
            A_BUS_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_BUS_ARVALID_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_CS_fsm_state55, ap_CS_fsm_state66, ap_CS_fsm_state79, ap_reg_ioackin_A_BUS_ARREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state18) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state33) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state34) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state44) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state55) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state66) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state79) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)))) then 
            A_BUS_ARVALID <= ap_const_logic_1;
        else 
            A_BUS_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    A_BUS_AWVALID_assign_proc : process(ap_CS_fsm_state26, ap_reg_ioackin_A_BUS_AWREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state26) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_AWREADY))) then 
            A_BUS_AWVALID <= ap_const_logic_1;
        else 
            A_BUS_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    A_BUS_BREADY_assign_proc : process(ap_CS_fsm_state32, A_BUS_BVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state32) and not((A_BUS_BVALID = ap_const_logic_0)))) then 
            A_BUS_BREADY <= ap_const_logic_1;
        else 
            A_BUS_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    A_BUS_RREADY_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state51, ap_CS_fsm_state62, ap_CS_fsm_state73, ap_CS_fsm_state86, A_BUS_RVALID)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state40) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state41) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state51) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state62) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state73) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state86) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state25) and not((A_BUS_RVALID = ap_const_logic_0))))) then 
            A_BUS_RREADY <= ap_const_logic_1;
        else 
            A_BUS_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    A_BUS_WDATA <= std_logic_vector(resize(unsigned(tmp_1_reg_978),64));

    A_BUS_WVALID_assign_proc : process(ap_CS_fsm_state27, ap_reg_ioackin_A_BUS_WREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state27) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_WREADY))) then 
            A_BUS_WVALID <= ap_const_logic_1;
        else 
            A_BUS_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    A_BUS_blk_n_AR_assign_proc : process(m_axi_A_BUS_ARREADY, ap_CS_fsm_state18, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state44, ap_CS_fsm_state55, ap_CS_fsm_state66, ap_CS_fsm_state79)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state33)) or ((ap_const_lv1_1 = ap_CS_fsm_state34)) or ((ap_const_lv1_1 = ap_CS_fsm_state44)) or ((ap_const_lv1_1 = ap_CS_fsm_state55)) or ((ap_const_lv1_1 = ap_CS_fsm_state66)) or ((ap_const_lv1_1 = ap_CS_fsm_state79)))) then 
            A_BUS_blk_n_AR <= m_axi_A_BUS_ARREADY;
        else 
            A_BUS_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    A_BUS_blk_n_AW_assign_proc : process(m_axi_A_BUS_AWREADY, ap_CS_fsm_state26)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state26))) then 
            A_BUS_blk_n_AW <= m_axi_A_BUS_AWREADY;
        else 
            A_BUS_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    A_BUS_blk_n_B_assign_proc : process(m_axi_A_BUS_BVALID, ap_CS_fsm_state32)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state32))) then 
            A_BUS_blk_n_B <= m_axi_A_BUS_BVALID;
        else 
            A_BUS_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    A_BUS_blk_n_R_assign_proc : process(m_axi_A_BUS_RVALID, ap_CS_fsm_state25, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state51, ap_CS_fsm_state62, ap_CS_fsm_state73, ap_CS_fsm_state86)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state25)) or ((ap_const_lv1_1 = ap_CS_fsm_state40)) or ((ap_const_lv1_1 = ap_CS_fsm_state41)) or ((ap_const_lv1_1 = ap_CS_fsm_state51)) or ((ap_const_lv1_1 = ap_CS_fsm_state62)) or ((ap_const_lv1_1 = ap_CS_fsm_state73)) or ((ap_const_lv1_1 = ap_CS_fsm_state86)))) then 
            A_BUS_blk_n_R <= m_axi_A_BUS_RVALID;
        else 
            A_BUS_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    A_BUS_blk_n_W_assign_proc : process(m_axi_A_BUS_WREADY, ap_CS_fsm_state27)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state27))) then 
            A_BUS_blk_n_W <= m_axi_A_BUS_WREADY;
        else 
            A_BUS_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    PREF_WINDOW_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_PREF_WINDOW_ARREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_reg_ioackin_PREF_WINDOW_ARREADY))) then 
            PREF_WINDOW_ARVALID <= ap_const_logic_1;
        else 
            PREF_WINDOW_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    PREF_WINDOW_RREADY_assign_proc : process(ap_CS_fsm_state9, PREF_WINDOW_RVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((PREF_WINDOW_RVALID = ap_const_logic_0)))) then 
            PREF_WINDOW_RREADY <= ap_const_logic_1;
        else 
            PREF_WINDOW_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    PREF_WINDOW_blk_n_AR_assign_proc : process(m_axi_PREF_WINDOW_ARREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            PREF_WINDOW_blk_n_AR <= m_axi_PREF_WINDOW_ARREADY;
        else 
            PREF_WINDOW_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    PREF_WINDOW_blk_n_R_assign_proc : process(m_axi_PREF_WINDOW_RVALID, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            PREF_WINDOW_blk_n_R <= m_axi_PREF_WINDOW_RVALID;
        else 
            PREF_WINDOW_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    a2_sum1_fu_571_p2 <= std_logic_vector(unsigned(cum_offs_reg_269) + unsigned(tmp_26_reg_917));
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state15 <= ap_CS_fsm(14 downto 14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15 downto 15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16 downto 16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state25 <= ap_CS_fsm(24 downto 24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_state32 <= ap_CS_fsm(31 downto 31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32 downto 32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33 downto 33);
    ap_CS_fsm_state40 <= ap_CS_fsm(39 downto 39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40 downto 40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41 downto 41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42 downto 42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43 downto 43);
    ap_CS_fsm_state51 <= ap_CS_fsm(50 downto 50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51 downto 51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52 downto 52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53 downto 53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54 downto 54);
    ap_CS_fsm_state62 <= ap_CS_fsm(61 downto 61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62 downto 62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63 downto 63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64 downto 64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65 downto 65);
    ap_CS_fsm_state73 <= ap_CS_fsm(72 downto 72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73 downto 73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74 downto 74);
    ap_CS_fsm_state77 <= ap_CS_fsm(76 downto 76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77 downto 77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78 downto 78);
    ap_CS_fsm_state86 <= ap_CS_fsm(85 downto 85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86 downto 86);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_done_assign_proc : process(ap_CS_fsm_state87)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state87))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state87)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state87))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_A_BUS_ARREADY_assign_proc : process(A_BUS_ARREADY, ap_reg_ioackin_A_BUS_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) then 
            ap_sig_ioackin_A_BUS_ARREADY <= A_BUS_ARREADY;
        else 
            ap_sig_ioackin_A_BUS_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_A_BUS_AWREADY_assign_proc : process(A_BUS_AWREADY, ap_reg_ioackin_A_BUS_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_A_BUS_AWREADY)) then 
            ap_sig_ioackin_A_BUS_AWREADY <= A_BUS_AWREADY;
        else 
            ap_sig_ioackin_A_BUS_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_A_BUS_WREADY_assign_proc : process(A_BUS_WREADY, ap_reg_ioackin_A_BUS_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_A_BUS_WREADY)) then 
            ap_sig_ioackin_A_BUS_WREADY <= A_BUS_WREADY;
        else 
            ap_sig_ioackin_A_BUS_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_PREF_WINDOW_ARREADY_assign_proc : process(PREF_WINDOW_ARREADY, ap_reg_ioackin_PREF_WINDOW_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_PREF_WINDOW_ARREADY)) then 
            ap_sig_ioackin_PREF_WINDOW_ARREADY <= PREF_WINDOW_ARREADY;
        else 
            ap_sig_ioackin_PREF_WINDOW_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    bound_fu_579_p0 <= bound_fu_579_p00(25 - 1 downto 0);
    bound_fu_579_p00 <= std_logic_vector(resize(unsigned(tmp_37_reg_933),31));
    bound_fu_579_p2 <= std_logic_vector(resize(unsigned(bound_fu_579_p0) * unsigned(ap_const_lv31_31), 31));

    buff_address0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state51, ap_CS_fsm_state62, ap_CS_fsm_state73, ap_CS_fsm_state86, i_cast4_reg_948, ap_CS_fsm_state43, buff_addr_1_reg_1006, buff_addr_2_reg_1051, ap_CS_fsm_state54, buff_addr_3_reg_1078, ap_CS_fsm_state65, ap_CS_fsm_state78, buff_addr_4_reg_1106, i1_cast3_fu_670_p1, i3_cast2_fu_732_p1, i5_cast1_fu_779_p1, i7_cast_fu_844_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state86))) then 
            buff_address0 <= buff_addr_4_reg_1106;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state78))) then 
            buff_address0 <= i7_cast_fu_844_p1(14 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state73))) then 
            buff_address0 <= buff_addr_3_reg_1078;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state65))) then 
            buff_address0 <= i5_cast1_fu_779_p1(14 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state62))) then 
            buff_address0 <= buff_addr_2_reg_1051;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state54))) then 
            buff_address0 <= i3_cast2_fu_732_p1(14 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state51))) then 
            buff_address0 <= buff_addr_1_reg_1006;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state43))) then 
            buff_address0 <= i1_cast3_fu_670_p1(14 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state41))) then 
            buff_address0 <= i_cast4_reg_948(14 - 1 downto 0);
        else 
            buff_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    buff_ce0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state51, ap_CS_fsm_state62, ap_CS_fsm_state73, ap_CS_fsm_state86, A_BUS_RVALID, ap_CS_fsm_state43, ap_CS_fsm_state54, ap_CS_fsm_state65, ap_CS_fsm_state78)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state41) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state43)) or ((ap_const_lv1_1 = ap_CS_fsm_state54)) or ((ap_const_lv1_1 = ap_CS_fsm_state65)) or ((ap_const_lv1_1 = ap_CS_fsm_state78)) or ((ap_const_lv1_1 = ap_CS_fsm_state51) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state62) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state73) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state86) and not((A_BUS_RVALID = ap_const_logic_0))))) then 
            buff_ce0 <= ap_const_logic_1;
        else 
            buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_d0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state51, ap_CS_fsm_state62, ap_CS_fsm_state73, ap_CS_fsm_state86, tmp_3_fu_616_p2, tmp_5_fu_685_p2, tmp_10_fu_747_p2, tmp_13_fu_794_p2, tmp_16_fu_859_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state86))) then 
            buff_d0 <= tmp_16_fu_859_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state73))) then 
            buff_d0 <= tmp_13_fu_794_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state62))) then 
            buff_d0 <= tmp_10_fu_747_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state51))) then 
            buff_d0 <= tmp_5_fu_685_p2;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state41))) then 
            buff_d0 <= tmp_3_fu_616_p2;
        else 
            buff_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buff_we0_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state51, ap_CS_fsm_state62, ap_CS_fsm_state73, ap_CS_fsm_state86, A_BUS_RVALID)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state41) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state51) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state62) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state73) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state86) and not((A_BUS_RVALID = ap_const_logic_0))))) then 
            buff_we0 <= ap_const_logic_1;
        else 
            buff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cum_offs_1_fu_636_p2 <= std_logic_vector(unsigned(cum_offs_reg_269) + unsigned(tmp_4_fu_633_p1));
    exitcond1_fu_754_p2 <= "1" when (j4_reg_323 = ap_const_lv6_31) else "0";
    exitcond2_fu_699_p2 <= "1" when (j2_reg_303 = ap_const_lv6_31) else "0";
    exitcond_flatten9_fu_821_p2 <= "1" when (indvar_flatten7_reg_343 = bound5_reg_1093) else "0";
    exitcond_flatten_fu_651_p2 <= "1" when (indvar_flatten_reg_281 = bound_reg_967) else "0";
    grp_fu_363_p4 <= A_BUS_RDATA(47 downto 32);
    grp_fu_373_p2 <= std_logic_vector(unsigned(tmp_26_reg_917) + unsigned(buff_q0));
    grp_fu_437_p0 <= ap_const_lv65_147AE147B(34 - 1 downto 0);
    grp_fu_815_p0 <= grp_fu_815_p00(27 - 1 downto 0);
    grp_fu_815_p00 <= std_logic_vector(resize(unsigned(tmp_39_fu_806_p2),33));
    grp_fu_815_p1 <= ap_const_lv33_31(7 - 1 downto 0);
    i1_cast3_fu_670_p1 <= std_logic_vector(resize(unsigned(i1_mid2_fu_662_p3),32));
    i1_cast_fu_642_p1 <= std_logic_vector(resize(unsigned(i1_reg_292),25));
    i1_mid2_fu_662_p3 <= 
        i1_reg_292 when (tmp_8_fu_646_p2(0) = '1') else 
        ap_const_lv24_0;
        i3_cast2_fu_732_p1 <= std_logic_vector(resize(signed(i3_reg_314),32));

        i3_cast_fu_723_p1 <= std_logic_vector(resize(signed(i3_reg_314),26));

        i5_cast1_fu_779_p1 <= std_logic_vector(resize(signed(i5_reg_334),32));

        i5_cast_fu_770_p1 <= std_logic_vector(resize(signed(i5_reg_334),27));

        i7_cast_fu_844_p1 <= std_logic_vector(resize(signed(i7_mid2_fu_837_p3),32));

    i7_mid2_fu_837_p3 <= 
        i7_reg_354 when (tmp_40_fu_832_p2(0) = '1') else 
        i_4_reg_1038;
    i_1_fu_565_p2 <= std_logic_vector(unsigned(i_reg_258) + unsigned(ap_const_lv26_1));
    i_2_fu_692_p3 <= (tmp_37_reg_933 & ap_const_lv1_0);
    i_3_fu_675_p2 <= std_logic_vector(unsigned(i1_mid2_fu_662_p3) + unsigned(ap_const_lv24_1));
    i_4_fu_718_p2 <= std_logic_vector(unsigned(p_shl_fu_711_p3) - unsigned(tmp_36_reg_928));
    i_5_fu_737_p2 <= std_logic_vector(unsigned(i3_reg_314) + unsigned(ap_const_lv25_1));
    i_6_fu_784_p2 <= std_logic_vector(unsigned(i5_reg_334) + unsigned(ap_const_lv26_1));
    i_7_fu_849_p2 <= std_logic_vector(unsigned(i7_mid2_fu_837_p3) + unsigned(ap_const_lv27_1));
    i_9_fu_537_p3 <= 
        neg_ti_fu_531_p2 when (tmp_27_reg_893(0) = '1') else 
        tmp_34_fu_521_p1;
    i_cast4_fu_552_p1 <= std_logic_vector(resize(unsigned(i_reg_258),32));
    i_cast_fu_556_p1 <= std_logic_vector(resize(unsigned(i_reg_258),27));
    indvar_flatten_next8_fu_826_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_343) + unsigned(ap_const_lv33_1));
    indvar_flatten_next_fu_656_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_281) + unsigned(ap_const_lv31_1));
    j_1_fu_760_p2 <= std_logic_vector(unsigned(j4_reg_323) + unsigned(ap_const_lv6_1));
    j_fu_705_p2 <= std_logic_vector(unsigned(j2_reg_303) + unsigned(ap_const_lv6_1));
    neg_mul7_fu_474_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul6_reg_901));
    neg_ti1_fu_495_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(p_v_v_fu_489_p3));
    neg_ti_fu_531_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_35_fu_524_p3));
    p_shl_fu_711_p3 <= (tmp_37_reg_933 & ap_const_lv2_0);
    p_v_v_fu_489_p3 <= 
        tmp_28_fu_479_p4 when (tmp_27_reg_893(0) = '1') else 
        tmp_29_reg_906;
    smax_fu_801_p3 <= 
        p_shl_reg_1031 when (tmp_38_reg_1070(0) = '1') else 
        i_4_reg_1038;
    temp_1_fu_591_p1 <= A_BUS_RDATA(32 - 1 downto 0);
    tmp_10_fu_747_p2 <= std_logic_vector(unsigned(reg_385) + unsigned(tmp_9_fu_743_p1));
    tmp_11_fu_774_p2 <= "1" when (signed(i5_cast_fu_770_p1) < signed(i_4_reg_1038)) else "0";
        tmp_12_fu_790_p1 <= std_logic_vector(resize(signed(grp_fu_363_p4),32));

    tmp_13_fu_794_p2 <= std_logic_vector(unsigned(reg_385) + unsigned(tmp_12_fu_790_p1));
    tmp_14_fu_415_p1 <= std_logic_vector(resize(unsigned(n3_reg_866),32));
        tmp_15_fu_855_p1 <= std_logic_vector(resize(signed(grp_fu_363_p4),32));

    tmp_16_fu_859_p2 <= std_logic_vector(unsigned(reg_385) + unsigned(tmp_15_fu_855_p1));
    tmp_1_fu_603_p2 <= std_logic_vector(unsigned(ap_const_lv32_A) + unsigned(temp_fu_174));
    tmp_26_fu_471_p1 <= std_logic_vector(resize(unsigned(a1_reg_871),32));
    tmp_28_fu_479_p4 <= neg_mul7_fu_474_p2(64 downto 38);
        tmp_2_fu_613_p1 <= std_logic_vector(resize(signed(tmp_7_reg_983),32));

    tmp_30_fu_501_p3 <= 
        neg_ti1_fu_495_p2 when (tmp_27_reg_893(0) = '1') else 
        tmp_29_reg_906;
    tmp_31_fu_507_p4 <= neg_mul7_fu_474_p2(64 downto 40);
        tmp_32_fu_517_p1 <= std_logic_vector(resize(signed(tmp_31_fu_507_p4),32));

        tmp_34_fu_521_p1 <= std_logic_vector(resize(signed(tmp_33_reg_912),32));

    tmp_35_fu_524_p3 <= 
        tmp_32_fu_517_p1 when (tmp_27_reg_893(0) = '1') else 
        tmp_34_fu_521_p1;
    tmp_36_fu_544_p1 <= i_9_fu_537_p3(27 - 1 downto 0);
    tmp_37_fu_548_p1 <= i_9_fu_537_p3(25 - 1 downto 0);
    tmp_38_fu_766_p2 <= "1" when (signed(p_shl_reg_1031) > signed(i_4_reg_1038)) else "0";
    tmp_39_fu_806_p2 <= std_logic_vector(unsigned(smax_fu_801_p3) - unsigned(i_4_reg_1038));
    tmp_3_fu_616_p2 <= std_logic_vector(signed(tmp_2_fu_613_p1) + signed(cum_offs_reg_269));
    tmp_40_fu_832_p2 <= "1" when (signed(i7_reg_354) < signed(p_shl_reg_1031)) else "0";
        tmp_4_fu_633_p1 <= std_logic_vector(resize(signed(tmp_17_reg_988),32));

    tmp_5_fu_685_p2 <= std_logic_vector(unsigned(reg_385) + unsigned(tmp_s_fu_681_p1));
    tmp_6_fu_727_p2 <= "1" when (signed(i3_cast_fu_723_p1) < signed(i_2_reg_1016)) else "0";
    tmp_8_fu_646_p2 <= "1" when (signed(i1_cast_fu_642_p1) < signed(tmp_37_reg_933)) else "0";
        tmp_9_fu_743_p1 <= std_logic_vector(resize(signed(grp_fu_363_p4),32));

    tmp_fu_560_p2 <= "1" when (signed(i_cast_fu_556_p1) < signed(tmp_30_reg_923)) else "0";
        tmp_s_fu_681_p1 <= std_logic_vector(resize(signed(grp_fu_363_p4),32));

end behav;
