// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="skipprefetch_Nelem,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=13.900000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=40,HLS_SYN_DSP=7,HLS_SYN_FF=2508,HLS_SYN_LUT=3184}" *)

module skipprefetch_Nelem (
        ap_clk,
        ap_rst_n,
        m_axi_A_BUS_AWVALID,
        m_axi_A_BUS_AWREADY,
        m_axi_A_BUS_AWADDR,
        m_axi_A_BUS_AWID,
        m_axi_A_BUS_AWLEN,
        m_axi_A_BUS_AWSIZE,
        m_axi_A_BUS_AWBURST,
        m_axi_A_BUS_AWLOCK,
        m_axi_A_BUS_AWCACHE,
        m_axi_A_BUS_AWPROT,
        m_axi_A_BUS_AWQOS,
        m_axi_A_BUS_AWREGION,
        m_axi_A_BUS_AWUSER,
        m_axi_A_BUS_WVALID,
        m_axi_A_BUS_WREADY,
        m_axi_A_BUS_WDATA,
        m_axi_A_BUS_WSTRB,
        m_axi_A_BUS_WLAST,
        m_axi_A_BUS_WID,
        m_axi_A_BUS_WUSER,
        m_axi_A_BUS_ARVALID,
        m_axi_A_BUS_ARREADY,
        m_axi_A_BUS_ARADDR,
        m_axi_A_BUS_ARID,
        m_axi_A_BUS_ARLEN,
        m_axi_A_BUS_ARSIZE,
        m_axi_A_BUS_ARBURST,
        m_axi_A_BUS_ARLOCK,
        m_axi_A_BUS_ARCACHE,
        m_axi_A_BUS_ARPROT,
        m_axi_A_BUS_ARQOS,
        m_axi_A_BUS_ARREGION,
        m_axi_A_BUS_ARUSER,
        m_axi_A_BUS_RVALID,
        m_axi_A_BUS_RREADY,
        m_axi_A_BUS_RDATA,
        m_axi_A_BUS_RLAST,
        m_axi_A_BUS_RID,
        m_axi_A_BUS_RUSER,
        m_axi_A_BUS_RRESP,
        m_axi_A_BUS_BVALID,
        m_axi_A_BUS_BREADY,
        m_axi_A_BUS_BRESP,
        m_axi_A_BUS_BID,
        m_axi_A_BUS_BUSER,
        m_axi_PREF_WINDOW_AWVALID,
        m_axi_PREF_WINDOW_AWREADY,
        m_axi_PREF_WINDOW_AWADDR,
        m_axi_PREF_WINDOW_AWID,
        m_axi_PREF_WINDOW_AWLEN,
        m_axi_PREF_WINDOW_AWSIZE,
        m_axi_PREF_WINDOW_AWBURST,
        m_axi_PREF_WINDOW_AWLOCK,
        m_axi_PREF_WINDOW_AWCACHE,
        m_axi_PREF_WINDOW_AWPROT,
        m_axi_PREF_WINDOW_AWQOS,
        m_axi_PREF_WINDOW_AWREGION,
        m_axi_PREF_WINDOW_AWUSER,
        m_axi_PREF_WINDOW_WVALID,
        m_axi_PREF_WINDOW_WREADY,
        m_axi_PREF_WINDOW_WDATA,
        m_axi_PREF_WINDOW_WSTRB,
        m_axi_PREF_WINDOW_WLAST,
        m_axi_PREF_WINDOW_WID,
        m_axi_PREF_WINDOW_WUSER,
        m_axi_PREF_WINDOW_ARVALID,
        m_axi_PREF_WINDOW_ARREADY,
        m_axi_PREF_WINDOW_ARADDR,
        m_axi_PREF_WINDOW_ARID,
        m_axi_PREF_WINDOW_ARLEN,
        m_axi_PREF_WINDOW_ARSIZE,
        m_axi_PREF_WINDOW_ARBURST,
        m_axi_PREF_WINDOW_ARLOCK,
        m_axi_PREF_WINDOW_ARCACHE,
        m_axi_PREF_WINDOW_ARPROT,
        m_axi_PREF_WINDOW_ARQOS,
        m_axi_PREF_WINDOW_ARREGION,
        m_axi_PREF_WINDOW_ARUSER,
        m_axi_PREF_WINDOW_RVALID,
        m_axi_PREF_WINDOW_RREADY,
        m_axi_PREF_WINDOW_RDATA,
        m_axi_PREF_WINDOW_RLAST,
        m_axi_PREF_WINDOW_RID,
        m_axi_PREF_WINDOW_RUSER,
        m_axi_PREF_WINDOW_RRESP,
        m_axi_PREF_WINDOW_BVALID,
        m_axi_PREF_WINDOW_BREADY,
        m_axi_PREF_WINDOW_BRESP,
        m_axi_PREF_WINDOW_BID,
        m_axi_PREF_WINDOW_BUSER,
        s_axi_CFG_AWVALID,
        s_axi_CFG_AWREADY,
        s_axi_CFG_AWADDR,
        s_axi_CFG_WVALID,
        s_axi_CFG_WREADY,
        s_axi_CFG_WDATA,
        s_axi_CFG_WSTRB,
        s_axi_CFG_ARVALID,
        s_axi_CFG_ARREADY,
        s_axi_CFG_ARADDR,
        s_axi_CFG_RVALID,
        s_axi_CFG_RREADY,
        s_axi_CFG_RDATA,
        s_axi_CFG_RRESP,
        s_axi_CFG_BVALID,
        s_axi_CFG_BREADY,
        s_axi_CFG_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 87'b1;
parameter    ap_ST_fsm_state2 = 87'b10;
parameter    ap_ST_fsm_state3 = 87'b100;
parameter    ap_ST_fsm_state4 = 87'b1000;
parameter    ap_ST_fsm_state5 = 87'b10000;
parameter    ap_ST_fsm_state6 = 87'b100000;
parameter    ap_ST_fsm_state7 = 87'b1000000;
parameter    ap_ST_fsm_state8 = 87'b10000000;
parameter    ap_ST_fsm_state9 = 87'b100000000;
parameter    ap_ST_fsm_state10 = 87'b1000000000;
parameter    ap_ST_fsm_state11 = 87'b10000000000;
parameter    ap_ST_fsm_state12 = 87'b100000000000;
parameter    ap_ST_fsm_state13 = 87'b1000000000000;
parameter    ap_ST_fsm_state14 = 87'b10000000000000;
parameter    ap_ST_fsm_state15 = 87'b100000000000000;
parameter    ap_ST_fsm_state16 = 87'b1000000000000000;
parameter    ap_ST_fsm_state17 = 87'b10000000000000000;
parameter    ap_ST_fsm_state18 = 87'b100000000000000000;
parameter    ap_ST_fsm_state19 = 87'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 87'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 87'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 87'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 87'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 87'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 87'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 87'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 87'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 87'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 87'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 87'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 87'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 87'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 87'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 87'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 87'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 87'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 87'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state38 = 87'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 87'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 87'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state41 = 87'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state42 = 87'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state43 = 87'b1000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state44 = 87'b10000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state45 = 87'b100000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state46 = 87'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state47 = 87'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state48 = 87'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state49 = 87'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state50 = 87'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state51 = 87'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state52 = 87'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state53 = 87'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state54 = 87'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state55 = 87'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state56 = 87'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state57 = 87'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state58 = 87'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state59 = 87'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state60 = 87'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state61 = 87'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state62 = 87'b10000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state63 = 87'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state64 = 87'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state65 = 87'b10000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state66 = 87'b100000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state67 = 87'b1000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state68 = 87'b10000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state69 = 87'b100000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state70 = 87'b1000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state71 = 87'b10000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state72 = 87'b100000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state73 = 87'b1000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state74 = 87'b10000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state75 = 87'b100000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state76 = 87'b1000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state77 = 87'b10000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state78 = 87'b100000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state79 = 87'b1000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state80 = 87'b10000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state81 = 87'b100000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state82 = 87'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state83 = 87'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state84 = 87'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state85 = 87'b1000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state86 = 87'b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state87 = 87'b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv32_2B = 32'b101011;
parameter    ap_const_lv32_32 = 32'b110010;
parameter    ap_const_lv32_36 = 32'b110110;
parameter    ap_const_lv32_3D = 32'b111101;
parameter    ap_const_lv32_41 = 32'b1000001;
parameter    ap_const_lv32_48 = 32'b1001000;
parameter    ap_const_lv32_4E = 32'b1001110;
parameter    ap_const_lv32_55 = 32'b1010101;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    C_S_AXI_CFG_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CFG_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_A_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_A_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_A_BUS_DATA_WIDTH = 64;
parameter    C_M_AXI_A_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_A_BUS_USER_VALUE = 0;
parameter    C_M_AXI_A_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_A_BUS_CACHE_VALUE = 3;
parameter    C_M_AXI_PREF_WINDOW_ID_WIDTH = 1;
parameter    C_M_AXI_PREF_WINDOW_ADDR_WIDTH = 32;
parameter    C_M_AXI_PREF_WINDOW_DATA_WIDTH = 32;
parameter    C_M_AXI_PREF_WINDOW_AWUSER_WIDTH = 1;
parameter    C_M_AXI_PREF_WINDOW_ARUSER_WIDTH = 1;
parameter    C_M_AXI_PREF_WINDOW_WUSER_WIDTH = 1;
parameter    C_M_AXI_PREF_WINDOW_RUSER_WIDTH = 1;
parameter    C_M_AXI_PREF_WINDOW_BUSER_WIDTH = 1;
parameter    C_M_AXI_PREF_WINDOW_USER_VALUE = 0;
parameter    C_M_AXI_PREF_WINDOW_PROT_VALUE = 0;
parameter    C_M_AXI_PREF_WINDOW_CACHE_VALUE = 3;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_29 = 32'b101001;
parameter    ap_const_lv32_2A = 32'b101010;
parameter    ap_const_lv32_33 = 32'b110011;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_35 = 32'b110101;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv32_4A = 32'b1001010;
parameter    ap_const_lv32_4C = 32'b1001100;
parameter    ap_const_lv32_4D = 32'b1001101;
parameter    ap_const_lv26_0 = 26'b00000000000000000000000000;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv24_0 = 24'b000000000000000000000000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv32_49 = 32'b1001001;
parameter    ap_const_lv33_0 = 33'b000000000000000000000000000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv8_F = 8'b1111;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv65_147AE147B = 65'b101000111101011100001010001111011;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv65_0 = 65'b00000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv27_0 = 27'b000000000000000000000000000;
parameter    ap_const_lv26_1 = 26'b1;
parameter    ap_const_lv31_31 = 31'b110001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv31_1 = 31'b1;
parameter    ap_const_lv24_1 = 24'b1;
parameter    ap_const_lv6_31 = 6'b110001;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv25_1 = 25'b1;
parameter    ap_const_lv33_31 = 33'b110001;
parameter    ap_const_lv33_1 = 33'b1;
parameter    ap_const_lv27_1 = 27'b1;
parameter    ap_const_lv32_56 = 32'b1010110;

parameter C_S_AXI_CFG_WSTRB_WIDTH = (C_S_AXI_CFG_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_A_BUS_WSTRB_WIDTH = (C_M_AXI_A_BUS_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_PREF_WINDOW_WSTRB_WIDTH = (C_M_AXI_PREF_WINDOW_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_A_BUS_AWVALID;
input   m_axi_A_BUS_AWREADY;
output  [C_M_AXI_A_BUS_ADDR_WIDTH - 1 : 0] m_axi_A_BUS_AWADDR;
output  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_AWID;
output  [7:0] m_axi_A_BUS_AWLEN;
output  [2:0] m_axi_A_BUS_AWSIZE;
output  [1:0] m_axi_A_BUS_AWBURST;
output  [1:0] m_axi_A_BUS_AWLOCK;
output  [3:0] m_axi_A_BUS_AWCACHE;
output  [2:0] m_axi_A_BUS_AWPROT;
output  [3:0] m_axi_A_BUS_AWQOS;
output  [3:0] m_axi_A_BUS_AWREGION;
output  [C_M_AXI_A_BUS_AWUSER_WIDTH - 1 : 0] m_axi_A_BUS_AWUSER;
output   m_axi_A_BUS_WVALID;
input   m_axi_A_BUS_WREADY;
output  [C_M_AXI_A_BUS_DATA_WIDTH - 1 : 0] m_axi_A_BUS_WDATA;
output  [C_M_AXI_A_BUS_WSTRB_WIDTH - 1 : 0] m_axi_A_BUS_WSTRB;
output   m_axi_A_BUS_WLAST;
output  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_WID;
output  [C_M_AXI_A_BUS_WUSER_WIDTH - 1 : 0] m_axi_A_BUS_WUSER;
output   m_axi_A_BUS_ARVALID;
input   m_axi_A_BUS_ARREADY;
output  [C_M_AXI_A_BUS_ADDR_WIDTH - 1 : 0] m_axi_A_BUS_ARADDR;
output  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_ARID;
output  [7:0] m_axi_A_BUS_ARLEN;
output  [2:0] m_axi_A_BUS_ARSIZE;
output  [1:0] m_axi_A_BUS_ARBURST;
output  [1:0] m_axi_A_BUS_ARLOCK;
output  [3:0] m_axi_A_BUS_ARCACHE;
output  [2:0] m_axi_A_BUS_ARPROT;
output  [3:0] m_axi_A_BUS_ARQOS;
output  [3:0] m_axi_A_BUS_ARREGION;
output  [C_M_AXI_A_BUS_ARUSER_WIDTH - 1 : 0] m_axi_A_BUS_ARUSER;
input   m_axi_A_BUS_RVALID;
output   m_axi_A_BUS_RREADY;
input  [C_M_AXI_A_BUS_DATA_WIDTH - 1 : 0] m_axi_A_BUS_RDATA;
input   m_axi_A_BUS_RLAST;
input  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_RID;
input  [C_M_AXI_A_BUS_RUSER_WIDTH - 1 : 0] m_axi_A_BUS_RUSER;
input  [1:0] m_axi_A_BUS_RRESP;
input   m_axi_A_BUS_BVALID;
output   m_axi_A_BUS_BREADY;
input  [1:0] m_axi_A_BUS_BRESP;
input  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_BID;
input  [C_M_AXI_A_BUS_BUSER_WIDTH - 1 : 0] m_axi_A_BUS_BUSER;
output   m_axi_PREF_WINDOW_AWVALID;
input   m_axi_PREF_WINDOW_AWREADY;
output  [C_M_AXI_PREF_WINDOW_ADDR_WIDTH - 1 : 0] m_axi_PREF_WINDOW_AWADDR;
output  [C_M_AXI_PREF_WINDOW_ID_WIDTH - 1 : 0] m_axi_PREF_WINDOW_AWID;
output  [7:0] m_axi_PREF_WINDOW_AWLEN;
output  [2:0] m_axi_PREF_WINDOW_AWSIZE;
output  [1:0] m_axi_PREF_WINDOW_AWBURST;
output  [1:0] m_axi_PREF_WINDOW_AWLOCK;
output  [3:0] m_axi_PREF_WINDOW_AWCACHE;
output  [2:0] m_axi_PREF_WINDOW_AWPROT;
output  [3:0] m_axi_PREF_WINDOW_AWQOS;
output  [3:0] m_axi_PREF_WINDOW_AWREGION;
output  [C_M_AXI_PREF_WINDOW_AWUSER_WIDTH - 1 : 0] m_axi_PREF_WINDOW_AWUSER;
output   m_axi_PREF_WINDOW_WVALID;
input   m_axi_PREF_WINDOW_WREADY;
output  [C_M_AXI_PREF_WINDOW_DATA_WIDTH - 1 : 0] m_axi_PREF_WINDOW_WDATA;
output  [C_M_AXI_PREF_WINDOW_WSTRB_WIDTH - 1 : 0] m_axi_PREF_WINDOW_WSTRB;
output   m_axi_PREF_WINDOW_WLAST;
output  [C_M_AXI_PREF_WINDOW_ID_WIDTH - 1 : 0] m_axi_PREF_WINDOW_WID;
output  [C_M_AXI_PREF_WINDOW_WUSER_WIDTH - 1 : 0] m_axi_PREF_WINDOW_WUSER;
output   m_axi_PREF_WINDOW_ARVALID;
input   m_axi_PREF_WINDOW_ARREADY;
output  [C_M_AXI_PREF_WINDOW_ADDR_WIDTH - 1 : 0] m_axi_PREF_WINDOW_ARADDR;
output  [C_M_AXI_PREF_WINDOW_ID_WIDTH - 1 : 0] m_axi_PREF_WINDOW_ARID;
output  [7:0] m_axi_PREF_WINDOW_ARLEN;
output  [2:0] m_axi_PREF_WINDOW_ARSIZE;
output  [1:0] m_axi_PREF_WINDOW_ARBURST;
output  [1:0] m_axi_PREF_WINDOW_ARLOCK;
output  [3:0] m_axi_PREF_WINDOW_ARCACHE;
output  [2:0] m_axi_PREF_WINDOW_ARPROT;
output  [3:0] m_axi_PREF_WINDOW_ARQOS;
output  [3:0] m_axi_PREF_WINDOW_ARREGION;
output  [C_M_AXI_PREF_WINDOW_ARUSER_WIDTH - 1 : 0] m_axi_PREF_WINDOW_ARUSER;
input   m_axi_PREF_WINDOW_RVALID;
output   m_axi_PREF_WINDOW_RREADY;
input  [C_M_AXI_PREF_WINDOW_DATA_WIDTH - 1 : 0] m_axi_PREF_WINDOW_RDATA;
input   m_axi_PREF_WINDOW_RLAST;
input  [C_M_AXI_PREF_WINDOW_ID_WIDTH - 1 : 0] m_axi_PREF_WINDOW_RID;
input  [C_M_AXI_PREF_WINDOW_RUSER_WIDTH - 1 : 0] m_axi_PREF_WINDOW_RUSER;
input  [1:0] m_axi_PREF_WINDOW_RRESP;
input   m_axi_PREF_WINDOW_BVALID;
output   m_axi_PREF_WINDOW_BREADY;
input  [1:0] m_axi_PREF_WINDOW_BRESP;
input  [C_M_AXI_PREF_WINDOW_ID_WIDTH - 1 : 0] m_axi_PREF_WINDOW_BID;
input  [C_M_AXI_PREF_WINDOW_BUSER_WIDTH - 1 : 0] m_axi_PREF_WINDOW_BUSER;
input   s_axi_CFG_AWVALID;
output   s_axi_CFG_AWREADY;
input  [C_S_AXI_CFG_ADDR_WIDTH - 1 : 0] s_axi_CFG_AWADDR;
input   s_axi_CFG_WVALID;
output   s_axi_CFG_WREADY;
input  [C_S_AXI_CFG_DATA_WIDTH - 1 : 0] s_axi_CFG_WDATA;
input  [C_S_AXI_CFG_WSTRB_WIDTH - 1 : 0] s_axi_CFG_WSTRB;
input   s_axi_CFG_ARVALID;
output   s_axi_CFG_ARREADY;
input  [C_S_AXI_CFG_ADDR_WIDTH - 1 : 0] s_axi_CFG_ARADDR;
output   s_axi_CFG_RVALID;
input   s_axi_CFG_RREADY;
output  [C_S_AXI_CFG_DATA_WIDTH - 1 : 0] s_axi_CFG_RDATA;
output  [1:0] s_axi_CFG_RRESP;
output   s_axi_CFG_BVALID;
input   s_axi_CFG_BREADY;
output  [1:0] s_axi_CFG_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [86:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] a;
wire   [31:0] n;
reg    A_BUS_blk_n_AR;
wire   [0:0] ap_CS_fsm_state18;
reg    A_BUS_blk_n_R;
wire   [0:0] ap_CS_fsm_state25;
reg    A_BUS_blk_n_AW;
wire   [0:0] ap_CS_fsm_state26;
reg    A_BUS_blk_n_W;
wire   [0:0] ap_CS_fsm_state27;
reg    A_BUS_blk_n_B;
wire   [0:0] ap_CS_fsm_state32;
wire   [0:0] ap_CS_fsm_state33;
wire   [0:0] ap_CS_fsm_state40;
wire   [0:0] ap_CS_fsm_state34;
wire   [0:0] ap_CS_fsm_state41;
wire   [0:0] ap_CS_fsm_state44;
wire   [0:0] ap_CS_fsm_state51;
wire   [0:0] ap_CS_fsm_state55;
wire   [0:0] ap_CS_fsm_state62;
wire   [0:0] ap_CS_fsm_state66;
wire   [0:0] ap_CS_fsm_state73;
wire   [0:0] ap_CS_fsm_state79;
wire   [0:0] ap_CS_fsm_state86;
reg    PREF_WINDOW_blk_n_AR;
wire   [0:0] ap_CS_fsm_state2;
reg    PREF_WINDOW_blk_n_R;
wire   [0:0] ap_CS_fsm_state9;
reg    A_BUS_AWVALID;
wire    A_BUS_AWREADY;
reg    A_BUS_WVALID;
wire    A_BUS_WREADY;
wire   [63:0] A_BUS_WDATA;
reg    A_BUS_ARVALID;
wire    A_BUS_ARREADY;
reg   [31:0] A_BUS_ARADDR;
wire    A_BUS_RVALID;
reg    A_BUS_RREADY;
wire   [63:0] A_BUS_RDATA;
wire    A_BUS_RLAST;
wire   [0:0] A_BUS_RID;
wire   [0:0] A_BUS_RUSER;
wire   [1:0] A_BUS_RRESP;
wire    A_BUS_BVALID;
reg    A_BUS_BREADY;
wire   [1:0] A_BUS_BRESP;
wire   [0:0] A_BUS_BID;
wire   [0:0] A_BUS_BUSER;
wire    PREF_WINDOW_AWREADY;
wire    PREF_WINDOW_WREADY;
reg    PREF_WINDOW_ARVALID;
wire    PREF_WINDOW_ARREADY;
wire    PREF_WINDOW_RVALID;
reg    PREF_WINDOW_RREADY;
wire   [31:0] PREF_WINDOW_RDATA;
wire    PREF_WINDOW_RLAST;
wire   [0:0] PREF_WINDOW_RID;
wire   [0:0] PREF_WINDOW_RUSER;
wire   [1:0] PREF_WINDOW_RRESP;
wire    PREF_WINDOW_BVALID;
wire   [1:0] PREF_WINDOW_BRESP;
wire   [0:0] PREF_WINDOW_BID;
wire   [0:0] PREF_WINDOW_BUSER;
wire   [31:0] buff_q0;
reg   [31:0] reg_385;
reg    ap_sig_ioackin_A_BUS_ARREADY;
reg   [29:0] n3_reg_866;
reg   [28:0] a1_reg_871;
reg    ap_sig_ioackin_PREF_WINDOW_ARREADY;
wire   [0:0] ap_CS_fsm_state10;
reg   [0:0] tmp_27_reg_893;
wire   [64:0] grp_fu_437_p2;
reg   [64:0] mul6_reg_901;
wire   [0:0] ap_CS_fsm_state15;
reg   [26:0] tmp_29_reg_906;
reg   [24:0] tmp_33_reg_912;
wire   [31:0] tmp_26_fu_471_p1;
reg   [31:0] tmp_26_reg_917;
wire   [0:0] ap_CS_fsm_state16;
wire   [26:0] tmp_30_fu_501_p3;
reg   [26:0] tmp_30_reg_923;
wire   [26:0] tmp_36_fu_544_p1;
reg   [26:0] tmp_36_reg_928;
wire   [24:0] tmp_37_fu_548_p1;
reg   [24:0] tmp_37_reg_933;
wire   [31:0] i_cast4_fu_552_p1;
reg   [31:0] i_cast4_reg_948;
wire   [0:0] ap_CS_fsm_state17;
wire   [0:0] tmp_fu_560_p2;
wire   [25:0] i_1_fu_565_p2;
reg   [25:0] i_1_reg_957;
wire   [31:0] a2_sum1_fu_571_p2;
reg   [31:0] a2_sum1_reg_962;
wire   [30:0] bound_fu_579_p2;
reg   [30:0] bound_reg_967;
reg   [31:0] A_BUS_addr_reg_972;
wire   [31:0] tmp_1_fu_603_p2;
reg   [31:0] tmp_1_reg_978;
reg    ap_sig_ioackin_A_BUS_AWREADY;
wire   [15:0] grp_fu_363_p4;
reg   [15:0] tmp_7_reg_983;
reg   [15:0] tmp_17_reg_988;
wire   [31:0] cum_offs_1_fu_636_p2;
wire   [0:0] ap_CS_fsm_state42;
wire   [30:0] indvar_flatten_next_fu_656_p2;
reg   [30:0] indvar_flatten_next_reg_1001;
wire   [0:0] ap_CS_fsm_state43;
reg   [13:0] buff_addr_1_reg_1006;
wire   [0:0] exitcond_flatten_fu_651_p2;
wire   [23:0] i_3_fu_675_p2;
reg   [23:0] i_3_reg_1011;
wire   [25:0] i_2_fu_692_p3;
reg   [25:0] i_2_reg_1016;
wire   [0:0] ap_CS_fsm_state52;
wire   [0:0] exitcond2_fu_699_p2;
wire   [0:0] ap_CS_fsm_state53;
wire   [5:0] j_fu_705_p2;
reg   [5:0] j_reg_1026;
wire   [26:0] p_shl_fu_711_p3;
reg   [26:0] p_shl_reg_1031;
wire   [26:0] i_4_fu_718_p2;
reg   [26:0] i_4_reg_1038;
reg   [13:0] buff_addr_2_reg_1051;
wire   [0:0] ap_CS_fsm_state54;
wire   [0:0] tmp_6_fu_727_p2;
wire   [24:0] i_5_fu_737_p2;
reg   [24:0] i_5_reg_1056;
wire   [0:0] exitcond1_fu_754_p2;
wire   [0:0] ap_CS_fsm_state64;
wire   [5:0] j_1_fu_760_p2;
reg   [5:0] j_1_reg_1065;
wire   [0:0] tmp_38_fu_766_p2;
reg   [0:0] tmp_38_reg_1070;
reg   [13:0] buff_addr_3_reg_1078;
wire   [0:0] ap_CS_fsm_state65;
wire   [0:0] tmp_11_fu_774_p2;
wire   [25:0] i_6_fu_784_p2;
reg   [25:0] i_6_reg_1083;
wire   [0:0] ap_CS_fsm_state75;
wire   [32:0] grp_fu_815_p2;
reg   [32:0] bound5_reg_1093;
wire   [0:0] ap_CS_fsm_state77;
wire   [32:0] indvar_flatten_next8_fu_826_p2;
reg   [32:0] indvar_flatten_next8_reg_1101;
wire   [0:0] ap_CS_fsm_state78;
reg   [13:0] buff_addr_4_reg_1106;
wire   [0:0] exitcond_flatten9_fu_821_p2;
wire   [26:0] i_7_fu_849_p2;
reg   [26:0] i_7_reg_1111;
reg   [13:0] buff_address0;
reg    buff_ce0;
reg    buff_we0;
reg   [31:0] buff_d0;
reg   [25:0] i_reg_258;
reg   [31:0] cum_offs_reg_269;
reg   [30:0] indvar_flatten_reg_281;
reg   [23:0] i1_reg_292;
reg   [5:0] j2_reg_303;
wire   [0:0] ap_CS_fsm_state63;
reg   [24:0] i3_reg_314;
reg   [5:0] j4_reg_323;
wire   [0:0] ap_CS_fsm_state74;
reg   [25:0] i5_reg_334;
reg   [32:0] indvar_flatten7_reg_343;
reg   [26:0] i7_reg_354;
wire   [31:0] i1_cast3_fu_670_p1;
wire  signed [31:0] i3_cast2_fu_732_p1;
wire  signed [31:0] i5_cast1_fu_779_p1;
wire  signed [31:0] i7_cast_fu_844_p1;
wire   [31:0] grp_fu_373_p2;
wire   [31:0] tmp_14_fu_415_p1;
reg    ap_reg_ioackin_PREF_WINDOW_ARREADY;
reg    ap_reg_ioackin_A_BUS_ARREADY;
reg    ap_reg_ioackin_A_BUS_AWREADY;
reg    ap_reg_ioackin_A_BUS_WREADY;
reg    ap_sig_ioackin_A_BUS_WREADY;
reg  signed [31:0] sz_fu_170;
reg   [31:0] temp_fu_174;
wire   [31:0] temp_1_fu_591_p1;
wire   [31:0] tmp_3_fu_616_p2;
wire   [31:0] tmp_5_fu_685_p2;
wire   [31:0] tmp_10_fu_747_p2;
wire   [31:0] tmp_13_fu_794_p2;
wire   [31:0] tmp_16_fu_859_p2;
wire   [33:0] grp_fu_437_p0;
wire   [64:0] neg_mul7_fu_474_p2;
wire   [26:0] tmp_28_fu_479_p4;
wire   [26:0] p_v_v_fu_489_p3;
wire   [26:0] neg_ti1_fu_495_p2;
wire   [24:0] tmp_31_fu_507_p4;
wire  signed [31:0] tmp_32_fu_517_p1;
wire  signed [31:0] tmp_34_fu_521_p1;
wire   [31:0] tmp_35_fu_524_p3;
wire   [31:0] neg_ti_fu_531_p2;
wire   [31:0] i_9_fu_537_p3;
wire   [26:0] i_cast_fu_556_p1;
wire   [24:0] bound_fu_579_p0;
wire  signed [31:0] tmp_2_fu_613_p1;
wire  signed [31:0] tmp_4_fu_633_p1;
wire   [24:0] i1_cast_fu_642_p1;
wire   [0:0] tmp_8_fu_646_p2;
wire   [23:0] i1_mid2_fu_662_p3;
wire  signed [31:0] tmp_s_fu_681_p1;
wire  signed [25:0] i3_cast_fu_723_p1;
wire  signed [31:0] tmp_9_fu_743_p1;
wire  signed [26:0] i5_cast_fu_770_p1;
wire  signed [31:0] tmp_12_fu_790_p1;
wire   [26:0] smax_fu_801_p3;
wire   [26:0] tmp_39_fu_806_p2;
wire   [26:0] grp_fu_815_p0;
wire   [6:0] grp_fu_815_p1;
wire   [0:0] tmp_40_fu_832_p2;
wire   [26:0] i7_mid2_fu_837_p3;
wire  signed [31:0] tmp_15_fu_855_p1;
wire   [0:0] ap_CS_fsm_state87;
reg   [86:0] ap_NS_fsm;
wire   [30:0] bound_fu_579_p00;
wire   [32:0] grp_fu_815_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 87'b1;
#0 ap_reg_ioackin_PREF_WINDOW_ARREADY = 1'b0;
#0 ap_reg_ioackin_A_BUS_ARREADY = 1'b0;
#0 ap_reg_ioackin_A_BUS_AWREADY = 1'b0;
#0 ap_reg_ioackin_A_BUS_WREADY = 1'b0;
end

skipprefetch_Nelem_CFG_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CFG_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CFG_DATA_WIDTH ))
skipprefetch_Nelem_CFG_s_axi_U(
    .AWVALID(s_axi_CFG_AWVALID),
    .AWREADY(s_axi_CFG_AWREADY),
    .AWADDR(s_axi_CFG_AWADDR),
    .WVALID(s_axi_CFG_WVALID),
    .WREADY(s_axi_CFG_WREADY),
    .WDATA(s_axi_CFG_WDATA),
    .WSTRB(s_axi_CFG_WSTRB),
    .ARVALID(s_axi_CFG_ARVALID),
    .ARREADY(s_axi_CFG_ARREADY),
    .ARADDR(s_axi_CFG_ARADDR),
    .RVALID(s_axi_CFG_RVALID),
    .RREADY(s_axi_CFG_RREADY),
    .RDATA(s_axi_CFG_RDATA),
    .RRESP(s_axi_CFG_RRESP),
    .BVALID(s_axi_CFG_BVALID),
    .BREADY(s_axi_CFG_BREADY),
    .BRESP(s_axi_CFG_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .a(a),
    .n(n)
);

skipprefetch_Nelem_A_BUS_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_A_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_A_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_A_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_A_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_A_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_A_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_A_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_A_BUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_A_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_A_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_A_BUS_CACHE_VALUE ))
skipprefetch_Nelem_A_BUS_m_axi_U(
    .AWVALID(m_axi_A_BUS_AWVALID),
    .AWREADY(m_axi_A_BUS_AWREADY),
    .AWADDR(m_axi_A_BUS_AWADDR),
    .AWID(m_axi_A_BUS_AWID),
    .AWLEN(m_axi_A_BUS_AWLEN),
    .AWSIZE(m_axi_A_BUS_AWSIZE),
    .AWBURST(m_axi_A_BUS_AWBURST),
    .AWLOCK(m_axi_A_BUS_AWLOCK),
    .AWCACHE(m_axi_A_BUS_AWCACHE),
    .AWPROT(m_axi_A_BUS_AWPROT),
    .AWQOS(m_axi_A_BUS_AWQOS),
    .AWREGION(m_axi_A_BUS_AWREGION),
    .AWUSER(m_axi_A_BUS_AWUSER),
    .WVALID(m_axi_A_BUS_WVALID),
    .WREADY(m_axi_A_BUS_WREADY),
    .WDATA(m_axi_A_BUS_WDATA),
    .WSTRB(m_axi_A_BUS_WSTRB),
    .WLAST(m_axi_A_BUS_WLAST),
    .WID(m_axi_A_BUS_WID),
    .WUSER(m_axi_A_BUS_WUSER),
    .ARVALID(m_axi_A_BUS_ARVALID),
    .ARREADY(m_axi_A_BUS_ARREADY),
    .ARADDR(m_axi_A_BUS_ARADDR),
    .ARID(m_axi_A_BUS_ARID),
    .ARLEN(m_axi_A_BUS_ARLEN),
    .ARSIZE(m_axi_A_BUS_ARSIZE),
    .ARBURST(m_axi_A_BUS_ARBURST),
    .ARLOCK(m_axi_A_BUS_ARLOCK),
    .ARCACHE(m_axi_A_BUS_ARCACHE),
    .ARPROT(m_axi_A_BUS_ARPROT),
    .ARQOS(m_axi_A_BUS_ARQOS),
    .ARREGION(m_axi_A_BUS_ARREGION),
    .ARUSER(m_axi_A_BUS_ARUSER),
    .RVALID(m_axi_A_BUS_RVALID),
    .RREADY(m_axi_A_BUS_RREADY),
    .RDATA(m_axi_A_BUS_RDATA),
    .RLAST(m_axi_A_BUS_RLAST),
    .RID(m_axi_A_BUS_RID),
    .RUSER(m_axi_A_BUS_RUSER),
    .RRESP(m_axi_A_BUS_RRESP),
    .BVALID(m_axi_A_BUS_BVALID),
    .BREADY(m_axi_A_BUS_BREADY),
    .BRESP(m_axi_A_BUS_BRESP),
    .BID(m_axi_A_BUS_BID),
    .BUSER(m_axi_A_BUS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(A_BUS_ARVALID),
    .I_ARREADY(A_BUS_ARREADY),
    .I_ARADDR(A_BUS_ARADDR),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_1),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(A_BUS_RVALID),
    .I_RREADY(A_BUS_RREADY),
    .I_RDATA(A_BUS_RDATA),
    .I_RID(A_BUS_RID),
    .I_RUSER(A_BUS_RUSER),
    .I_RRESP(A_BUS_RRESP),
    .I_RLAST(A_BUS_RLAST),
    .I_AWVALID(A_BUS_AWVALID),
    .I_AWREADY(A_BUS_AWREADY),
    .I_AWADDR(A_BUS_addr_reg_972),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_1),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(A_BUS_WVALID),
    .I_WREADY(A_BUS_WREADY),
    .I_WDATA(A_BUS_WDATA),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(ap_const_lv8_F),
    .I_BVALID(A_BUS_BVALID),
    .I_BREADY(A_BUS_BREADY),
    .I_BRESP(A_BUS_BRESP),
    .I_BID(A_BUS_BID),
    .I_BUSER(A_BUS_BUSER)
);

skipprefetch_Nelem_PREF_WINDOW_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_PREF_WINDOW_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_PREF_WINDOW_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_PREF_WINDOW_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_PREF_WINDOW_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_PREF_WINDOW_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_PREF_WINDOW_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_PREF_WINDOW_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_PREF_WINDOW_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_PREF_WINDOW_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_PREF_WINDOW_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_PREF_WINDOW_CACHE_VALUE ))
skipprefetch_Nelem_PREF_WINDOW_m_axi_U(
    .AWVALID(m_axi_PREF_WINDOW_AWVALID),
    .AWREADY(m_axi_PREF_WINDOW_AWREADY),
    .AWADDR(m_axi_PREF_WINDOW_AWADDR),
    .AWID(m_axi_PREF_WINDOW_AWID),
    .AWLEN(m_axi_PREF_WINDOW_AWLEN),
    .AWSIZE(m_axi_PREF_WINDOW_AWSIZE),
    .AWBURST(m_axi_PREF_WINDOW_AWBURST),
    .AWLOCK(m_axi_PREF_WINDOW_AWLOCK),
    .AWCACHE(m_axi_PREF_WINDOW_AWCACHE),
    .AWPROT(m_axi_PREF_WINDOW_AWPROT),
    .AWQOS(m_axi_PREF_WINDOW_AWQOS),
    .AWREGION(m_axi_PREF_WINDOW_AWREGION),
    .AWUSER(m_axi_PREF_WINDOW_AWUSER),
    .WVALID(m_axi_PREF_WINDOW_WVALID),
    .WREADY(m_axi_PREF_WINDOW_WREADY),
    .WDATA(m_axi_PREF_WINDOW_WDATA),
    .WSTRB(m_axi_PREF_WINDOW_WSTRB),
    .WLAST(m_axi_PREF_WINDOW_WLAST),
    .WID(m_axi_PREF_WINDOW_WID),
    .WUSER(m_axi_PREF_WINDOW_WUSER),
    .ARVALID(m_axi_PREF_WINDOW_ARVALID),
    .ARREADY(m_axi_PREF_WINDOW_ARREADY),
    .ARADDR(m_axi_PREF_WINDOW_ARADDR),
    .ARID(m_axi_PREF_WINDOW_ARID),
    .ARLEN(m_axi_PREF_WINDOW_ARLEN),
    .ARSIZE(m_axi_PREF_WINDOW_ARSIZE),
    .ARBURST(m_axi_PREF_WINDOW_ARBURST),
    .ARLOCK(m_axi_PREF_WINDOW_ARLOCK),
    .ARCACHE(m_axi_PREF_WINDOW_ARCACHE),
    .ARPROT(m_axi_PREF_WINDOW_ARPROT),
    .ARQOS(m_axi_PREF_WINDOW_ARQOS),
    .ARREGION(m_axi_PREF_WINDOW_ARREGION),
    .ARUSER(m_axi_PREF_WINDOW_ARUSER),
    .RVALID(m_axi_PREF_WINDOW_RVALID),
    .RREADY(m_axi_PREF_WINDOW_RREADY),
    .RDATA(m_axi_PREF_WINDOW_RDATA),
    .RLAST(m_axi_PREF_WINDOW_RLAST),
    .RID(m_axi_PREF_WINDOW_RID),
    .RUSER(m_axi_PREF_WINDOW_RUSER),
    .RRESP(m_axi_PREF_WINDOW_RRESP),
    .BVALID(m_axi_PREF_WINDOW_BVALID),
    .BREADY(m_axi_PREF_WINDOW_BREADY),
    .BRESP(m_axi_PREF_WINDOW_BRESP),
    .BID(m_axi_PREF_WINDOW_BID),
    .BUSER(m_axi_PREF_WINDOW_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(PREF_WINDOW_ARVALID),
    .I_ARREADY(PREF_WINDOW_ARREADY),
    .I_ARADDR(tmp_14_fu_415_p1),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_1),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(PREF_WINDOW_RVALID),
    .I_RREADY(PREF_WINDOW_RREADY),
    .I_RDATA(PREF_WINDOW_RDATA),
    .I_RID(PREF_WINDOW_RID),
    .I_RUSER(PREF_WINDOW_RUSER),
    .I_RRESP(PREF_WINDOW_RRESP),
    .I_RLAST(PREF_WINDOW_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(PREF_WINDOW_AWREADY),
    .I_AWADDR(ap_const_lv32_0),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_0),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(1'b0),
    .I_WREADY(PREF_WINDOW_WREADY),
    .I_WDATA(ap_const_lv32_0),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(ap_const_lv4_0),
    .I_BVALID(PREF_WINDOW_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(PREF_WINDOW_BRESP),
    .I_BID(PREF_WINDOW_BID),
    .I_BUSER(PREF_WINDOW_BUSER)
);

skipprefetch_Nelebkb #(
    .DataWidth( 32 ),
    .AddressRange( 10000 ),
    .AddressWidth( 14 ))
buff_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buff_address0),
    .ce0(buff_ce0),
    .we0(buff_we0),
    .d0(buff_d0),
    .q0(buff_q0)
);

skipprefetch_Nelecud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 34 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 65 ))
skipprefetch_Nelecud_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_437_p0),
    .din1(sz_fu_170),
    .ce(1'b1),
    .dout(grp_fu_437_p2)
);

skipprefetch_NeledEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 27 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 33 ))
skipprefetch_NeledEe_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_815_p0),
    .din1(grp_fu_815_p1),
    .ce(1'b1),
    .dout(grp_fu_815_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_A_BUS_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state44) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state55) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state66) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state79) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state18) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state33) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state34) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
            ap_reg_ioackin_A_BUS_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state18) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state33) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state34) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state44) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state55) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state66) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state79) & (1'b1 == A_BUS_ARREADY)))) begin
            ap_reg_ioackin_A_BUS_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_A_BUS_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state26)) begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_AWREADY)) begin
                ap_reg_ioackin_A_BUS_AWREADY <= 1'b0;
            end else if ((1'b1 == A_BUS_AWREADY)) begin
                ap_reg_ioackin_A_BUS_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_A_BUS_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state27)) begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_WREADY)) begin
                ap_reg_ioackin_A_BUS_WREADY <= 1'b0;
            end else if ((1'b1 == A_BUS_WREADY)) begin
                ap_reg_ioackin_A_BUS_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_PREF_WINDOW_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if (~(1'b0 == ap_sig_ioackin_PREF_WINDOW_ARREADY)) begin
                ap_reg_ioackin_PREF_WINDOW_ARREADY <= 1'b0;
            end else if ((1'b1 == PREF_WINDOW_ARREADY)) begin
                ap_reg_ioackin_PREF_WINDOW_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        cum_offs_reg_269 <= cum_offs_1_fu_636_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        cum_offs_reg_269 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) & ~(A_BUS_RVALID == 1'b0))) begin
        i1_reg_292 <= i_3_reg_1011;
    end else if (((1'b1 == ap_CS_fsm_state17) & (tmp_fu_560_p2 == 1'b0))) begin
        i1_reg_292 <= ap_const_lv24_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) & (1'b0 == exitcond2_fu_699_p2))) begin
        i3_reg_314 <= tmp_37_reg_933;
    end else if (((1'b1 == ap_CS_fsm_state62) & ~(A_BUS_RVALID == 1'b0))) begin
        i3_reg_314 <= i_5_reg_1056;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state64) & (1'b0 == exitcond1_fu_754_p2))) begin
        i5_reg_334 <= i_2_reg_1016;
    end else if (((1'b1 == ap_CS_fsm_state73) & ~(A_BUS_RVALID == 1'b0))) begin
        i5_reg_334 <= i_6_reg_1083;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state86) & ~(A_BUS_RVALID == 1'b0))) begin
        i7_reg_354 <= i_7_reg_1111;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        i7_reg_354 <= i_4_reg_1038;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        i_reg_258 <= i_1_reg_957;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i_reg_258 <= ap_const_lv26_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state86) & ~(A_BUS_RVALID == 1'b0))) begin
        indvar_flatten7_reg_343 <= indvar_flatten_next8_reg_1101;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        indvar_flatten7_reg_343 <= ap_const_lv33_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) & ~(A_BUS_RVALID == 1'b0))) begin
        indvar_flatten_reg_281 <= indvar_flatten_next_reg_1001;
    end else if (((1'b1 == ap_CS_fsm_state17) & (tmp_fu_560_p2 == 1'b0))) begin
        indvar_flatten_reg_281 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        j2_reg_303 <= j_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        j2_reg_303 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        j4_reg_323 <= j_1_reg_1065;
    end else if (((1'b1 == ap_CS_fsm_state53) & ~(1'b0 == exitcond2_fu_699_p2))) begin
        j4_reg_323 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
        A_BUS_addr_reg_972 <= a2_sum1_reg_962;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        a1_reg_871 <= {{a[ap_const_lv32_1F : ap_const_lv32_3]}};
        n3_reg_866 <= {{n[ap_const_lv32_1F : ap_const_lv32_2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & ~(tmp_fu_560_p2 == 1'b0))) begin
        a2_sum1_reg_962 <= a2_sum1_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        bound5_reg_1093 <= grp_fu_815_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (tmp_fu_560_p2 == 1'b0))) begin
        bound_reg_967 <= bound_fu_579_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (1'b0 == exitcond_flatten_fu_651_p2))) begin
        buff_addr_1_reg_1006 <= i1_cast3_fu_670_p1;
        i_3_reg_1011 <= i_3_fu_675_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) & ~(1'b0 == tmp_6_fu_727_p2))) begin
        buff_addr_2_reg_1051 <= i3_cast2_fu_732_p1;
        i_5_reg_1056 <= i_5_fu_737_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state65) & ~(1'b0 == tmp_11_fu_774_p2))) begin
        buff_addr_3_reg_1078 <= i5_cast1_fu_779_p1;
        i_6_reg_1083 <= i_6_fu_784_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state78) & (1'b0 == exitcond_flatten9_fu_821_p2))) begin
        buff_addr_4_reg_1106 <= i7_cast_fu_844_p1;
        i_7_reg_1111 <= i_7_fu_849_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_1_reg_957 <= i_1_fu_565_p2;
        i_cast4_reg_948[25 : 0] <= i_cast4_fu_552_p1[25 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        i_2_reg_1016[25 : 1] <= i_2_fu_692_p3[25 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) & ~(1'b0 == exitcond2_fu_699_p2))) begin
        i_4_reg_1038 <= i_4_fu_718_p2;
        p_shl_reg_1031[26 : 2] <= p_shl_fu_711_p3[26 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        indvar_flatten_next8_reg_1101 <= indvar_flatten_next8_fu_826_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        indvar_flatten_next_reg_1001 <= indvar_flatten_next_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        j_1_reg_1065 <= j_1_fu_760_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        j_reg_1026 <= j_fu_705_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        mul6_reg_901 <= grp_fu_437_p2;
        tmp_29_reg_906 <= {{grp_fu_437_p2[ap_const_lv32_40 : ap_const_lv32_26]}};
        tmp_33_reg_912 <= {{grp_fu_437_p2[ap_const_lv32_40 : ap_const_lv32_28]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state44) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state55) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state66) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state79) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        reg_385 <= buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(PREF_WINDOW_RVALID == 1'b0))) begin
        sz_fu_170 <= PREF_WINDOW_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & ~(A_BUS_RVALID == 1'b0))) begin
        temp_fu_174 <= temp_1_fu_591_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) & ~(A_BUS_RVALID == 1'b0))) begin
        tmp_17_reg_988 <= {{A_BUS_RDATA[ap_const_lv32_3F : ap_const_lv32_30]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & ~(1'b0 == ap_sig_ioackin_A_BUS_AWREADY))) begin
        tmp_1_reg_978 <= tmp_1_fu_603_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_26_reg_917[28 : 0] <= tmp_26_fu_471_p1[28 : 0];
        tmp_30_reg_923 <= tmp_30_fu_501_p3;
        tmp_36_reg_928 <= tmp_36_fu_544_p1;
        tmp_37_reg_933 <= tmp_37_fu_548_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_27_reg_893 <= sz_fu_170[ap_const_lv32_1F];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state64) & ~(1'b0 == exitcond1_fu_754_p2))) begin
        tmp_38_reg_1070 <= tmp_38_fu_766_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & ~(A_BUS_RVALID == 1'b0))) begin
        tmp_7_reg_983 <= {{A_BUS_RDATA[ap_const_lv32_2F : ap_const_lv32_20]}};
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state44) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state55) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state66) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state79) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)))) begin
        A_BUS_ARADDR = grp_fu_373_p2;
    end else if ((((1'b1 == ap_CS_fsm_state33) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state34) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)))) begin
        A_BUS_ARADDR = A_BUS_addr_reg_972;
    end else if (((1'b1 == ap_CS_fsm_state18) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY))) begin
        A_BUS_ARADDR = a2_sum1_reg_962;
    end else begin
        A_BUS_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state18) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state33) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state34) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state44) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state55) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state66) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state79) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)))) begin
        A_BUS_ARVALID = 1'b1;
    end else begin
        A_BUS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & (1'b0 == ap_reg_ioackin_A_BUS_AWREADY))) begin
        A_BUS_AWVALID = 1'b1;
    end else begin
        A_BUS_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) & ~(A_BUS_BVALID == 1'b0))) begin
        A_BUS_BREADY = 1'b1;
    end else begin
        A_BUS_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state40) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state41) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state51) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state62) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state73) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state86) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state25) & ~(A_BUS_RVALID == 1'b0)))) begin
        A_BUS_RREADY = 1'b1;
    end else begin
        A_BUS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (1'b0 == ap_reg_ioackin_A_BUS_WREADY))) begin
        A_BUS_WVALID = 1'b1;
    end else begin
        A_BUS_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state79))) begin
        A_BUS_blk_n_AR = m_axi_A_BUS_ARREADY;
    end else begin
        A_BUS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        A_BUS_blk_n_AW = m_axi_A_BUS_AWREADY;
    end else begin
        A_BUS_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        A_BUS_blk_n_B = m_axi_A_BUS_BVALID;
    end else begin
        A_BUS_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state86))) begin
        A_BUS_blk_n_R = m_axi_A_BUS_RVALID;
    end else begin
        A_BUS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        A_BUS_blk_n_W = m_axi_A_BUS_WREADY;
    end else begin
        A_BUS_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_reg_ioackin_PREF_WINDOW_ARREADY))) begin
        PREF_WINDOW_ARVALID = 1'b1;
    end else begin
        PREF_WINDOW_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(PREF_WINDOW_RVALID == 1'b0))) begin
        PREF_WINDOW_RREADY = 1'b1;
    end else begin
        PREF_WINDOW_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        PREF_WINDOW_blk_n_AR = m_axi_PREF_WINDOW_ARREADY;
    end else begin
        PREF_WINDOW_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        PREF_WINDOW_blk_n_R = m_axi_PREF_WINDOW_RVALID;
    end else begin
        PREF_WINDOW_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) begin
        ap_sig_ioackin_A_BUS_ARREADY = A_BUS_ARREADY;
    end else begin
        ap_sig_ioackin_A_BUS_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_A_BUS_AWREADY)) begin
        ap_sig_ioackin_A_BUS_AWREADY = A_BUS_AWREADY;
    end else begin
        ap_sig_ioackin_A_BUS_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_A_BUS_WREADY)) begin
        ap_sig_ioackin_A_BUS_WREADY = A_BUS_WREADY;
    end else begin
        ap_sig_ioackin_A_BUS_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_PREF_WINDOW_ARREADY)) begin
        ap_sig_ioackin_PREF_WINDOW_ARREADY = PREF_WINDOW_ARREADY;
    end else begin
        ap_sig_ioackin_PREF_WINDOW_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        buff_address0 = buff_addr_4_reg_1106;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        buff_address0 = i7_cast_fu_844_p1;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        buff_address0 = buff_addr_3_reg_1078;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        buff_address0 = i5_cast1_fu_779_p1;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        buff_address0 = buff_addr_2_reg_1051;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        buff_address0 = i3_cast2_fu_732_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        buff_address0 = buff_addr_1_reg_1006;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        buff_address0 = i1_cast3_fu_670_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        buff_address0 = i_cast4_reg_948;
    end else begin
        buff_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state41) & ~(A_BUS_RVALID == 1'b0)) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state78) | ((1'b1 == ap_CS_fsm_state51) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state62) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state73) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state86) & ~(A_BUS_RVALID == 1'b0)))) begin
        buff_ce0 = 1'b1;
    end else begin
        buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        buff_d0 = tmp_16_fu_859_p2;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        buff_d0 = tmp_13_fu_794_p2;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        buff_d0 = tmp_10_fu_747_p2;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        buff_d0 = tmp_5_fu_685_p2;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        buff_d0 = tmp_3_fu_616_p2;
    end else begin
        buff_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state41) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state51) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state62) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state73) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state86) & ~(A_BUS_RVALID == 1'b0)))) begin
        buff_we0 = 1'b1;
    end else begin
        buff_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == ap_sig_ioackin_PREF_WINDOW_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (~(PREF_WINDOW_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if ((tmp_fu_560_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_AWREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_WREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (~(A_BUS_BVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state43 : begin
            if ((1'b0 == exitcond_flatten_fu_651_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state44 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (~(1'b0 == exitcond2_fu_699_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state54 : begin
            if (~(1'b0 == tmp_6_fu_727_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state55 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state64 : begin
            if ((1'b0 == exitcond1_fu_754_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state65 : begin
            if (~(1'b0 == tmp_11_fu_774_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state66 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            if ((1'b0 == exitcond_flatten9_fu_821_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        ap_ST_fsm_state79 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_BUS_WDATA = tmp_1_reg_978;

assign a2_sum1_fu_571_p2 = (cum_offs_reg_269 + tmp_26_reg_917);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state32 = ap_CS_fsm[ap_const_lv32_1F];

assign ap_CS_fsm_state33 = ap_CS_fsm[ap_const_lv32_20];

assign ap_CS_fsm_state34 = ap_CS_fsm[ap_const_lv32_21];

assign ap_CS_fsm_state40 = ap_CS_fsm[ap_const_lv32_27];

assign ap_CS_fsm_state41 = ap_CS_fsm[ap_const_lv32_28];

assign ap_CS_fsm_state42 = ap_CS_fsm[ap_const_lv32_29];

assign ap_CS_fsm_state43 = ap_CS_fsm[ap_const_lv32_2A];

assign ap_CS_fsm_state44 = ap_CS_fsm[ap_const_lv32_2B];

assign ap_CS_fsm_state51 = ap_CS_fsm[ap_const_lv32_32];

assign ap_CS_fsm_state52 = ap_CS_fsm[ap_const_lv32_33];

assign ap_CS_fsm_state53 = ap_CS_fsm[ap_const_lv32_34];

assign ap_CS_fsm_state54 = ap_CS_fsm[ap_const_lv32_35];

assign ap_CS_fsm_state55 = ap_CS_fsm[ap_const_lv32_36];

assign ap_CS_fsm_state62 = ap_CS_fsm[ap_const_lv32_3D];

assign ap_CS_fsm_state63 = ap_CS_fsm[ap_const_lv32_3E];

assign ap_CS_fsm_state64 = ap_CS_fsm[ap_const_lv32_3F];

assign ap_CS_fsm_state65 = ap_CS_fsm[ap_const_lv32_40];

assign ap_CS_fsm_state66 = ap_CS_fsm[ap_const_lv32_41];

assign ap_CS_fsm_state73 = ap_CS_fsm[ap_const_lv32_48];

assign ap_CS_fsm_state74 = ap_CS_fsm[ap_const_lv32_49];

assign ap_CS_fsm_state75 = ap_CS_fsm[ap_const_lv32_4A];

assign ap_CS_fsm_state77 = ap_CS_fsm[ap_const_lv32_4C];

assign ap_CS_fsm_state78 = ap_CS_fsm[ap_const_lv32_4D];

assign ap_CS_fsm_state79 = ap_CS_fsm[ap_const_lv32_4E];

assign ap_CS_fsm_state86 = ap_CS_fsm[ap_const_lv32_55];

assign ap_CS_fsm_state87 = ap_CS_fsm[ap_const_lv32_56];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bound_fu_579_p0 = bound_fu_579_p00;

assign bound_fu_579_p00 = tmp_37_reg_933;

assign bound_fu_579_p2 = (bound_fu_579_p0 * $signed('h31));

assign cum_offs_1_fu_636_p2 = ($signed(cum_offs_reg_269) + $signed(tmp_4_fu_633_p1));

assign exitcond1_fu_754_p2 = ((j4_reg_323 == ap_const_lv6_31) ? 1'b1 : 1'b0);

assign exitcond2_fu_699_p2 = ((j2_reg_303 == ap_const_lv6_31) ? 1'b1 : 1'b0);

assign exitcond_flatten9_fu_821_p2 = ((indvar_flatten7_reg_343 == bound5_reg_1093) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_651_p2 = ((indvar_flatten_reg_281 == bound_reg_967) ? 1'b1 : 1'b0);

assign grp_fu_363_p4 = {{A_BUS_RDATA[ap_const_lv32_2F : ap_const_lv32_20]}};

assign grp_fu_373_p2 = (tmp_26_reg_917 + buff_q0);

assign grp_fu_437_p0 = ap_const_lv65_147AE147B;

assign grp_fu_815_p0 = grp_fu_815_p00;

assign grp_fu_815_p00 = tmp_39_fu_806_p2;

assign grp_fu_815_p1 = ap_const_lv33_31;

assign i1_cast3_fu_670_p1 = i1_mid2_fu_662_p3;

assign i1_cast_fu_642_p1 = i1_reg_292;

assign i1_mid2_fu_662_p3 = ((tmp_8_fu_646_p2[0:0] === 1'b1) ? i1_reg_292 : ap_const_lv24_0);

assign i3_cast2_fu_732_p1 = $signed(i3_reg_314);

assign i3_cast_fu_723_p1 = $signed(i3_reg_314);

assign i5_cast1_fu_779_p1 = $signed(i5_reg_334);

assign i5_cast_fu_770_p1 = $signed(i5_reg_334);

assign i7_cast_fu_844_p1 = $signed(i7_mid2_fu_837_p3);

assign i7_mid2_fu_837_p3 = ((tmp_40_fu_832_p2[0:0] === 1'b1) ? i7_reg_354 : i_4_reg_1038);

assign i_1_fu_565_p2 = (i_reg_258 + ap_const_lv26_1);

assign i_2_fu_692_p3 = {{tmp_37_reg_933}, {1'b0}};

assign i_3_fu_675_p2 = (i1_mid2_fu_662_p3 + ap_const_lv24_1);

assign i_4_fu_718_p2 = (p_shl_fu_711_p3 - tmp_36_reg_928);

assign i_5_fu_737_p2 = (i3_reg_314 + ap_const_lv25_1);

assign i_6_fu_784_p2 = (i5_reg_334 + ap_const_lv26_1);

assign i_7_fu_849_p2 = (i7_mid2_fu_837_p3 + ap_const_lv27_1);

assign i_9_fu_537_p3 = ((tmp_27_reg_893[0:0] === 1'b1) ? neg_ti_fu_531_p2 : tmp_34_fu_521_p1);

assign i_cast4_fu_552_p1 = i_reg_258;

assign i_cast_fu_556_p1 = i_reg_258;

assign indvar_flatten_next8_fu_826_p2 = (indvar_flatten7_reg_343 + ap_const_lv33_1);

assign indvar_flatten_next_fu_656_p2 = (indvar_flatten_reg_281 + ap_const_lv31_1);

assign j_1_fu_760_p2 = (j4_reg_323 + ap_const_lv6_1);

assign j_fu_705_p2 = (j2_reg_303 + ap_const_lv6_1);

assign neg_mul7_fu_474_p2 = (ap_const_lv65_0 - mul6_reg_901);

assign neg_ti1_fu_495_p2 = (ap_const_lv27_0 - p_v_v_fu_489_p3);

assign neg_ti_fu_531_p2 = (ap_const_lv32_0 - tmp_35_fu_524_p3);

assign p_shl_fu_711_p3 = {{tmp_37_reg_933}, {ap_const_lv2_0}};

assign p_v_v_fu_489_p3 = ((tmp_27_reg_893[0:0] === 1'b1) ? tmp_28_fu_479_p4 : tmp_29_reg_906);

assign smax_fu_801_p3 = ((tmp_38_reg_1070[0:0] === 1'b1) ? p_shl_reg_1031 : i_4_reg_1038);

assign temp_1_fu_591_p1 = A_BUS_RDATA[31:0];

assign tmp_10_fu_747_p2 = ($signed(reg_385) + $signed(tmp_9_fu_743_p1));

assign tmp_11_fu_774_p2 = (($signed(i5_cast_fu_770_p1) < $signed(i_4_reg_1038)) ? 1'b1 : 1'b0);

assign tmp_12_fu_790_p1 = $signed(grp_fu_363_p4);

assign tmp_13_fu_794_p2 = ($signed(reg_385) + $signed(tmp_12_fu_790_p1));

assign tmp_14_fu_415_p1 = n3_reg_866;

assign tmp_15_fu_855_p1 = $signed(grp_fu_363_p4);

assign tmp_16_fu_859_p2 = ($signed(reg_385) + $signed(tmp_15_fu_855_p1));

assign tmp_1_fu_603_p2 = (ap_const_lv32_A + temp_fu_174);

assign tmp_26_fu_471_p1 = a1_reg_871;

assign tmp_28_fu_479_p4 = {{neg_mul7_fu_474_p2[ap_const_lv32_40 : ap_const_lv32_26]}};

assign tmp_2_fu_613_p1 = $signed(tmp_7_reg_983);

assign tmp_30_fu_501_p3 = ((tmp_27_reg_893[0:0] === 1'b1) ? neg_ti1_fu_495_p2 : tmp_29_reg_906);

assign tmp_31_fu_507_p4 = {{neg_mul7_fu_474_p2[ap_const_lv32_40 : ap_const_lv32_28]}};

assign tmp_32_fu_517_p1 = $signed(tmp_31_fu_507_p4);

assign tmp_34_fu_521_p1 = $signed(tmp_33_reg_912);

assign tmp_35_fu_524_p3 = ((tmp_27_reg_893[0:0] === 1'b1) ? tmp_32_fu_517_p1 : tmp_34_fu_521_p1);

assign tmp_36_fu_544_p1 = i_9_fu_537_p3[26:0];

assign tmp_37_fu_548_p1 = i_9_fu_537_p3[24:0];

assign tmp_38_fu_766_p2 = (($signed(p_shl_reg_1031) > $signed(i_4_reg_1038)) ? 1'b1 : 1'b0);

assign tmp_39_fu_806_p2 = (smax_fu_801_p3 - i_4_reg_1038);

assign tmp_3_fu_616_p2 = ($signed(tmp_2_fu_613_p1) + $signed(cum_offs_reg_269));

assign tmp_40_fu_832_p2 = (($signed(i7_reg_354) < $signed(p_shl_reg_1031)) ? 1'b1 : 1'b0);

assign tmp_4_fu_633_p1 = $signed(tmp_17_reg_988);

assign tmp_5_fu_685_p2 = ($signed(reg_385) + $signed(tmp_s_fu_681_p1));

assign tmp_6_fu_727_p2 = (($signed(i3_cast_fu_723_p1) < $signed(i_2_reg_1016)) ? 1'b1 : 1'b0);

assign tmp_8_fu_646_p2 = (($signed(i1_cast_fu_642_p1) < $signed(tmp_37_reg_933)) ? 1'b1 : 1'b0);

assign tmp_9_fu_743_p1 = $signed(grp_fu_363_p4);

assign tmp_fu_560_p2 = (($signed(i_cast_fu_556_p1) < $signed(tmp_30_reg_923)) ? 1'b1 : 1'b0);

assign tmp_s_fu_681_p1 = $signed(grp_fu_363_p4);

always @ (posedge ap_clk) begin
    tmp_26_reg_917[31:29] <= 3'b000;
    i_cast4_reg_948[31:26] <= 6'b000000;
    i_2_reg_1016[0] <= 1'b0;
    p_shl_reg_1031[1:0] <= 2'b00;
end

endmodule //skipprefetch_Nelem
