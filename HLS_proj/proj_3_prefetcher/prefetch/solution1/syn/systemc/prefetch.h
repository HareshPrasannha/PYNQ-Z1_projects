// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _prefetch_HH_
#define _prefetch_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "prefetch_AXILiteS_s_axi.h"
#include "prefetch_SOURCE_BUS_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_SOURCE_BUS_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_SOURCE_BUS_ID_WIDTH = 1,
         unsigned int C_M_AXI_SOURCE_BUS_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_SOURCE_BUS_DATA_WIDTH = 32,
         unsigned int C_M_AXI_SOURCE_BUS_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_SOURCE_BUS_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_SOURCE_BUS_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_SOURCE_BUS_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct prefetch : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_SOURCE_BUS_AWVALID;
    sc_in< sc_logic > m_axi_SOURCE_BUS_AWREADY;
    sc_out< sc_uint<C_M_AXI_SOURCE_BUS_ADDR_WIDTH> > m_axi_SOURCE_BUS_AWADDR;
    sc_out< sc_uint<C_M_AXI_SOURCE_BUS_ID_WIDTH> > m_axi_SOURCE_BUS_AWID;
    sc_out< sc_lv<8> > m_axi_SOURCE_BUS_AWLEN;
    sc_out< sc_lv<3> > m_axi_SOURCE_BUS_AWSIZE;
    sc_out< sc_lv<2> > m_axi_SOURCE_BUS_AWBURST;
    sc_out< sc_lv<2> > m_axi_SOURCE_BUS_AWLOCK;
    sc_out< sc_lv<4> > m_axi_SOURCE_BUS_AWCACHE;
    sc_out< sc_lv<3> > m_axi_SOURCE_BUS_AWPROT;
    sc_out< sc_lv<4> > m_axi_SOURCE_BUS_AWQOS;
    sc_out< sc_lv<4> > m_axi_SOURCE_BUS_AWREGION;
    sc_out< sc_uint<C_M_AXI_SOURCE_BUS_AWUSER_WIDTH> > m_axi_SOURCE_BUS_AWUSER;
    sc_out< sc_logic > m_axi_SOURCE_BUS_WVALID;
    sc_in< sc_logic > m_axi_SOURCE_BUS_WREADY;
    sc_out< sc_uint<C_M_AXI_SOURCE_BUS_DATA_WIDTH> > m_axi_SOURCE_BUS_WDATA;
    sc_out< sc_uint<C_M_AXI_SOURCE_BUS_DATA_WIDTH/8> > m_axi_SOURCE_BUS_WSTRB;
    sc_out< sc_logic > m_axi_SOURCE_BUS_WLAST;
    sc_out< sc_uint<C_M_AXI_SOURCE_BUS_ID_WIDTH> > m_axi_SOURCE_BUS_WID;
    sc_out< sc_uint<C_M_AXI_SOURCE_BUS_WUSER_WIDTH> > m_axi_SOURCE_BUS_WUSER;
    sc_out< sc_logic > m_axi_SOURCE_BUS_ARVALID;
    sc_in< sc_logic > m_axi_SOURCE_BUS_ARREADY;
    sc_out< sc_uint<C_M_AXI_SOURCE_BUS_ADDR_WIDTH> > m_axi_SOURCE_BUS_ARADDR;
    sc_out< sc_uint<C_M_AXI_SOURCE_BUS_ID_WIDTH> > m_axi_SOURCE_BUS_ARID;
    sc_out< sc_lv<8> > m_axi_SOURCE_BUS_ARLEN;
    sc_out< sc_lv<3> > m_axi_SOURCE_BUS_ARSIZE;
    sc_out< sc_lv<2> > m_axi_SOURCE_BUS_ARBURST;
    sc_out< sc_lv<2> > m_axi_SOURCE_BUS_ARLOCK;
    sc_out< sc_lv<4> > m_axi_SOURCE_BUS_ARCACHE;
    sc_out< sc_lv<3> > m_axi_SOURCE_BUS_ARPROT;
    sc_out< sc_lv<4> > m_axi_SOURCE_BUS_ARQOS;
    sc_out< sc_lv<4> > m_axi_SOURCE_BUS_ARREGION;
    sc_out< sc_uint<C_M_AXI_SOURCE_BUS_ARUSER_WIDTH> > m_axi_SOURCE_BUS_ARUSER;
    sc_in< sc_logic > m_axi_SOURCE_BUS_RVALID;
    sc_out< sc_logic > m_axi_SOURCE_BUS_RREADY;
    sc_in< sc_uint<C_M_AXI_SOURCE_BUS_DATA_WIDTH> > m_axi_SOURCE_BUS_RDATA;
    sc_in< sc_logic > m_axi_SOURCE_BUS_RLAST;
    sc_in< sc_uint<C_M_AXI_SOURCE_BUS_ID_WIDTH> > m_axi_SOURCE_BUS_RID;
    sc_in< sc_uint<C_M_AXI_SOURCE_BUS_RUSER_WIDTH> > m_axi_SOURCE_BUS_RUSER;
    sc_in< sc_lv<2> > m_axi_SOURCE_BUS_RRESP;
    sc_in< sc_logic > m_axi_SOURCE_BUS_BVALID;
    sc_out< sc_logic > m_axi_SOURCE_BUS_BREADY;
    sc_in< sc_lv<2> > m_axi_SOURCE_BUS_BRESP;
    sc_in< sc_uint<C_M_AXI_SOURCE_BUS_ID_WIDTH> > m_axi_SOURCE_BUS_BID;
    sc_in< sc_uint<C_M_AXI_SOURCE_BUS_BUSER_WIDTH> > m_axi_SOURCE_BUS_BUSER;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const6;
    sc_signal< sc_lv<32> > ap_var_for_const7;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<3> > ap_var_for_const3;
    sc_signal< sc_lv<2> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const5;


    // Module declarations
    prefetch(sc_module_name name);
    SC_HAS_PROCESS(prefetch);

    ~prefetch();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    prefetch_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* prefetch_AXILiteS_s_axi_U;
    prefetch_SOURCE_BUS_m_axi<32,32,5,16,16,16,16,C_M_AXI_SOURCE_BUS_ID_WIDTH,C_M_AXI_SOURCE_BUS_ADDR_WIDTH,C_M_AXI_SOURCE_BUS_DATA_WIDTH,C_M_AXI_SOURCE_BUS_AWUSER_WIDTH,C_M_AXI_SOURCE_BUS_ARUSER_WIDTH,C_M_AXI_SOURCE_BUS_WUSER_WIDTH,C_M_AXI_SOURCE_BUS_RUSER_WIDTH,C_M_AXI_SOURCE_BUS_BUSER_WIDTH,C_M_AXI_SOURCE_BUS_USER_VALUE,C_M_AXI_SOURCE_BUS_PROT_VALUE,C_M_AXI_SOURCE_BUS_CACHE_VALUE>* prefetch_SOURCE_BUS_m_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<19> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > source;
    sc_signal< sc_lv<32> > ap_return;
    sc_signal< sc_logic > SOURCE_BUS_blk_n_AR;
    sc_signal< sc_lv<1> > ap_CS_fsm_state2;
    sc_signal< sc_logic > SOURCE_BUS_blk_n_R;
    sc_signal< sc_lv<1> > ap_CS_fsm_state9;
    sc_signal< sc_lv<1> > ap_CS_fsm_state10;
    sc_signal< sc_lv<1> > ap_CS_fsm_state11;
    sc_signal< sc_lv<1> > ap_CS_fsm_state12;
    sc_signal< sc_lv<1> > ap_CS_fsm_state13;
    sc_signal< sc_lv<1> > ap_CS_fsm_state14;
    sc_signal< sc_lv<1> > ap_CS_fsm_state15;
    sc_signal< sc_lv<1> > ap_CS_fsm_state16;
    sc_signal< sc_lv<1> > ap_CS_fsm_state17;
    sc_signal< sc_lv<1> > ap_CS_fsm_state18;
    sc_signal< sc_logic > SOURCE_BUS_AWREADY;
    sc_signal< sc_logic > SOURCE_BUS_WREADY;
    sc_signal< sc_logic > SOURCE_BUS_ARVALID;
    sc_signal< sc_logic > SOURCE_BUS_ARREADY;
    sc_signal< sc_logic > SOURCE_BUS_RVALID;
    sc_signal< sc_logic > SOURCE_BUS_RREADY;
    sc_signal< sc_lv<32> > SOURCE_BUS_RDATA;
    sc_signal< sc_logic > SOURCE_BUS_RLAST;
    sc_signal< sc_lv<1> > SOURCE_BUS_RID;
    sc_signal< sc_lv<1> > SOURCE_BUS_RUSER;
    sc_signal< sc_lv<2> > SOURCE_BUS_RRESP;
    sc_signal< sc_logic > SOURCE_BUS_BVALID;
    sc_signal< sc_lv<2> > SOURCE_BUS_BRESP;
    sc_signal< sc_lv<1> > SOURCE_BUS_BID;
    sc_signal< sc_lv<1> > SOURCE_BUS_BUSER;
    sc_signal< sc_lv<32> > reg_88;
    sc_signal< sc_lv<30> > source1_reg_309;
    sc_signal< sc_logic > ap_sig_ioackin_SOURCE_BUS_ARREADY;
    sc_signal< sc_lv<1> > tmp_1_fu_112_p2;
    sc_signal< sc_lv<1> > tmp_1_reg_320;
    sc_signal< sc_lv<1> > tmp_1_1_fu_118_p2;
    sc_signal< sc_lv<1> > tmp_1_1_reg_326;
    sc_signal< sc_lv<2> > p_c_flag_2_fu_153_p3;
    sc_signal< sc_lv<2> > p_c_flag_2_reg_331;
    sc_signal< sc_lv<1> > tmp_1_3_fu_161_p2;
    sc_signal< sc_lv<1> > tmp_1_3_reg_336;
    sc_signal< sc_lv<3> > p_c_flag_4_fu_195_p3;
    sc_signal< sc_lv<3> > p_c_flag_4_reg_341;
    sc_signal< sc_lv<3> > p_c_flag_5_fu_214_p3;
    sc_signal< sc_lv<3> > p_c_flag_5_reg_347;
    sc_signal< sc_lv<3> > p_c_flag_6_fu_232_p3;
    sc_signal< sc_lv<3> > p_c_flag_6_reg_353;
    sc_signal< sc_lv<1> > tmp_1_7_fu_239_p2;
    sc_signal< sc_lv<1> > tmp_1_7_reg_358;
    sc_signal< sc_lv<4> > p_c_flag_8_fu_273_p3;
    sc_signal< sc_lv<4> > p_c_flag_8_reg_363;
    sc_signal< sc_lv<32> > tmp_2_fu_102_p1;
    sc_signal< sc_logic > ap_reg_ioackin_SOURCE_BUS_ARREADY;
    sc_signal< sc_lv<2> > c_flag_1_1_fu_127_p3;
    sc_signal< sc_lv<2> > p_c_flag_cast_fu_124_p1;
    sc_signal< sc_lv<2> > p_c_flag_1_fu_134_p3;
    sc_signal< sc_lv<1> > tmp_1_2_fu_141_p2;
    sc_signal< sc_lv<2> > c_flag_1_2_fu_147_p2;
    sc_signal< sc_lv<3> > p_c_flag_2_cast_fu_167_p1;
    sc_signal< sc_lv<3> > c_flag_1_3_fu_170_p2;
    sc_signal< sc_lv<3> > p_c_flag_3_fu_176_p3;
    sc_signal< sc_lv<1> > tmp_1_4_fu_183_p2;
    sc_signal< sc_lv<3> > c_flag_1_4_fu_189_p2;
    sc_signal< sc_lv<1> > tmp_1_5_fu_203_p2;
    sc_signal< sc_lv<3> > c_flag_1_5_fu_209_p2;
    sc_signal< sc_lv<1> > tmp_1_6_fu_221_p2;
    sc_signal< sc_lv<3> > c_flag_1_6_fu_227_p2;
    sc_signal< sc_lv<4> > p_c_flag_6_cast_fu_245_p1;
    sc_signal< sc_lv<4> > c_flag_1_7_fu_248_p2;
    sc_signal< sc_lv<4> > p_c_flag_7_fu_254_p3;
    sc_signal< sc_lv<1> > tmp_1_8_fu_261_p2;
    sc_signal< sc_lv<4> > c_flag_1_8_fu_267_p2;
    sc_signal< sc_lv<1> > ap_CS_fsm_state19;
    sc_signal< sc_lv<1> > tmp_1_9_fu_281_p2;
    sc_signal< sc_lv<4> > c_flag_1_9_fu_287_p2;
    sc_signal< sc_lv<4> > p_c_flag_9_fu_292_p3;
    sc_signal< sc_lv<1> > tmp_fu_299_p2;
    sc_signal< sc_lv<19> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<19> ap_ST_fsm_state1;
    static const sc_lv<19> ap_ST_fsm_state2;
    static const sc_lv<19> ap_ST_fsm_state3;
    static const sc_lv<19> ap_ST_fsm_state4;
    static const sc_lv<19> ap_ST_fsm_state5;
    static const sc_lv<19> ap_ST_fsm_state6;
    static const sc_lv<19> ap_ST_fsm_state7;
    static const sc_lv<19> ap_ST_fsm_state8;
    static const sc_lv<19> ap_ST_fsm_state9;
    static const sc_lv<19> ap_ST_fsm_state10;
    static const sc_lv<19> ap_ST_fsm_state11;
    static const sc_lv<19> ap_ST_fsm_state12;
    static const sc_lv<19> ap_ST_fsm_state13;
    static const sc_lv<19> ap_ST_fsm_state14;
    static const sc_lv<19> ap_ST_fsm_state15;
    static const sc_lv<19> ap_ST_fsm_state16;
    static const sc_lv<19> ap_ST_fsm_state17;
    static const sc_lv<19> ap_ST_fsm_state18;
    static const sc_lv<19> ap_ST_fsm_state19;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_11;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_DATA_WIDTH;
    static const int C_M_AXI_SOURCE_BUS_USER_VALUE;
    static const int C_M_AXI_SOURCE_BUS_PROT_VALUE;
    static const int C_M_AXI_SOURCE_BUS_CACHE_VALUE;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<4> ap_const_lv4_A;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_clk_no_reset_();
    void thread_SOURCE_BUS_ARVALID();
    void thread_SOURCE_BUS_RREADY();
    void thread_SOURCE_BUS_blk_n_AR();
    void thread_SOURCE_BUS_blk_n_R();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state18();
    void thread_ap_CS_fsm_state19();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_SOURCE_BUS_ARREADY();
    void thread_c_flag_1_1_fu_127_p3();
    void thread_c_flag_1_2_fu_147_p2();
    void thread_c_flag_1_3_fu_170_p2();
    void thread_c_flag_1_4_fu_189_p2();
    void thread_c_flag_1_5_fu_209_p2();
    void thread_c_flag_1_6_fu_227_p2();
    void thread_c_flag_1_7_fu_248_p2();
    void thread_c_flag_1_8_fu_267_p2();
    void thread_c_flag_1_9_fu_287_p2();
    void thread_p_c_flag_1_fu_134_p3();
    void thread_p_c_flag_2_cast_fu_167_p1();
    void thread_p_c_flag_2_fu_153_p3();
    void thread_p_c_flag_3_fu_176_p3();
    void thread_p_c_flag_4_fu_195_p3();
    void thread_p_c_flag_5_fu_214_p3();
    void thread_p_c_flag_6_cast_fu_245_p1();
    void thread_p_c_flag_6_fu_232_p3();
    void thread_p_c_flag_7_fu_254_p3();
    void thread_p_c_flag_8_fu_273_p3();
    void thread_p_c_flag_9_fu_292_p3();
    void thread_p_c_flag_cast_fu_124_p1();
    void thread_tmp_1_1_fu_118_p2();
    void thread_tmp_1_2_fu_141_p2();
    void thread_tmp_1_3_fu_161_p2();
    void thread_tmp_1_4_fu_183_p2();
    void thread_tmp_1_5_fu_203_p2();
    void thread_tmp_1_6_fu_221_p2();
    void thread_tmp_1_7_fu_239_p2();
    void thread_tmp_1_8_fu_261_p2();
    void thread_tmp_1_9_fu_281_p2();
    void thread_tmp_1_fu_112_p2();
    void thread_tmp_2_fu_102_p1();
    void thread_tmp_fu_299_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
