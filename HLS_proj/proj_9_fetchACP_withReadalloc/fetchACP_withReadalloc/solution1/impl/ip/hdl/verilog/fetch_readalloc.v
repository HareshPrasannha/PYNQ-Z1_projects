// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fetch_readalloc,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=76801,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=3210,HLS_SYN_LUT=4652}" *)

module fetch_readalloc (
        ap_clk,
        ap_rst_n,
        m_axi_A_BUS_AWVALID,
        m_axi_A_BUS_AWREADY,
        m_axi_A_BUS_AWADDR,
        m_axi_A_BUS_AWID,
        m_axi_A_BUS_AWLEN,
        m_axi_A_BUS_AWSIZE,
        m_axi_A_BUS_AWBURST,
        m_axi_A_BUS_AWLOCK,
        m_axi_A_BUS_AWCACHE,
        m_axi_A_BUS_AWPROT,
        m_axi_A_BUS_AWQOS,
        m_axi_A_BUS_AWREGION,
        m_axi_A_BUS_AWUSER,
        m_axi_A_BUS_WVALID,
        m_axi_A_BUS_WREADY,
        m_axi_A_BUS_WDATA,
        m_axi_A_BUS_WSTRB,
        m_axi_A_BUS_WLAST,
        m_axi_A_BUS_WID,
        m_axi_A_BUS_WUSER,
        m_axi_A_BUS_ARVALID,
        m_axi_A_BUS_ARREADY,
        m_axi_A_BUS_ARADDR,
        m_axi_A_BUS_ARID,
        m_axi_A_BUS_ARLEN,
        m_axi_A_BUS_ARSIZE,
        m_axi_A_BUS_ARBURST,
        m_axi_A_BUS_ARLOCK,
        m_axi_A_BUS_ARCACHE,
        m_axi_A_BUS_ARPROT,
        m_axi_A_BUS_ARQOS,
        m_axi_A_BUS_ARREGION,
        m_axi_A_BUS_ARUSER,
        m_axi_A_BUS_RVALID,
        m_axi_A_BUS_RREADY,
        m_axi_A_BUS_RDATA,
        m_axi_A_BUS_RLAST,
        m_axi_A_BUS_RID,
        m_axi_A_BUS_RUSER,
        m_axi_A_BUS_RRESP,
        m_axi_A_BUS_BVALID,
        m_axi_A_BUS_BREADY,
        m_axi_A_BUS_BRESP,
        m_axi_A_BUS_BID,
        m_axi_A_BUS_BUSER,
        m_axi_LOG_BUS_AWVALID,
        m_axi_LOG_BUS_AWREADY,
        m_axi_LOG_BUS_AWADDR,
        m_axi_LOG_BUS_AWID,
        m_axi_LOG_BUS_AWLEN,
        m_axi_LOG_BUS_AWSIZE,
        m_axi_LOG_BUS_AWBURST,
        m_axi_LOG_BUS_AWLOCK,
        m_axi_LOG_BUS_AWCACHE,
        m_axi_LOG_BUS_AWPROT,
        m_axi_LOG_BUS_AWQOS,
        m_axi_LOG_BUS_AWREGION,
        m_axi_LOG_BUS_AWUSER,
        m_axi_LOG_BUS_WVALID,
        m_axi_LOG_BUS_WREADY,
        m_axi_LOG_BUS_WDATA,
        m_axi_LOG_BUS_WSTRB,
        m_axi_LOG_BUS_WLAST,
        m_axi_LOG_BUS_WID,
        m_axi_LOG_BUS_WUSER,
        m_axi_LOG_BUS_ARVALID,
        m_axi_LOG_BUS_ARREADY,
        m_axi_LOG_BUS_ARADDR,
        m_axi_LOG_BUS_ARID,
        m_axi_LOG_BUS_ARLEN,
        m_axi_LOG_BUS_ARSIZE,
        m_axi_LOG_BUS_ARBURST,
        m_axi_LOG_BUS_ARLOCK,
        m_axi_LOG_BUS_ARCACHE,
        m_axi_LOG_BUS_ARPROT,
        m_axi_LOG_BUS_ARQOS,
        m_axi_LOG_BUS_ARREGION,
        m_axi_LOG_BUS_ARUSER,
        m_axi_LOG_BUS_RVALID,
        m_axi_LOG_BUS_RREADY,
        m_axi_LOG_BUS_RDATA,
        m_axi_LOG_BUS_RLAST,
        m_axi_LOG_BUS_RID,
        m_axi_LOG_BUS_RUSER,
        m_axi_LOG_BUS_RRESP,
        m_axi_LOG_BUS_BVALID,
        m_axi_LOG_BUS_BREADY,
        m_axi_LOG_BUS_BRESP,
        m_axi_LOG_BUS_BID,
        m_axi_LOG_BUS_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 61'b1;
parameter    ap_ST_fsm_state2 = 61'b10;
parameter    ap_ST_fsm_state3 = 61'b100;
parameter    ap_ST_fsm_state4 = 61'b1000;
parameter    ap_ST_fsm_state5 = 61'b10000;
parameter    ap_ST_fsm_state6 = 61'b100000;
parameter    ap_ST_fsm_state7 = 61'b1000000;
parameter    ap_ST_fsm_state8 = 61'b10000000;
parameter    ap_ST_fsm_state9 = 61'b100000000;
parameter    ap_ST_fsm_state10 = 61'b1000000000;
parameter    ap_ST_fsm_state11 = 61'b10000000000;
parameter    ap_ST_fsm_state12 = 61'b100000000000;
parameter    ap_ST_fsm_state13 = 61'b1000000000000;
parameter    ap_ST_fsm_state14 = 61'b10000000000000;
parameter    ap_ST_fsm_state15 = 61'b100000000000000;
parameter    ap_ST_fsm_state16 = 61'b1000000000000000;
parameter    ap_ST_fsm_state17 = 61'b10000000000000000;
parameter    ap_ST_fsm_state18 = 61'b100000000000000000;
parameter    ap_ST_fsm_state19 = 61'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 61'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 61'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 61'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 61'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 61'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 61'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 61'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 61'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 61'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 61'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 61'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 61'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 61'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 61'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 61'b1000000000000000000000000000000000;
parameter    ap_ST_fsm_state35 = 61'b10000000000000000000000000000000000;
parameter    ap_ST_fsm_state36 = 61'b100000000000000000000000000000000000;
parameter    ap_ST_fsm_state37 = 61'b1000000000000000000000000000000000000;
parameter    ap_ST_fsm_state38 = 61'b10000000000000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 61'b100000000000000000000000000000000000000;
parameter    ap_ST_fsm_state40 = 61'b1000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state41 = 61'b10000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state42 = 61'b100000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state43 = 61'b1000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state44 = 61'b10000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state45 = 61'b100000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state46 = 61'b1000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state47 = 61'b10000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state48 = 61'b100000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state49 = 61'b1000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state50 = 61'b10000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state51 = 61'b100000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state52 = 61'b1000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state53 = 61'b10000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state54 = 61'b100000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state55 = 61'b1000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state56 = 61'b10000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state57 = 61'b100000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state58 = 61'b1000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state59 = 61'b10000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state60 = 61'b100000000000000000000000000000000000000000000000000000000000;
parameter    ap_ST_fsm_state61 = 61'b1000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    ap_const_lv32_22 = 32'b100010;
parameter    ap_const_lv32_23 = 32'b100011;
parameter    ap_const_lv32_24 = 32'b100100;
parameter    ap_const_lv32_25 = 32'b100101;
parameter    ap_const_lv32_26 = 32'b100110;
parameter    ap_const_lv32_27 = 32'b100111;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv32_29 = 32'b101001;
parameter    ap_const_lv32_2A = 32'b101010;
parameter    ap_const_lv32_2B = 32'b101011;
parameter    ap_const_lv32_2C = 32'b101100;
parameter    ap_const_lv32_2D = 32'b101101;
parameter    ap_const_lv32_2E = 32'b101110;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv32_31 = 32'b110001;
parameter    ap_const_lv32_32 = 32'b110010;
parameter    ap_const_lv32_33 = 32'b110011;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_35 = 32'b110101;
parameter    ap_const_lv32_36 = 32'b110110;
parameter    ap_const_lv32_37 = 32'b110111;
parameter    ap_const_lv32_38 = 32'b111000;
parameter    ap_const_lv32_39 = 32'b111001;
parameter    ap_const_lv32_3A = 32'b111010;
parameter    ap_const_lv32_1 = 32'b1;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_A_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_A_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_A_BUS_DATA_WIDTH = 32;
parameter    C_M_AXI_A_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_A_BUS_USER_VALUE = 0;
parameter    C_M_AXI_A_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_A_BUS_CACHE_VALUE = 3;
parameter    C_M_AXI_LOG_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_LOG_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_LOG_BUS_DATA_WIDTH = 32;
parameter    C_M_AXI_LOG_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_LOG_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_LOG_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_LOG_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_LOG_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_LOG_BUS_USER_VALUE = 0;
parameter    C_M_AXI_LOG_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_LOG_BUS_CACHE_VALUE = 3;
parameter    ap_const_lv32_3B = 32'b111011;
parameter    ap_const_lv32_3C = 32'b111100;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv16_FA00 = 16'b1111101000000000;
parameter    ap_const_lv16_31 = 16'b110001;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_const_lv16_2 = 16'b10;
parameter    ap_const_lv16_3 = 16'b11;
parameter    ap_const_lv16_4 = 16'b100;
parameter    ap_const_lv16_5 = 16'b101;
parameter    ap_const_lv16_6 = 16'b110;
parameter    ap_const_lv16_7 = 16'b111;
parameter    ap_const_lv16_8 = 16'b1000;
parameter    ap_const_lv16_9 = 16'b1001;
parameter    ap_const_lv16_A = 16'b1010;
parameter    ap_const_lv16_B = 16'b1011;
parameter    ap_const_lv16_C = 16'b1100;
parameter    ap_const_lv16_D = 16'b1101;
parameter    ap_const_lv16_E = 16'b1110;
parameter    ap_const_lv16_F = 16'b1111;
parameter    ap_const_lv16_10 = 16'b10000;
parameter    ap_const_lv16_11 = 16'b10001;
parameter    ap_const_lv16_12 = 16'b10010;
parameter    ap_const_lv16_13 = 16'b10011;
parameter    ap_const_lv16_14 = 16'b10100;
parameter    ap_const_lv16_15 = 16'b10101;
parameter    ap_const_lv16_16 = 16'b10110;
parameter    ap_const_lv16_17 = 16'b10111;
parameter    ap_const_lv16_18 = 16'b11000;
parameter    ap_const_lv16_19 = 16'b11001;
parameter    ap_const_lv16_1A = 16'b11010;
parameter    ap_const_lv16_1B = 16'b11011;
parameter    ap_const_lv16_1C = 16'b11100;
parameter    ap_const_lv16_1D = 16'b11101;
parameter    ap_const_lv16_1E = 16'b11110;
parameter    ap_const_lv16_1F = 16'b11111;
parameter    ap_const_lv16_20 = 16'b100000;
parameter    ap_const_lv16_21 = 16'b100001;
parameter    ap_const_lv16_22 = 16'b100010;
parameter    ap_const_lv16_23 = 16'b100011;
parameter    ap_const_lv16_24 = 16'b100100;
parameter    ap_const_lv16_25 = 16'b100101;
parameter    ap_const_lv16_26 = 16'b100110;
parameter    ap_const_lv16_27 = 16'b100111;
parameter    ap_const_lv16_28 = 16'b101000;
parameter    ap_const_lv16_29 = 16'b101001;
parameter    ap_const_lv16_2A = 16'b101010;
parameter    ap_const_lv16_2B = 16'b101011;
parameter    ap_const_lv16_2C = 16'b101100;
parameter    ap_const_lv16_2D = 16'b101101;
parameter    ap_const_lv16_2E = 16'b101110;
parameter    ap_const_lv16_2F = 16'b101111;
parameter    ap_const_lv16_30 = 16'b110000;
parameter    ap_const_lv16_32 = 16'b110010;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_A_BUS_WSTRB_WIDTH = (C_M_AXI_A_BUS_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_LOG_BUS_WSTRB_WIDTH = (C_M_AXI_LOG_BUS_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_A_BUS_AWVALID;
input   m_axi_A_BUS_AWREADY;
output  [C_M_AXI_A_BUS_ADDR_WIDTH - 1 : 0] m_axi_A_BUS_AWADDR;
output  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_AWID;
output  [7:0] m_axi_A_BUS_AWLEN;
output  [2:0] m_axi_A_BUS_AWSIZE;
output  [1:0] m_axi_A_BUS_AWBURST;
output  [1:0] m_axi_A_BUS_AWLOCK;
output  [3:0] m_axi_A_BUS_AWCACHE;
output  [2:0] m_axi_A_BUS_AWPROT;
output  [3:0] m_axi_A_BUS_AWQOS;
output  [3:0] m_axi_A_BUS_AWREGION;
output  [C_M_AXI_A_BUS_AWUSER_WIDTH - 1 : 0] m_axi_A_BUS_AWUSER;
output   m_axi_A_BUS_WVALID;
input   m_axi_A_BUS_WREADY;
output  [C_M_AXI_A_BUS_DATA_WIDTH - 1 : 0] m_axi_A_BUS_WDATA;
output  [C_M_AXI_A_BUS_WSTRB_WIDTH - 1 : 0] m_axi_A_BUS_WSTRB;
output   m_axi_A_BUS_WLAST;
output  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_WID;
output  [C_M_AXI_A_BUS_WUSER_WIDTH - 1 : 0] m_axi_A_BUS_WUSER;
output   m_axi_A_BUS_ARVALID;
input   m_axi_A_BUS_ARREADY;
output  [C_M_AXI_A_BUS_ADDR_WIDTH - 1 : 0] m_axi_A_BUS_ARADDR;
output  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_ARID;
output  [7:0] m_axi_A_BUS_ARLEN;
output  [2:0] m_axi_A_BUS_ARSIZE;
output  [1:0] m_axi_A_BUS_ARBURST;
output  [1:0] m_axi_A_BUS_ARLOCK;
output  [3:0] m_axi_A_BUS_ARCACHE;
output  [2:0] m_axi_A_BUS_ARPROT;
output  [3:0] m_axi_A_BUS_ARQOS;
output  [3:0] m_axi_A_BUS_ARREGION;
output  [C_M_AXI_A_BUS_ARUSER_WIDTH - 1 : 0] m_axi_A_BUS_ARUSER;
input   m_axi_A_BUS_RVALID;
output   m_axi_A_BUS_RREADY;
input  [C_M_AXI_A_BUS_DATA_WIDTH - 1 : 0] m_axi_A_BUS_RDATA;
input   m_axi_A_BUS_RLAST;
input  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_RID;
input  [C_M_AXI_A_BUS_RUSER_WIDTH - 1 : 0] m_axi_A_BUS_RUSER;
input  [1:0] m_axi_A_BUS_RRESP;
input   m_axi_A_BUS_BVALID;
output   m_axi_A_BUS_BREADY;
input  [1:0] m_axi_A_BUS_BRESP;
input  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_BID;
input  [C_M_AXI_A_BUS_BUSER_WIDTH - 1 : 0] m_axi_A_BUS_BUSER;
output   m_axi_LOG_BUS_AWVALID;
input   m_axi_LOG_BUS_AWREADY;
output  [C_M_AXI_LOG_BUS_ADDR_WIDTH - 1 : 0] m_axi_LOG_BUS_AWADDR;
output  [C_M_AXI_LOG_BUS_ID_WIDTH - 1 : 0] m_axi_LOG_BUS_AWID;
output  [7:0] m_axi_LOG_BUS_AWLEN;
output  [2:0] m_axi_LOG_BUS_AWSIZE;
output  [1:0] m_axi_LOG_BUS_AWBURST;
output  [1:0] m_axi_LOG_BUS_AWLOCK;
output  [3:0] m_axi_LOG_BUS_AWCACHE;
output  [2:0] m_axi_LOG_BUS_AWPROT;
output  [3:0] m_axi_LOG_BUS_AWQOS;
output  [3:0] m_axi_LOG_BUS_AWREGION;
output  [C_M_AXI_LOG_BUS_AWUSER_WIDTH - 1 : 0] m_axi_LOG_BUS_AWUSER;
output   m_axi_LOG_BUS_WVALID;
input   m_axi_LOG_BUS_WREADY;
output  [C_M_AXI_LOG_BUS_DATA_WIDTH - 1 : 0] m_axi_LOG_BUS_WDATA;
output  [C_M_AXI_LOG_BUS_WSTRB_WIDTH - 1 : 0] m_axi_LOG_BUS_WSTRB;
output   m_axi_LOG_BUS_WLAST;
output  [C_M_AXI_LOG_BUS_ID_WIDTH - 1 : 0] m_axi_LOG_BUS_WID;
output  [C_M_AXI_LOG_BUS_WUSER_WIDTH - 1 : 0] m_axi_LOG_BUS_WUSER;
output   m_axi_LOG_BUS_ARVALID;
input   m_axi_LOG_BUS_ARREADY;
output  [C_M_AXI_LOG_BUS_ADDR_WIDTH - 1 : 0] m_axi_LOG_BUS_ARADDR;
output  [C_M_AXI_LOG_BUS_ID_WIDTH - 1 : 0] m_axi_LOG_BUS_ARID;
output  [7:0] m_axi_LOG_BUS_ARLEN;
output  [2:0] m_axi_LOG_BUS_ARSIZE;
output  [1:0] m_axi_LOG_BUS_ARBURST;
output  [1:0] m_axi_LOG_BUS_ARLOCK;
output  [3:0] m_axi_LOG_BUS_ARCACHE;
output  [2:0] m_axi_LOG_BUS_ARPROT;
output  [3:0] m_axi_LOG_BUS_ARQOS;
output  [3:0] m_axi_LOG_BUS_ARREGION;
output  [C_M_AXI_LOG_BUS_ARUSER_WIDTH - 1 : 0] m_axi_LOG_BUS_ARUSER;
input   m_axi_LOG_BUS_RVALID;
output   m_axi_LOG_BUS_RREADY;
input  [C_M_AXI_LOG_BUS_DATA_WIDTH - 1 : 0] m_axi_LOG_BUS_RDATA;
input   m_axi_LOG_BUS_RLAST;
input  [C_M_AXI_LOG_BUS_ID_WIDTH - 1 : 0] m_axi_LOG_BUS_RID;
input  [C_M_AXI_LOG_BUS_RUSER_WIDTH - 1 : 0] m_axi_LOG_BUS_RUSER;
input  [1:0] m_axi_LOG_BUS_RRESP;
input   m_axi_LOG_BUS_BVALID;
output   m_axi_LOG_BUS_BREADY;
input  [1:0] m_axi_LOG_BUS_BRESP;
input  [C_M_AXI_LOG_BUS_ID_WIDTH - 1 : 0] m_axi_LOG_BUS_BID;
input  [C_M_AXI_LOG_BUS_BUSER_WIDTH - 1 : 0] m_axi_LOG_BUS_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [60:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] a;
wire   [31:0] log;
reg    A_BUS_blk_n_AR;
wire   [0:0] ap_CS_fsm_state3;
reg    A_BUS_blk_n_R;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] ap_CS_fsm_state12;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] ap_CS_fsm_state13;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state14;
wire   [0:0] ap_CS_fsm_state8;
wire   [0:0] ap_CS_fsm_state15;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] ap_CS_fsm_state16;
wire   [0:0] ap_CS_fsm_state17;
wire   [0:0] ap_CS_fsm_state18;
wire   [0:0] ap_CS_fsm_state19;
wire   [0:0] ap_CS_fsm_state20;
wire   [0:0] ap_CS_fsm_state21;
wire   [0:0] ap_CS_fsm_state22;
wire   [0:0] ap_CS_fsm_state23;
wire   [0:0] ap_CS_fsm_state24;
wire   [0:0] ap_CS_fsm_state25;
wire   [0:0] ap_CS_fsm_state26;
wire   [0:0] ap_CS_fsm_state27;
wire   [0:0] ap_CS_fsm_state28;
wire   [0:0] ap_CS_fsm_state29;
wire   [0:0] ap_CS_fsm_state30;
wire   [0:0] ap_CS_fsm_state31;
wire   [0:0] ap_CS_fsm_state32;
wire   [0:0] ap_CS_fsm_state33;
wire   [0:0] ap_CS_fsm_state34;
wire   [0:0] ap_CS_fsm_state35;
wire   [0:0] ap_CS_fsm_state36;
wire   [0:0] ap_CS_fsm_state37;
wire   [0:0] ap_CS_fsm_state38;
wire   [0:0] ap_CS_fsm_state39;
wire   [0:0] ap_CS_fsm_state40;
wire   [0:0] ap_CS_fsm_state41;
wire   [0:0] ap_CS_fsm_state42;
wire   [0:0] ap_CS_fsm_state43;
wire   [0:0] ap_CS_fsm_state44;
wire   [0:0] ap_CS_fsm_state45;
wire   [0:0] ap_CS_fsm_state46;
wire   [0:0] ap_CS_fsm_state47;
wire   [0:0] ap_CS_fsm_state48;
wire   [0:0] ap_CS_fsm_state49;
wire   [0:0] ap_CS_fsm_state50;
wire   [0:0] ap_CS_fsm_state51;
wire   [0:0] ap_CS_fsm_state52;
wire   [0:0] ap_CS_fsm_state53;
wire   [0:0] ap_CS_fsm_state54;
wire   [0:0] ap_CS_fsm_state55;
wire   [0:0] ap_CS_fsm_state56;
wire   [0:0] ap_CS_fsm_state57;
wire   [0:0] ap_CS_fsm_state58;
wire   [0:0] ap_CS_fsm_state59;
reg    LOG_BUS_blk_n_AW;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_373_p2;
reg    LOG_BUS_blk_n_W;
reg    LOG_BUS_blk_n_B;
wire    A_BUS_AWREADY;
wire    A_BUS_WREADY;
reg    A_BUS_ARVALID;
wire    A_BUS_ARREADY;
reg   [31:0] A_BUS_ARADDR;
wire    A_BUS_RVALID;
reg    A_BUS_RREADY;
wire   [31:0] A_BUS_RDATA;
wire    A_BUS_RLAST;
wire   [0:0] A_BUS_RID;
wire   [0:0] A_BUS_RUSER;
wire   [1:0] A_BUS_RRESP;
wire    A_BUS_BVALID;
wire   [1:0] A_BUS_BRESP;
wire   [0:0] A_BUS_BID;
wire   [0:0] A_BUS_BUSER;
reg    LOG_BUS_AWVALID;
wire    LOG_BUS_AWREADY;
reg    LOG_BUS_WVALID;
wire    LOG_BUS_WREADY;
wire   [31:0] LOG_BUS_WDATA;
wire    LOG_BUS_ARREADY;
wire    LOG_BUS_RVALID;
wire   [31:0] LOG_BUS_RDATA;
wire    LOG_BUS_RLAST;
wire   [0:0] LOG_BUS_RID;
wire   [0:0] LOG_BUS_RUSER;
wire   [1:0] LOG_BUS_RRESP;
wire    LOG_BUS_BVALID;
reg    LOG_BUS_BREADY;
wire   [1:0] LOG_BUS_BRESP;
wire   [0:0] LOG_BUS_BID;
wire   [0:0] LOG_BUS_BUSER;
reg   [31:0] reg_231;
reg    ap_sig_ioackin_A_BUS_ARREADY;
reg   [31:0] reg_235;
reg   [31:0] reg_239;
wire   [31:0] grp_fu_249_p2;
reg   [31:0] reg_273;
wire   [31:0] grp_fu_267_p2;
reg   [31:0] reg_277;
wire   [31:0] grp_fu_281_p2;
reg   [31:0] reg_305;
wire   [31:0] grp_fu_299_p2;
reg   [31:0] reg_309;
wire   [0:0] ap_CS_fsm_state60;
wire   [31:0] grp_fu_313_p2;
reg   [31:0] reg_325;
reg   [31:0] LOG_BUS_addr_reg_1639;
wire   [30:0] tmp_2_cast_fu_365_p1;
reg   [30:0] tmp_2_cast_reg_1644;
wire   [30:0] a2_sum_fu_379_p2;
reg   [30:0] a2_sum_reg_1701;
reg    ap_sig_ioackin_LOG_BUS_AWREADY;
wire   [15:0] i_1_48_fu_384_p2;
reg   [15:0] i_1_48_reg_1706;
reg    ap_sig_ioackin_LOG_BUS_WREADY;
wire   [30:0] a2_sum5_fu_410_p2;
reg   [30:0] a2_sum5_reg_1718;
wire   [30:0] a2_sum6_fu_439_p2;
reg   [30:0] a2_sum6_reg_1729;
wire   [30:0] a2_sum7_fu_464_p2;
reg   [30:0] a2_sum7_reg_1740;
wire   [30:0] a2_sum8_fu_489_p2;
reg   [30:0] a2_sum8_reg_1751;
wire   [30:0] a2_sum9_fu_514_p2;
reg   [30:0] a2_sum9_reg_1762;
wire   [30:0] a2_sum1_fu_539_p2;
reg   [30:0] a2_sum1_reg_1773;
wire   [30:0] a2_sum2_fu_564_p2;
reg   [30:0] a2_sum2_reg_1784;
wire   [30:0] a2_sum3_fu_589_p2;
reg   [30:0] a2_sum3_reg_1795;
wire   [30:0] a2_sum4_fu_614_p2;
reg   [30:0] a2_sum4_reg_1806;
wire   [30:0] a2_sum10_fu_639_p2;
reg   [30:0] a2_sum10_reg_1817;
wire   [30:0] a2_sum11_fu_664_p2;
reg   [30:0] a2_sum11_reg_1828;
wire   [30:0] a2_sum12_fu_689_p2;
reg   [30:0] a2_sum12_reg_1839;
wire   [30:0] a2_sum13_fu_714_p2;
reg   [30:0] a2_sum13_reg_1850;
wire   [30:0] a2_sum14_fu_739_p2;
reg   [30:0] a2_sum14_reg_1861;
wire   [30:0] a2_sum15_fu_764_p2;
reg   [30:0] a2_sum15_reg_1872;
wire   [30:0] a2_sum16_fu_789_p2;
reg   [30:0] a2_sum16_reg_1883;
wire   [30:0] a2_sum17_fu_814_p2;
reg   [30:0] a2_sum17_reg_1894;
wire   [30:0] a2_sum18_fu_839_p2;
reg   [30:0] a2_sum18_reg_1905;
wire   [30:0] a2_sum19_fu_864_p2;
reg   [30:0] a2_sum19_reg_1916;
wire   [30:0] a2_sum20_fu_889_p2;
reg   [30:0] a2_sum20_reg_1927;
wire   [30:0] a2_sum21_fu_914_p2;
reg   [30:0] a2_sum21_reg_1938;
wire   [30:0] a2_sum22_fu_939_p2;
reg   [30:0] a2_sum22_reg_1949;
wire   [30:0] a2_sum23_fu_964_p2;
reg   [30:0] a2_sum23_reg_1960;
wire   [30:0] a2_sum24_fu_989_p2;
reg   [30:0] a2_sum24_reg_1971;
wire   [30:0] a2_sum25_fu_1014_p2;
reg   [30:0] a2_sum25_reg_1982;
wire   [30:0] a2_sum26_fu_1039_p2;
reg   [30:0] a2_sum26_reg_1993;
wire   [30:0] a2_sum27_fu_1064_p2;
reg   [30:0] a2_sum27_reg_2004;
wire   [30:0] a2_sum28_fu_1089_p2;
reg   [30:0] a2_sum28_reg_2015;
wire   [30:0] a2_sum29_fu_1114_p2;
reg   [30:0] a2_sum29_reg_2026;
wire   [30:0] a2_sum30_fu_1139_p2;
reg   [30:0] a2_sum30_reg_2037;
wire   [30:0] a2_sum31_fu_1164_p2;
reg   [30:0] a2_sum31_reg_2048;
wire   [30:0] a2_sum32_fu_1189_p2;
reg   [30:0] a2_sum32_reg_2059;
wire   [30:0] a2_sum33_fu_1214_p2;
reg   [30:0] a2_sum33_reg_2070;
wire   [30:0] a2_sum34_fu_1239_p2;
reg   [30:0] a2_sum34_reg_2081;
wire   [31:0] grp_fu_329_p2;
reg   [31:0] tmp_reg_2086;
wire   [30:0] a2_sum35_fu_1264_p2;
reg   [30:0] a2_sum35_reg_2097;
wire   [30:0] a2_sum36_fu_1289_p2;
reg   [30:0] a2_sum36_reg_2108;
wire   [30:0] a2_sum37_fu_1314_p2;
reg   [30:0] a2_sum37_reg_2119;
wire   [30:0] a2_sum38_fu_1339_p2;
reg   [30:0] a2_sum38_reg_2130;
wire   [30:0] a2_sum39_fu_1364_p2;
reg   [30:0] a2_sum39_reg_2141;
wire   [30:0] a2_sum40_fu_1389_p2;
reg   [30:0] a2_sum40_reg_2152;
wire   [30:0] a2_sum41_fu_1414_p2;
reg   [30:0] a2_sum41_reg_2163;
wire   [30:0] a2_sum42_fu_1439_p2;
reg   [30:0] a2_sum42_reg_2174;
wire   [30:0] a2_sum43_fu_1464_p2;
reg   [30:0] a2_sum43_reg_2185;
wire   [30:0] a2_sum44_fu_1489_p2;
reg   [30:0] a2_sum44_reg_2196;
wire   [30:0] a2_sum45_fu_1514_p2;
reg   [30:0] a2_sum45_reg_2207;
wire   [30:0] a2_sum46_fu_1539_p2;
reg   [30:0] a2_sum46_reg_2218;
wire   [30:0] a2_sum47_fu_1564_p2;
reg   [30:0] a2_sum47_reg_2229;
wire   [30:0] a2_sum48_fu_1579_p2;
reg   [30:0] a2_sum48_reg_2234;
wire   [30:0] a2_sum49_fu_1587_p2;
reg   [30:0] a2_sum49_reg_2239;
wire   [15:0] i_1_49_fu_1592_p2;
reg   [15:0] i_1_49_reg_2244;
wire   [31:0] sum_1_s_fu_1633_p2;
wire   [0:0] ap_CS_fsm_state61;
reg   [31:0] sum_reg_207;
reg   [15:0] i_reg_219;
wire   [31:0] tmp_1_fu_345_p1;
wire   [31:0] a2_sum_cast_fu_390_p1;
wire   [31:0] a2_sum5_cast_fu_419_p1;
wire   [31:0] a2_sum6_cast_fu_444_p1;
wire   [31:0] a2_sum7_cast_fu_469_p1;
wire   [31:0] a2_sum8_cast_fu_494_p1;
wire   [31:0] a2_sum9_cast_fu_519_p1;
wire   [31:0] a2_sum1_cast_fu_544_p1;
wire   [31:0] a2_sum2_cast_fu_569_p1;
wire   [31:0] a2_sum3_cast_fu_594_p1;
wire   [31:0] a2_sum4_cast_fu_619_p1;
wire   [31:0] a2_sum10_cast_fu_644_p1;
wire   [31:0] a2_sum11_cast_fu_669_p1;
wire   [31:0] a2_sum12_cast_fu_694_p1;
wire   [31:0] a2_sum13_cast_fu_719_p1;
wire   [31:0] a2_sum14_cast_fu_744_p1;
wire   [31:0] a2_sum15_cast_fu_769_p1;
wire   [31:0] a2_sum16_cast_fu_794_p1;
wire   [31:0] a2_sum17_cast_fu_819_p1;
wire   [31:0] a2_sum18_cast_fu_844_p1;
wire   [31:0] a2_sum19_cast_fu_869_p1;
wire   [31:0] a2_sum20_cast_fu_894_p1;
wire   [31:0] a2_sum21_cast_fu_919_p1;
wire   [31:0] a2_sum22_cast_fu_944_p1;
wire   [31:0] a2_sum23_cast_fu_969_p1;
wire   [31:0] a2_sum24_cast_fu_994_p1;
wire   [31:0] a2_sum25_cast_fu_1019_p1;
wire   [31:0] a2_sum26_cast_fu_1044_p1;
wire   [31:0] a2_sum27_cast_fu_1069_p1;
wire   [31:0] a2_sum28_cast_fu_1094_p1;
wire   [31:0] a2_sum29_cast_fu_1119_p1;
wire   [31:0] a2_sum30_cast_fu_1144_p1;
wire   [31:0] a2_sum31_cast_fu_1169_p1;
wire   [31:0] a2_sum32_cast_fu_1194_p1;
wire   [31:0] a2_sum33_cast_fu_1219_p1;
wire   [31:0] a2_sum34_cast_fu_1244_p1;
wire   [31:0] a2_sum35_cast_fu_1269_p1;
wire   [31:0] a2_sum36_cast_fu_1294_p1;
wire   [31:0] a2_sum37_cast_fu_1319_p1;
wire   [31:0] a2_sum38_cast_fu_1344_p1;
wire   [31:0] a2_sum39_cast_fu_1369_p1;
wire   [31:0] a2_sum40_cast_fu_1394_p1;
wire   [31:0] a2_sum41_cast_fu_1419_p1;
wire   [31:0] a2_sum42_cast_fu_1444_p1;
wire   [31:0] a2_sum43_cast_fu_1469_p1;
wire   [31:0] a2_sum44_cast_fu_1494_p1;
wire   [31:0] a2_sum45_cast_fu_1519_p1;
wire   [31:0] a2_sum46_cast_fu_1544_p1;
wire   [31:0] a2_sum47_cast_fu_1598_p1;
wire   [31:0] a2_sum48_cast_fu_1608_p1;
wire   [31:0] a2_sum49_cast_fu_1618_p1;
reg    ap_reg_ioackin_LOG_BUS_AWREADY;
reg    ap_reg_ioackin_LOG_BUS_WREADY;
reg    ap_reg_ioackin_A_BUS_ARREADY;
wire   [31:0] grp_fu_243_p2;
wire   [31:0] grp_fu_255_p2;
wire   [31:0] grp_fu_261_p2;
wire   [31:0] grp_fu_293_p2;
wire   [31:0] grp_fu_287_p2;
wire   [31:0] grp_fu_319_p2;
wire   [29:0] log3_fu_335_p4;
wire   [29:0] tmp_2_fu_355_p4;
wire   [30:0] i_cast_cast_fu_369_p1;
wire   [15:0] i_1_s_fu_400_p2;
wire   [30:0] i_1_cast_cast_fu_406_p1;
wire   [15:0] i_1_1_fu_429_p2;
wire   [30:0] i_1_1_cast_cast_fu_435_p1;
wire   [15:0] i_1_2_fu_454_p2;
wire   [30:0] i_1_2_cast_cast_fu_460_p1;
wire   [15:0] i_1_3_fu_479_p2;
wire   [30:0] i_1_3_cast_cast_fu_485_p1;
wire   [15:0] i_1_4_fu_504_p2;
wire   [30:0] i_1_4_cast_cast_fu_510_p1;
wire   [15:0] i_1_5_fu_529_p2;
wire   [30:0] i_1_5_cast_cast_fu_535_p1;
wire   [15:0] i_1_6_fu_554_p2;
wire   [30:0] i_1_6_cast_cast_fu_560_p1;
wire   [15:0] i_1_7_fu_579_p2;
wire   [30:0] i_1_7_cast_cast_fu_585_p1;
wire   [15:0] i_1_8_fu_604_p2;
wire   [30:0] i_1_8_cast_cast_fu_610_p1;
wire   [15:0] i_1_9_fu_629_p2;
wire   [30:0] i_1_9_cast_cast_fu_635_p1;
wire   [15:0] i_1_10_fu_654_p2;
wire   [30:0] i_1_10_cast_cast_fu_660_p1;
wire   [15:0] i_1_11_fu_679_p2;
wire   [30:0] i_1_11_cast_cast_fu_685_p1;
wire   [15:0] i_1_12_fu_704_p2;
wire   [30:0] i_1_12_cast_cast_fu_710_p1;
wire   [15:0] i_1_13_fu_729_p2;
wire   [30:0] i_1_13_cast_cast_fu_735_p1;
wire   [15:0] i_1_14_fu_754_p2;
wire   [30:0] i_1_14_cast_cast_fu_760_p1;
wire   [15:0] i_1_15_fu_779_p2;
wire   [30:0] i_1_15_cast_cast_fu_785_p1;
wire   [15:0] i_1_16_fu_804_p2;
wire   [30:0] i_1_16_cast_cast_fu_810_p1;
wire   [15:0] i_1_17_fu_829_p2;
wire   [30:0] i_1_17_cast_cast_fu_835_p1;
wire   [15:0] i_1_18_fu_854_p2;
wire   [30:0] i_1_18_cast_cast_fu_860_p1;
wire   [15:0] i_1_19_fu_879_p2;
wire   [30:0] i_1_19_cast_cast_fu_885_p1;
wire   [15:0] i_1_20_fu_904_p2;
wire   [30:0] i_1_20_cast_cast_fu_910_p1;
wire   [15:0] i_1_21_fu_929_p2;
wire   [30:0] i_1_21_cast_cast_fu_935_p1;
wire   [15:0] i_1_22_fu_954_p2;
wire   [30:0] i_1_22_cast_cast_fu_960_p1;
wire   [15:0] i_1_23_fu_979_p2;
wire   [30:0] i_1_23_cast_cast_fu_985_p1;
wire   [15:0] i_1_24_fu_1004_p2;
wire   [30:0] i_1_24_cast_cast_fu_1010_p1;
wire   [15:0] i_1_25_fu_1029_p2;
wire   [30:0] i_1_25_cast_cast_fu_1035_p1;
wire   [15:0] i_1_26_fu_1054_p2;
wire   [30:0] i_1_26_cast_cast_fu_1060_p1;
wire   [15:0] i_1_27_fu_1079_p2;
wire   [30:0] i_1_27_cast_cast_fu_1085_p1;
wire   [15:0] i_1_28_fu_1104_p2;
wire   [30:0] i_1_28_cast_cast_fu_1110_p1;
wire   [15:0] i_1_29_fu_1129_p2;
wire   [30:0] i_1_29_cast_cast_fu_1135_p1;
wire   [15:0] i_1_30_fu_1154_p2;
wire   [30:0] i_1_30_cast_cast_fu_1160_p1;
wire   [15:0] i_1_31_fu_1179_p2;
wire   [30:0] i_1_31_cast_cast_fu_1185_p1;
wire   [15:0] i_1_32_fu_1204_p2;
wire   [30:0] i_1_32_cast_cast_fu_1210_p1;
wire   [15:0] i_1_33_fu_1229_p2;
wire   [30:0] i_1_33_cast_cast_fu_1235_p1;
wire   [15:0] i_1_34_fu_1254_p2;
wire   [30:0] i_1_34_cast_cast_fu_1260_p1;
wire   [15:0] i_1_35_fu_1279_p2;
wire   [30:0] i_1_35_cast_cast_fu_1285_p1;
wire   [15:0] i_1_36_fu_1304_p2;
wire   [30:0] i_1_36_cast_cast_fu_1310_p1;
wire   [15:0] i_1_37_fu_1329_p2;
wire   [30:0] i_1_37_cast_cast_fu_1335_p1;
wire   [15:0] i_1_38_fu_1354_p2;
wire   [30:0] i_1_38_cast_cast_fu_1360_p1;
wire   [15:0] i_1_39_fu_1379_p2;
wire   [30:0] i_1_39_cast_cast_fu_1385_p1;
wire   [15:0] i_1_40_fu_1404_p2;
wire   [30:0] i_1_40_cast_cast_fu_1410_p1;
wire   [15:0] i_1_41_fu_1429_p2;
wire   [30:0] i_1_41_cast_cast_fu_1435_p1;
wire   [15:0] i_1_42_fu_1454_p2;
wire   [30:0] i_1_42_cast_cast_fu_1460_p1;
wire   [15:0] i_1_43_fu_1479_p2;
wire   [30:0] i_1_43_cast_cast_fu_1485_p1;
wire   [15:0] i_1_44_fu_1504_p2;
wire   [30:0] i_1_44_cast_cast_fu_1510_p1;
wire   [15:0] i_1_45_fu_1529_p2;
wire   [30:0] i_1_45_cast_cast_fu_1535_p1;
wire   [15:0] i_1_46_fu_1554_p2;
wire   [30:0] i_1_46_cast_cast_fu_1560_p1;
wire   [15:0] i_1_47_fu_1569_p2;
wire   [30:0] i_1_47_cast_cast_fu_1575_p1;
wire   [30:0] i_1_48_cast_cast_fu_1584_p1;
wire   [31:0] tmp_s_fu_1628_p2;
reg   [60:0] ap_NS_fsm;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 61'b1;
#0 ap_reg_ioackin_LOG_BUS_AWREADY = 1'b0;
#0 ap_reg_ioackin_LOG_BUS_WREADY = 1'b0;
#0 ap_reg_ioackin_A_BUS_ARREADY = 1'b0;
end

fetch_readalloc_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
fetch_readalloc_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(sum_reg_207),
    .a(a),
    .log(log)
);

fetch_readalloc_A_BUS_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_A_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_A_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_A_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_A_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_A_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_A_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_A_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_A_BUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_A_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_A_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_A_BUS_CACHE_VALUE ))
fetch_readalloc_A_BUS_m_axi_U(
    .AWVALID(m_axi_A_BUS_AWVALID),
    .AWREADY(m_axi_A_BUS_AWREADY),
    .AWADDR(m_axi_A_BUS_AWADDR),
    .AWID(m_axi_A_BUS_AWID),
    .AWLEN(m_axi_A_BUS_AWLEN),
    .AWSIZE(m_axi_A_BUS_AWSIZE),
    .AWBURST(m_axi_A_BUS_AWBURST),
    .AWLOCK(m_axi_A_BUS_AWLOCK),
    .AWCACHE(m_axi_A_BUS_AWCACHE),
    .AWPROT(m_axi_A_BUS_AWPROT),
    .AWQOS(m_axi_A_BUS_AWQOS),
    .AWREGION(m_axi_A_BUS_AWREGION),
    .AWUSER(m_axi_A_BUS_AWUSER),
    .WVALID(m_axi_A_BUS_WVALID),
    .WREADY(m_axi_A_BUS_WREADY),
    .WDATA(m_axi_A_BUS_WDATA),
    .WSTRB(m_axi_A_BUS_WSTRB),
    .WLAST(m_axi_A_BUS_WLAST),
    .WID(m_axi_A_BUS_WID),
    .WUSER(m_axi_A_BUS_WUSER),
    .ARVALID(m_axi_A_BUS_ARVALID),
    .ARREADY(m_axi_A_BUS_ARREADY),
    .ARADDR(m_axi_A_BUS_ARADDR),
    .ARID(m_axi_A_BUS_ARID),
    .ARLEN(m_axi_A_BUS_ARLEN),
    .ARSIZE(m_axi_A_BUS_ARSIZE),
    .ARBURST(m_axi_A_BUS_ARBURST),
    .ARLOCK(m_axi_A_BUS_ARLOCK),
    .ARCACHE(m_axi_A_BUS_ARCACHE),
    .ARPROT(m_axi_A_BUS_ARPROT),
    .ARQOS(m_axi_A_BUS_ARQOS),
    .ARREGION(m_axi_A_BUS_ARREGION),
    .ARUSER(m_axi_A_BUS_ARUSER),
    .RVALID(m_axi_A_BUS_RVALID),
    .RREADY(m_axi_A_BUS_RREADY),
    .RDATA(m_axi_A_BUS_RDATA),
    .RLAST(m_axi_A_BUS_RLAST),
    .RID(m_axi_A_BUS_RID),
    .RUSER(m_axi_A_BUS_RUSER),
    .RRESP(m_axi_A_BUS_RRESP),
    .BVALID(m_axi_A_BUS_BVALID),
    .BREADY(m_axi_A_BUS_BREADY),
    .BRESP(m_axi_A_BUS_BRESP),
    .BID(m_axi_A_BUS_BID),
    .BUSER(m_axi_A_BUS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(A_BUS_ARVALID),
    .I_ARREADY(A_BUS_ARREADY),
    .I_ARADDR(A_BUS_ARADDR),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_1),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(A_BUS_RVALID),
    .I_RREADY(A_BUS_RREADY),
    .I_RDATA(A_BUS_RDATA),
    .I_RID(A_BUS_RID),
    .I_RUSER(A_BUS_RUSER),
    .I_RRESP(A_BUS_RRESP),
    .I_RLAST(A_BUS_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(A_BUS_AWREADY),
    .I_AWADDR(ap_const_lv32_0),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_0),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(1'b0),
    .I_WREADY(A_BUS_WREADY),
    .I_WDATA(ap_const_lv32_0),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(ap_const_lv4_0),
    .I_BVALID(A_BUS_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(A_BUS_BRESP),
    .I_BID(A_BUS_BID),
    .I_BUSER(A_BUS_BUSER)
);

fetch_readalloc_LOG_BUS_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_LOG_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_LOG_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_LOG_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_LOG_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_LOG_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_LOG_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_LOG_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_LOG_BUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_LOG_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_LOG_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_LOG_BUS_CACHE_VALUE ))
fetch_readalloc_LOG_BUS_m_axi_U(
    .AWVALID(m_axi_LOG_BUS_AWVALID),
    .AWREADY(m_axi_LOG_BUS_AWREADY),
    .AWADDR(m_axi_LOG_BUS_AWADDR),
    .AWID(m_axi_LOG_BUS_AWID),
    .AWLEN(m_axi_LOG_BUS_AWLEN),
    .AWSIZE(m_axi_LOG_BUS_AWSIZE),
    .AWBURST(m_axi_LOG_BUS_AWBURST),
    .AWLOCK(m_axi_LOG_BUS_AWLOCK),
    .AWCACHE(m_axi_LOG_BUS_AWCACHE),
    .AWPROT(m_axi_LOG_BUS_AWPROT),
    .AWQOS(m_axi_LOG_BUS_AWQOS),
    .AWREGION(m_axi_LOG_BUS_AWREGION),
    .AWUSER(m_axi_LOG_BUS_AWUSER),
    .WVALID(m_axi_LOG_BUS_WVALID),
    .WREADY(m_axi_LOG_BUS_WREADY),
    .WDATA(m_axi_LOG_BUS_WDATA),
    .WSTRB(m_axi_LOG_BUS_WSTRB),
    .WLAST(m_axi_LOG_BUS_WLAST),
    .WID(m_axi_LOG_BUS_WID),
    .WUSER(m_axi_LOG_BUS_WUSER),
    .ARVALID(m_axi_LOG_BUS_ARVALID),
    .ARREADY(m_axi_LOG_BUS_ARREADY),
    .ARADDR(m_axi_LOG_BUS_ARADDR),
    .ARID(m_axi_LOG_BUS_ARID),
    .ARLEN(m_axi_LOG_BUS_ARLEN),
    .ARSIZE(m_axi_LOG_BUS_ARSIZE),
    .ARBURST(m_axi_LOG_BUS_ARBURST),
    .ARLOCK(m_axi_LOG_BUS_ARLOCK),
    .ARCACHE(m_axi_LOG_BUS_ARCACHE),
    .ARPROT(m_axi_LOG_BUS_ARPROT),
    .ARQOS(m_axi_LOG_BUS_ARQOS),
    .ARREGION(m_axi_LOG_BUS_ARREGION),
    .ARUSER(m_axi_LOG_BUS_ARUSER),
    .RVALID(m_axi_LOG_BUS_RVALID),
    .RREADY(m_axi_LOG_BUS_RREADY),
    .RDATA(m_axi_LOG_BUS_RDATA),
    .RLAST(m_axi_LOG_BUS_RLAST),
    .RID(m_axi_LOG_BUS_RID),
    .RUSER(m_axi_LOG_BUS_RUSER),
    .RRESP(m_axi_LOG_BUS_RRESP),
    .BVALID(m_axi_LOG_BUS_BVALID),
    .BREADY(m_axi_LOG_BUS_BREADY),
    .BRESP(m_axi_LOG_BUS_BRESP),
    .BID(m_axi_LOG_BUS_BID),
    .BUSER(m_axi_LOG_BUS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(LOG_BUS_ARREADY),
    .I_ARADDR(ap_const_lv32_0),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_0),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(LOG_BUS_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(LOG_BUS_RDATA),
    .I_RID(LOG_BUS_RID),
    .I_RUSER(LOG_BUS_RUSER),
    .I_RRESP(LOG_BUS_RRESP),
    .I_RLAST(LOG_BUS_RLAST),
    .I_AWVALID(LOG_BUS_AWVALID),
    .I_AWREADY(LOG_BUS_AWREADY),
    .I_AWADDR(LOG_BUS_addr_reg_1639),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_1),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(LOG_BUS_WVALID),
    .I_WREADY(LOG_BUS_WREADY),
    .I_WDATA(LOG_BUS_WDATA),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(ap_const_lv4_F),
    .I_BVALID(LOG_BUS_BVALID),
    .I_BREADY(LOG_BUS_BREADY),
    .I_BRESP(LOG_BUS_BRESP),
    .I_BID(LOG_BUS_BID),
    .I_BUSER(LOG_BUS_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_A_BUS_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state10) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state13) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state16) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state19) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state22) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state25) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state28) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state31) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state33) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state35) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state38) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state41) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state44) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state47) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state50) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state11) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state14) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state17) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state20) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state23) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state26) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state29) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state32) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state34) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state36) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state39) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state42) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state45) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state48) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state51) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state12) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state15) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state18) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state21) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state24) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state27) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state30) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state37) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state40) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state43) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state46) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state49) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state52) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == ap_sig_ioackin_A_BUS_ARREADY) | (1'b0 == ap_sig_ioackin_LOG_BUS_WREADY))) | ((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state6) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state7) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state8) & ~((1'b0 == ap_sig_ioackin_A_BUS_ARREADY) | (LOG_BUS_BVALID == 1'b0))) | ((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
            ap_reg_ioackin_A_BUS_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state3) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state4) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state5) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state7) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == A_BUS_ARREADY) & ~(LOG_BUS_BVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state9) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state10) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state11) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state12) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state13) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state14) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state15) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state16) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state17) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state18) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state19) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state20) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state21) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state22) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state23) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state24) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state25) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state26) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state27) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state28) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state29) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state30) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state31) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state32) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state33) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state34) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state35) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state36) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state37) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state38) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state39) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state40) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state41) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state42) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state43) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state44) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state45) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state46) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state47) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state48) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state49) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state50) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state51) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state52) & ~(A_BUS_RVALID == 1'b0) & (1'b1 == A_BUS_ARREADY)))) begin
            ap_reg_ioackin_A_BUS_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_LOG_BUS_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_373_p2 == 1'b0))) begin
            if (~((exitcond_fu_373_p2 == 1'b0) & (1'b0 == ap_sig_ioackin_LOG_BUS_AWREADY))) begin
                ap_reg_ioackin_LOG_BUS_AWREADY <= 1'b0;
            end else if ((1'b1 == LOG_BUS_AWREADY)) begin
                ap_reg_ioackin_LOG_BUS_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_LOG_BUS_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            if (~((1'b0 == ap_sig_ioackin_A_BUS_ARREADY) | (1'b0 == ap_sig_ioackin_LOG_BUS_WREADY))) begin
                ap_reg_ioackin_LOG_BUS_WREADY <= 1'b0;
            end else if ((1'b1 == LOG_BUS_WREADY)) begin
                ap_reg_ioackin_LOG_BUS_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        i_reg_219 <= i_1_49_reg_2244;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_219 <= ap_const_lv16_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        sum_reg_207 <= sum_1_s_fu_1633_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        sum_reg_207 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        LOG_BUS_addr_reg_1639[29 : 0] <= tmp_1_fu_345_p1[29 : 0];
        tmp_2_cast_reg_1644[29 : 0] <= tmp_2_cast_fu_365_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum10_reg_1817 <= a2_sum10_fu_639_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum11_reg_1828 <= a2_sum11_fu_664_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum12_reg_1839 <= a2_sum12_fu_689_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum13_reg_1850 <= a2_sum13_fu_714_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum14_reg_1861 <= a2_sum14_fu_739_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum15_reg_1872 <= a2_sum15_fu_764_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum16_reg_1883 <= a2_sum16_fu_789_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum17_reg_1894 <= a2_sum17_fu_814_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum18_reg_1905 <= a2_sum18_fu_839_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum19_reg_1916 <= a2_sum19_fu_864_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~((1'b0 == ap_sig_ioackin_A_BUS_ARREADY) | (LOG_BUS_BVALID == 1'b0)))) begin
        a2_sum1_reg_1773 <= a2_sum1_fu_539_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum20_reg_1927 <= a2_sum20_fu_889_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum21_reg_1938 <= a2_sum21_fu_914_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum22_reg_1949 <= a2_sum22_fu_939_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum23_reg_1960 <= a2_sum23_fu_964_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum24_reg_1971 <= a2_sum24_fu_989_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum25_reg_1982 <= a2_sum25_fu_1014_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum26_reg_1993 <= a2_sum26_fu_1039_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum27_reg_2004 <= a2_sum27_fu_1064_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state30) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum28_reg_2015 <= a2_sum28_fu_1089_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum29_reg_2026 <= a2_sum29_fu_1114_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
        a2_sum2_reg_1784 <= a2_sum2_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum30_reg_2037 <= a2_sum30_fu_1139_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum31_reg_2048 <= a2_sum31_fu_1164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum32_reg_2059 <= a2_sum32_fu_1189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum33_reg_2070 <= a2_sum33_fu_1214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum34_reg_2081 <= a2_sum34_fu_1239_p2;
        tmp_reg_2086 <= grp_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum35_reg_2097 <= a2_sum35_fu_1264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum36_reg_2108 <= a2_sum36_fu_1289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum37_reg_2119 <= a2_sum37_fu_1314_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum38_reg_2130 <= a2_sum38_fu_1339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum39_reg_2141 <= a2_sum39_fu_1364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum3_reg_1795 <= a2_sum3_fu_589_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum40_reg_2152 <= a2_sum40_fu_1389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum41_reg_2163 <= a2_sum41_fu_1414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum42_reg_2174 <= a2_sum42_fu_1439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum43_reg_2185 <= a2_sum43_fu_1464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum44_reg_2196 <= a2_sum44_fu_1489_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum45_reg_2207 <= a2_sum45_fu_1514_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum46_reg_2218 <= a2_sum46_fu_1539_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum47_reg_2229 <= a2_sum47_fu_1564_p2;
        a2_sum48_reg_2234 <= a2_sum48_fu_1579_p2;
        a2_sum49_reg_2239 <= a2_sum49_fu_1587_p2;
        i_1_49_reg_2244 <= i_1_49_fu_1592_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
        a2_sum4_reg_1806 <= a2_sum4_fu_614_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((1'b0 == ap_sig_ioackin_A_BUS_ARREADY) | (1'b0 == ap_sig_ioackin_LOG_BUS_WREADY)))) begin
        a2_sum5_reg_1718 <= a2_sum5_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
        a2_sum6_reg_1729 <= a2_sum6_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
        a2_sum7_reg_1740 <= a2_sum7_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
        a2_sum8_reg_1751 <= a2_sum8_fu_489_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
        a2_sum9_reg_1762 <= a2_sum9_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_373_p2 == 1'b0) & ~((exitcond_fu_373_p2 == 1'b0) & (1'b0 == ap_sig_ioackin_LOG_BUS_AWREADY)))) begin
        a2_sum_reg_1701 <= a2_sum_fu_379_p2;
        i_1_48_reg_1706 <= i_1_48_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state10) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state13) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state16) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state19) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state22) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state25) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state28) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state31) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state33) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state35) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state38) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state41) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state44) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state47) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state50) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state53) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state56) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state58) & ~(A_BUS_RVALID == 1'b0)))) begin
        reg_231 <= A_BUS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state11) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state14) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state17) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state20) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state23) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state26) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state29) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state32) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state34) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state36) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state39) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state42) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state45) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state48) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state51) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state54) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state57) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state59) & ~(A_BUS_RVALID == 1'b0)))) begin
        reg_235 <= A_BUS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state12) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state15) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state18) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state21) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state24) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state27) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state30) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state37) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state40) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state43) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state46) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state49) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state52) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state55) & ~(A_BUS_RVALID == 1'b0)))) begin
        reg_239 <= A_BUS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state13) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state19) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state25) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state31) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state38) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state44) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state50) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state56) & ~(A_BUS_RVALID == 1'b0)))) begin
        reg_273 <= grp_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state33) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state58) & ~(A_BUS_RVALID == 1'b0)))) begin
        reg_277 <= grp_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state16) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state28) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state41) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state53) & ~(A_BUS_RVALID == 1'b0)))) begin
        reg_305 <= grp_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state35) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | (1'b1 == ap_CS_fsm_state60))) begin
        reg_309 <= grp_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state22) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state47) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))))) begin
        reg_325 <= grp_fu_313_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) begin
        if (((1'b1 == ap_CS_fsm_state52) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum49_cast_fu_1618_p1;
        end else if (((1'b1 == ap_CS_fsm_state51) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum48_cast_fu_1608_p1;
        end else if (((1'b1 == ap_CS_fsm_state50) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum47_cast_fu_1598_p1;
        end else if (((1'b1 == ap_CS_fsm_state49) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum46_cast_fu_1544_p1;
        end else if (((1'b1 == ap_CS_fsm_state48) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum45_cast_fu_1519_p1;
        end else if (((1'b1 == ap_CS_fsm_state47) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum44_cast_fu_1494_p1;
        end else if (((1'b1 == ap_CS_fsm_state46) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum43_cast_fu_1469_p1;
        end else if (((1'b1 == ap_CS_fsm_state45) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum42_cast_fu_1444_p1;
        end else if (((1'b1 == ap_CS_fsm_state44) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum41_cast_fu_1419_p1;
        end else if (((1'b1 == ap_CS_fsm_state43) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum40_cast_fu_1394_p1;
        end else if (((1'b1 == ap_CS_fsm_state42) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum39_cast_fu_1369_p1;
        end else if (((1'b1 == ap_CS_fsm_state41) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum38_cast_fu_1344_p1;
        end else if (((1'b1 == ap_CS_fsm_state40) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum37_cast_fu_1319_p1;
        end else if (((1'b1 == ap_CS_fsm_state39) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum36_cast_fu_1294_p1;
        end else if (((1'b1 == ap_CS_fsm_state38) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum35_cast_fu_1269_p1;
        end else if (((1'b1 == ap_CS_fsm_state37) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum34_cast_fu_1244_p1;
        end else if (((1'b1 == ap_CS_fsm_state36) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum33_cast_fu_1219_p1;
        end else if (((1'b1 == ap_CS_fsm_state35) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum32_cast_fu_1194_p1;
        end else if (((1'b1 == ap_CS_fsm_state34) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum31_cast_fu_1169_p1;
        end else if (((1'b1 == ap_CS_fsm_state33) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum30_cast_fu_1144_p1;
        end else if (((1'b1 == ap_CS_fsm_state32) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum29_cast_fu_1119_p1;
        end else if (((1'b1 == ap_CS_fsm_state31) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum28_cast_fu_1094_p1;
        end else if (((1'b1 == ap_CS_fsm_state30) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum27_cast_fu_1069_p1;
        end else if (((1'b1 == ap_CS_fsm_state29) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum26_cast_fu_1044_p1;
        end else if (((1'b1 == ap_CS_fsm_state28) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum25_cast_fu_1019_p1;
        end else if (((1'b1 == ap_CS_fsm_state27) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum24_cast_fu_994_p1;
        end else if (((1'b1 == ap_CS_fsm_state26) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum23_cast_fu_969_p1;
        end else if (((1'b1 == ap_CS_fsm_state25) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum22_cast_fu_944_p1;
        end else if (((1'b1 == ap_CS_fsm_state24) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum21_cast_fu_919_p1;
        end else if (((1'b1 == ap_CS_fsm_state23) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum20_cast_fu_894_p1;
        end else if (((1'b1 == ap_CS_fsm_state22) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum19_cast_fu_869_p1;
        end else if (((1'b1 == ap_CS_fsm_state21) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum18_cast_fu_844_p1;
        end else if (((1'b1 == ap_CS_fsm_state20) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum17_cast_fu_819_p1;
        end else if (((1'b1 == ap_CS_fsm_state19) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum16_cast_fu_794_p1;
        end else if (((1'b1 == ap_CS_fsm_state18) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum15_cast_fu_769_p1;
        end else if (((1'b1 == ap_CS_fsm_state17) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum14_cast_fu_744_p1;
        end else if (((1'b1 == ap_CS_fsm_state16) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum13_cast_fu_719_p1;
        end else if (((1'b1 == ap_CS_fsm_state15) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum12_cast_fu_694_p1;
        end else if (((1'b1 == ap_CS_fsm_state14) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum11_cast_fu_669_p1;
        end else if (((1'b1 == ap_CS_fsm_state13) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum10_cast_fu_644_p1;
        end else if (((1'b1 == ap_CS_fsm_state12) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum4_cast_fu_619_p1;
        end else if (((1'b1 == ap_CS_fsm_state11) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum3_cast_fu_594_p1;
        end else if (((1'b1 == ap_CS_fsm_state10) & ~(A_BUS_RVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum2_cast_fu_569_p1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            A_BUS_ARADDR = a2_sum1_cast_fu_544_p1;
        end else if (((1'b1 == ap_CS_fsm_state8) & ~(LOG_BUS_BVALID == 1'b0))) begin
            A_BUS_ARADDR = a2_sum9_cast_fu_519_p1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            A_BUS_ARADDR = a2_sum8_cast_fu_494_p1;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            A_BUS_ARADDR = a2_sum7_cast_fu_469_p1;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            A_BUS_ARADDR = a2_sum6_cast_fu_444_p1;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            A_BUS_ARADDR = a2_sum5_cast_fu_419_p1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            A_BUS_ARADDR = a2_sum_cast_fu_390_p1;
        end else begin
            A_BUS_ARADDR = 'bx;
        end
    end else begin
        A_BUS_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY) & ~(LOG_BUS_BVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state10) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state11) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state12) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state13) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state14) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state15) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state16) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state17) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state18) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state19) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state20) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state21) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state22) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state23) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state24) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state25) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state26) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state27) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state28) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state29) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state30) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state31) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state32) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state33) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state34) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state35) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state36) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state37) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state38) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state39) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state40) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state41) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state42) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state43) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state44) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state45) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state46) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state47) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state48) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state49) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state50) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state51) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state52) & ~(A_BUS_RVALID == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)))) begin
        A_BUS_ARVALID = 1'b1;
    end else begin
        A_BUS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state10) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state13) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state16) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state19) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state22) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state25) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state28) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state31) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state33) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state35) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state38) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state41) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state44) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state47) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state50) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state53) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state56) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state58) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state11) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state14) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state17) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state20) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state23) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state26) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state29) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state32) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state34) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state36) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state39) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state42) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state45) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state48) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state51) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state54) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state57) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state59) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state12) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state15) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state18) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state21) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state24) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state27) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state30) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state37) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state40) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state43) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state46) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state49) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state52) & ~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) | ((1'b1 == ap_CS_fsm_state55) & ~(A_BUS_RVALID == 1'b0)))) begin
        A_BUS_RREADY = 1'b1;
    end else begin
        A_BUS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52))) begin
        A_BUS_blk_n_AR = m_axi_A_BUS_ARREADY;
    end else begin
        A_BUS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state59))) begin
        A_BUS_blk_n_R = m_axi_A_BUS_RVALID;
    end else begin
        A_BUS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_373_p2 == 1'b0) & (1'b0 == ap_reg_ioackin_LOG_BUS_AWREADY))) begin
        LOG_BUS_AWVALID = 1'b1;
    end else begin
        LOG_BUS_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~((1'b0 == ap_sig_ioackin_A_BUS_ARREADY) | (LOG_BUS_BVALID == 1'b0)))) begin
        LOG_BUS_BREADY = 1'b1;
    end else begin
        LOG_BUS_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_reg_ioackin_LOG_BUS_WREADY))) begin
        LOG_BUS_WVALID = 1'b1;
    end else begin
        LOG_BUS_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_373_p2 == 1'b0))) begin
        LOG_BUS_blk_n_AW = m_axi_LOG_BUS_AWREADY;
    end else begin
        LOG_BUS_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        LOG_BUS_blk_n_B = m_axi_LOG_BUS_BVALID;
    end else begin
        LOG_BUS_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LOG_BUS_blk_n_W = m_axi_LOG_BUS_WREADY;
    end else begin
        LOG_BUS_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((exitcond_fu_373_p2 == 1'b0) & (1'b0 == ap_sig_ioackin_LOG_BUS_AWREADY)) & ~(exitcond_fu_373_p2 == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~((exitcond_fu_373_p2 == 1'b0) & (1'b0 == ap_sig_ioackin_LOG_BUS_AWREADY)) & ~(exitcond_fu_373_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) begin
        ap_sig_ioackin_A_BUS_ARREADY = A_BUS_ARREADY;
    end else begin
        ap_sig_ioackin_A_BUS_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_LOG_BUS_AWREADY)) begin
        ap_sig_ioackin_LOG_BUS_AWREADY = LOG_BUS_AWREADY;
    end else begin
        ap_sig_ioackin_LOG_BUS_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_LOG_BUS_WREADY)) begin
        ap_sig_ioackin_LOG_BUS_WREADY = LOG_BUS_WREADY;
    end else begin
        ap_sig_ioackin_LOG_BUS_WREADY = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((exitcond_fu_373_p2 == 1'b0) & (1'b0 == ap_sig_ioackin_LOG_BUS_AWREADY)) & ~(exitcond_fu_373_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((exitcond_fu_373_p2 == 1'b0) & ~((exitcond_fu_373_p2 == 1'b0) & (1'b0 == ap_sig_ioackin_LOG_BUS_AWREADY)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~((1'b0 == ap_sig_ioackin_A_BUS_ARREADY) | (1'b0 == ap_sig_ioackin_LOG_BUS_WREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (~((1'b0 == ap_sig_ioackin_A_BUS_ARREADY) | (LOG_BUS_BVALID == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state50 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state52 : begin
            if (~((A_BUS_RVALID == 1'b0) | (1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state53 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state56 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state57 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state58 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LOG_BUS_WDATA = i_1_48_reg_1706;

assign a2_sum10_cast_fu_644_p1 = a2_sum10_reg_1817;

assign a2_sum10_fu_639_p2 = (i_1_9_cast_cast_fu_635_p1 + tmp_2_cast_reg_1644);

assign a2_sum11_cast_fu_669_p1 = a2_sum11_reg_1828;

assign a2_sum11_fu_664_p2 = (i_1_10_cast_cast_fu_660_p1 + tmp_2_cast_reg_1644);

assign a2_sum12_cast_fu_694_p1 = a2_sum12_reg_1839;

assign a2_sum12_fu_689_p2 = (i_1_11_cast_cast_fu_685_p1 + tmp_2_cast_reg_1644);

assign a2_sum13_cast_fu_719_p1 = a2_sum13_reg_1850;

assign a2_sum13_fu_714_p2 = (i_1_12_cast_cast_fu_710_p1 + tmp_2_cast_reg_1644);

assign a2_sum14_cast_fu_744_p1 = a2_sum14_reg_1861;

assign a2_sum14_fu_739_p2 = (i_1_13_cast_cast_fu_735_p1 + tmp_2_cast_reg_1644);

assign a2_sum15_cast_fu_769_p1 = a2_sum15_reg_1872;

assign a2_sum15_fu_764_p2 = (i_1_14_cast_cast_fu_760_p1 + tmp_2_cast_reg_1644);

assign a2_sum16_cast_fu_794_p1 = a2_sum16_reg_1883;

assign a2_sum16_fu_789_p2 = (i_1_15_cast_cast_fu_785_p1 + tmp_2_cast_reg_1644);

assign a2_sum17_cast_fu_819_p1 = a2_sum17_reg_1894;

assign a2_sum17_fu_814_p2 = (i_1_16_cast_cast_fu_810_p1 + tmp_2_cast_reg_1644);

assign a2_sum18_cast_fu_844_p1 = a2_sum18_reg_1905;

assign a2_sum18_fu_839_p2 = (i_1_17_cast_cast_fu_835_p1 + tmp_2_cast_reg_1644);

assign a2_sum19_cast_fu_869_p1 = a2_sum19_reg_1916;

assign a2_sum19_fu_864_p2 = (i_1_18_cast_cast_fu_860_p1 + tmp_2_cast_reg_1644);

assign a2_sum1_cast_fu_544_p1 = a2_sum1_reg_1773;

assign a2_sum1_fu_539_p2 = (i_1_5_cast_cast_fu_535_p1 + tmp_2_cast_reg_1644);

assign a2_sum20_cast_fu_894_p1 = a2_sum20_reg_1927;

assign a2_sum20_fu_889_p2 = (i_1_19_cast_cast_fu_885_p1 + tmp_2_cast_reg_1644);

assign a2_sum21_cast_fu_919_p1 = a2_sum21_reg_1938;

assign a2_sum21_fu_914_p2 = (i_1_20_cast_cast_fu_910_p1 + tmp_2_cast_reg_1644);

assign a2_sum22_cast_fu_944_p1 = a2_sum22_reg_1949;

assign a2_sum22_fu_939_p2 = (i_1_21_cast_cast_fu_935_p1 + tmp_2_cast_reg_1644);

assign a2_sum23_cast_fu_969_p1 = a2_sum23_reg_1960;

assign a2_sum23_fu_964_p2 = (i_1_22_cast_cast_fu_960_p1 + tmp_2_cast_reg_1644);

assign a2_sum24_cast_fu_994_p1 = a2_sum24_reg_1971;

assign a2_sum24_fu_989_p2 = (i_1_23_cast_cast_fu_985_p1 + tmp_2_cast_reg_1644);

assign a2_sum25_cast_fu_1019_p1 = a2_sum25_reg_1982;

assign a2_sum25_fu_1014_p2 = (i_1_24_cast_cast_fu_1010_p1 + tmp_2_cast_reg_1644);

assign a2_sum26_cast_fu_1044_p1 = a2_sum26_reg_1993;

assign a2_sum26_fu_1039_p2 = (i_1_25_cast_cast_fu_1035_p1 + tmp_2_cast_reg_1644);

assign a2_sum27_cast_fu_1069_p1 = a2_sum27_reg_2004;

assign a2_sum27_fu_1064_p2 = (i_1_26_cast_cast_fu_1060_p1 + tmp_2_cast_reg_1644);

assign a2_sum28_cast_fu_1094_p1 = a2_sum28_reg_2015;

assign a2_sum28_fu_1089_p2 = (i_1_27_cast_cast_fu_1085_p1 + tmp_2_cast_reg_1644);

assign a2_sum29_cast_fu_1119_p1 = a2_sum29_reg_2026;

assign a2_sum29_fu_1114_p2 = (i_1_28_cast_cast_fu_1110_p1 + tmp_2_cast_reg_1644);

assign a2_sum2_cast_fu_569_p1 = a2_sum2_reg_1784;

assign a2_sum2_fu_564_p2 = (i_1_6_cast_cast_fu_560_p1 + tmp_2_cast_reg_1644);

assign a2_sum30_cast_fu_1144_p1 = a2_sum30_reg_2037;

assign a2_sum30_fu_1139_p2 = (i_1_29_cast_cast_fu_1135_p1 + tmp_2_cast_reg_1644);

assign a2_sum31_cast_fu_1169_p1 = a2_sum31_reg_2048;

assign a2_sum31_fu_1164_p2 = (i_1_30_cast_cast_fu_1160_p1 + tmp_2_cast_reg_1644);

assign a2_sum32_cast_fu_1194_p1 = a2_sum32_reg_2059;

assign a2_sum32_fu_1189_p2 = (i_1_31_cast_cast_fu_1185_p1 + tmp_2_cast_reg_1644);

assign a2_sum33_cast_fu_1219_p1 = a2_sum33_reg_2070;

assign a2_sum33_fu_1214_p2 = (i_1_32_cast_cast_fu_1210_p1 + tmp_2_cast_reg_1644);

assign a2_sum34_cast_fu_1244_p1 = a2_sum34_reg_2081;

assign a2_sum34_fu_1239_p2 = (i_1_33_cast_cast_fu_1235_p1 + tmp_2_cast_reg_1644);

assign a2_sum35_cast_fu_1269_p1 = a2_sum35_reg_2097;

assign a2_sum35_fu_1264_p2 = (i_1_34_cast_cast_fu_1260_p1 + tmp_2_cast_reg_1644);

assign a2_sum36_cast_fu_1294_p1 = a2_sum36_reg_2108;

assign a2_sum36_fu_1289_p2 = (i_1_35_cast_cast_fu_1285_p1 + tmp_2_cast_reg_1644);

assign a2_sum37_cast_fu_1319_p1 = a2_sum37_reg_2119;

assign a2_sum37_fu_1314_p2 = (i_1_36_cast_cast_fu_1310_p1 + tmp_2_cast_reg_1644);

assign a2_sum38_cast_fu_1344_p1 = a2_sum38_reg_2130;

assign a2_sum38_fu_1339_p2 = (i_1_37_cast_cast_fu_1335_p1 + tmp_2_cast_reg_1644);

assign a2_sum39_cast_fu_1369_p1 = a2_sum39_reg_2141;

assign a2_sum39_fu_1364_p2 = (i_1_38_cast_cast_fu_1360_p1 + tmp_2_cast_reg_1644);

assign a2_sum3_cast_fu_594_p1 = a2_sum3_reg_1795;

assign a2_sum3_fu_589_p2 = (i_1_7_cast_cast_fu_585_p1 + tmp_2_cast_reg_1644);

assign a2_sum40_cast_fu_1394_p1 = a2_sum40_reg_2152;

assign a2_sum40_fu_1389_p2 = (i_1_39_cast_cast_fu_1385_p1 + tmp_2_cast_reg_1644);

assign a2_sum41_cast_fu_1419_p1 = a2_sum41_reg_2163;

assign a2_sum41_fu_1414_p2 = (i_1_40_cast_cast_fu_1410_p1 + tmp_2_cast_reg_1644);

assign a2_sum42_cast_fu_1444_p1 = a2_sum42_reg_2174;

assign a2_sum42_fu_1439_p2 = (i_1_41_cast_cast_fu_1435_p1 + tmp_2_cast_reg_1644);

assign a2_sum43_cast_fu_1469_p1 = a2_sum43_reg_2185;

assign a2_sum43_fu_1464_p2 = (i_1_42_cast_cast_fu_1460_p1 + tmp_2_cast_reg_1644);

assign a2_sum44_cast_fu_1494_p1 = a2_sum44_reg_2196;

assign a2_sum44_fu_1489_p2 = (i_1_43_cast_cast_fu_1485_p1 + tmp_2_cast_reg_1644);

assign a2_sum45_cast_fu_1519_p1 = a2_sum45_reg_2207;

assign a2_sum45_fu_1514_p2 = (i_1_44_cast_cast_fu_1510_p1 + tmp_2_cast_reg_1644);

assign a2_sum46_cast_fu_1544_p1 = a2_sum46_reg_2218;

assign a2_sum46_fu_1539_p2 = (i_1_45_cast_cast_fu_1535_p1 + tmp_2_cast_reg_1644);

assign a2_sum47_cast_fu_1598_p1 = a2_sum47_reg_2229;

assign a2_sum47_fu_1564_p2 = (i_1_46_cast_cast_fu_1560_p1 + tmp_2_cast_reg_1644);

assign a2_sum48_cast_fu_1608_p1 = a2_sum48_reg_2234;

assign a2_sum48_fu_1579_p2 = (i_1_47_cast_cast_fu_1575_p1 + tmp_2_cast_reg_1644);

assign a2_sum49_cast_fu_1618_p1 = a2_sum49_reg_2239;

assign a2_sum49_fu_1587_p2 = (i_1_48_cast_cast_fu_1584_p1 + tmp_2_cast_reg_1644);

assign a2_sum4_cast_fu_619_p1 = a2_sum4_reg_1806;

assign a2_sum4_fu_614_p2 = (i_1_8_cast_cast_fu_610_p1 + tmp_2_cast_reg_1644);

assign a2_sum5_cast_fu_419_p1 = a2_sum5_reg_1718;

assign a2_sum5_fu_410_p2 = (i_1_cast_cast_fu_406_p1 + tmp_2_cast_reg_1644);

assign a2_sum6_cast_fu_444_p1 = a2_sum6_reg_1729;

assign a2_sum6_fu_439_p2 = (i_1_1_cast_cast_fu_435_p1 + tmp_2_cast_reg_1644);

assign a2_sum7_cast_fu_469_p1 = a2_sum7_reg_1740;

assign a2_sum7_fu_464_p2 = (i_1_2_cast_cast_fu_460_p1 + tmp_2_cast_reg_1644);

assign a2_sum8_cast_fu_494_p1 = a2_sum8_reg_1751;

assign a2_sum8_fu_489_p2 = (i_1_3_cast_cast_fu_485_p1 + tmp_2_cast_reg_1644);

assign a2_sum9_cast_fu_519_p1 = a2_sum9_reg_1762;

assign a2_sum9_fu_514_p2 = (i_1_4_cast_cast_fu_510_p1 + tmp_2_cast_reg_1644);

assign a2_sum_cast_fu_390_p1 = a2_sum_reg_1701;

assign a2_sum_fu_379_p2 = (i_cast_cast_fu_369_p1 + tmp_2_cast_reg_1644);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state22 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state23 = ap_CS_fsm[ap_const_lv32_16];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state28 = ap_CS_fsm[ap_const_lv32_1B];

assign ap_CS_fsm_state29 = ap_CS_fsm[ap_const_lv32_1C];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state30 = ap_CS_fsm[ap_const_lv32_1D];

assign ap_CS_fsm_state31 = ap_CS_fsm[ap_const_lv32_1E];

assign ap_CS_fsm_state32 = ap_CS_fsm[ap_const_lv32_1F];

assign ap_CS_fsm_state33 = ap_CS_fsm[ap_const_lv32_20];

assign ap_CS_fsm_state34 = ap_CS_fsm[ap_const_lv32_21];

assign ap_CS_fsm_state35 = ap_CS_fsm[ap_const_lv32_22];

assign ap_CS_fsm_state36 = ap_CS_fsm[ap_const_lv32_23];

assign ap_CS_fsm_state37 = ap_CS_fsm[ap_const_lv32_24];

assign ap_CS_fsm_state38 = ap_CS_fsm[ap_const_lv32_25];

assign ap_CS_fsm_state39 = ap_CS_fsm[ap_const_lv32_26];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state40 = ap_CS_fsm[ap_const_lv32_27];

assign ap_CS_fsm_state41 = ap_CS_fsm[ap_const_lv32_28];

assign ap_CS_fsm_state42 = ap_CS_fsm[ap_const_lv32_29];

assign ap_CS_fsm_state43 = ap_CS_fsm[ap_const_lv32_2A];

assign ap_CS_fsm_state44 = ap_CS_fsm[ap_const_lv32_2B];

assign ap_CS_fsm_state45 = ap_CS_fsm[ap_const_lv32_2C];

assign ap_CS_fsm_state46 = ap_CS_fsm[ap_const_lv32_2D];

assign ap_CS_fsm_state47 = ap_CS_fsm[ap_const_lv32_2E];

assign ap_CS_fsm_state48 = ap_CS_fsm[ap_const_lv32_2F];

assign ap_CS_fsm_state49 = ap_CS_fsm[ap_const_lv32_30];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state50 = ap_CS_fsm[ap_const_lv32_31];

assign ap_CS_fsm_state51 = ap_CS_fsm[ap_const_lv32_32];

assign ap_CS_fsm_state52 = ap_CS_fsm[ap_const_lv32_33];

assign ap_CS_fsm_state53 = ap_CS_fsm[ap_const_lv32_34];

assign ap_CS_fsm_state54 = ap_CS_fsm[ap_const_lv32_35];

assign ap_CS_fsm_state55 = ap_CS_fsm[ap_const_lv32_36];

assign ap_CS_fsm_state56 = ap_CS_fsm[ap_const_lv32_37];

assign ap_CS_fsm_state57 = ap_CS_fsm[ap_const_lv32_38];

assign ap_CS_fsm_state58 = ap_CS_fsm[ap_const_lv32_39];

assign ap_CS_fsm_state59 = ap_CS_fsm[ap_const_lv32_3A];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state60 = ap_CS_fsm[ap_const_lv32_3B];

assign ap_CS_fsm_state61 = ap_CS_fsm[ap_const_lv32_3C];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_fu_373_p2 = ((i_reg_219 == ap_const_lv16_FA00) ? 1'b1 : 1'b0);

assign grp_fu_243_p2 = (reg_239 + reg_235);

assign grp_fu_249_p2 = (reg_231 + grp_fu_243_p2);

assign grp_fu_255_p2 = (reg_239 + reg_235);

assign grp_fu_261_p2 = (reg_231 + grp_fu_255_p2);

assign grp_fu_267_p2 = (reg_235 + reg_231);

assign grp_fu_281_p2 = (reg_273 + grp_fu_261_p2);

assign grp_fu_287_p2 = (reg_273 + grp_fu_249_p2);

assign grp_fu_293_p2 = (reg_277 + grp_fu_267_p2);

assign grp_fu_299_p2 = (reg_273 + grp_fu_293_p2);

assign grp_fu_313_p2 = (reg_305 + grp_fu_287_p2);

assign grp_fu_319_p2 = (reg_305 + reg_309);

assign grp_fu_329_p2 = (reg_325 + grp_fu_319_p2);

assign i_1_10_cast_cast_fu_660_p1 = i_1_10_fu_654_p2;

assign i_1_10_fu_654_p2 = (i_reg_219 + ap_const_lv16_B);

assign i_1_11_cast_cast_fu_685_p1 = i_1_11_fu_679_p2;

assign i_1_11_fu_679_p2 = (i_reg_219 + ap_const_lv16_C);

assign i_1_12_cast_cast_fu_710_p1 = i_1_12_fu_704_p2;

assign i_1_12_fu_704_p2 = (i_reg_219 + ap_const_lv16_D);

assign i_1_13_cast_cast_fu_735_p1 = i_1_13_fu_729_p2;

assign i_1_13_fu_729_p2 = (i_reg_219 + ap_const_lv16_E);

assign i_1_14_cast_cast_fu_760_p1 = i_1_14_fu_754_p2;

assign i_1_14_fu_754_p2 = (i_reg_219 + ap_const_lv16_F);

assign i_1_15_cast_cast_fu_785_p1 = i_1_15_fu_779_p2;

assign i_1_15_fu_779_p2 = (i_reg_219 + ap_const_lv16_10);

assign i_1_16_cast_cast_fu_810_p1 = i_1_16_fu_804_p2;

assign i_1_16_fu_804_p2 = (i_reg_219 + ap_const_lv16_11);

assign i_1_17_cast_cast_fu_835_p1 = i_1_17_fu_829_p2;

assign i_1_17_fu_829_p2 = (i_reg_219 + ap_const_lv16_12);

assign i_1_18_cast_cast_fu_860_p1 = i_1_18_fu_854_p2;

assign i_1_18_fu_854_p2 = (i_reg_219 + ap_const_lv16_13);

assign i_1_19_cast_cast_fu_885_p1 = i_1_19_fu_879_p2;

assign i_1_19_fu_879_p2 = (i_reg_219 + ap_const_lv16_14);

assign i_1_1_cast_cast_fu_435_p1 = i_1_1_fu_429_p2;

assign i_1_1_fu_429_p2 = (i_reg_219 + ap_const_lv16_2);

assign i_1_20_cast_cast_fu_910_p1 = i_1_20_fu_904_p2;

assign i_1_20_fu_904_p2 = (i_reg_219 + ap_const_lv16_15);

assign i_1_21_cast_cast_fu_935_p1 = i_1_21_fu_929_p2;

assign i_1_21_fu_929_p2 = (i_reg_219 + ap_const_lv16_16);

assign i_1_22_cast_cast_fu_960_p1 = i_1_22_fu_954_p2;

assign i_1_22_fu_954_p2 = (i_reg_219 + ap_const_lv16_17);

assign i_1_23_cast_cast_fu_985_p1 = i_1_23_fu_979_p2;

assign i_1_23_fu_979_p2 = (i_reg_219 + ap_const_lv16_18);

assign i_1_24_cast_cast_fu_1010_p1 = i_1_24_fu_1004_p2;

assign i_1_24_fu_1004_p2 = (i_reg_219 + ap_const_lv16_19);

assign i_1_25_cast_cast_fu_1035_p1 = i_1_25_fu_1029_p2;

assign i_1_25_fu_1029_p2 = (i_reg_219 + ap_const_lv16_1A);

assign i_1_26_cast_cast_fu_1060_p1 = i_1_26_fu_1054_p2;

assign i_1_26_fu_1054_p2 = (i_reg_219 + ap_const_lv16_1B);

assign i_1_27_cast_cast_fu_1085_p1 = i_1_27_fu_1079_p2;

assign i_1_27_fu_1079_p2 = (i_reg_219 + ap_const_lv16_1C);

assign i_1_28_cast_cast_fu_1110_p1 = i_1_28_fu_1104_p2;

assign i_1_28_fu_1104_p2 = (i_reg_219 + ap_const_lv16_1D);

assign i_1_29_cast_cast_fu_1135_p1 = i_1_29_fu_1129_p2;

assign i_1_29_fu_1129_p2 = (i_reg_219 + ap_const_lv16_1E);

assign i_1_2_cast_cast_fu_460_p1 = i_1_2_fu_454_p2;

assign i_1_2_fu_454_p2 = (i_reg_219 + ap_const_lv16_3);

assign i_1_30_cast_cast_fu_1160_p1 = i_1_30_fu_1154_p2;

assign i_1_30_fu_1154_p2 = (i_reg_219 + ap_const_lv16_1F);

assign i_1_31_cast_cast_fu_1185_p1 = i_1_31_fu_1179_p2;

assign i_1_31_fu_1179_p2 = (i_reg_219 + ap_const_lv16_20);

assign i_1_32_cast_cast_fu_1210_p1 = i_1_32_fu_1204_p2;

assign i_1_32_fu_1204_p2 = (i_reg_219 + ap_const_lv16_21);

assign i_1_33_cast_cast_fu_1235_p1 = i_1_33_fu_1229_p2;

assign i_1_33_fu_1229_p2 = (i_reg_219 + ap_const_lv16_22);

assign i_1_34_cast_cast_fu_1260_p1 = i_1_34_fu_1254_p2;

assign i_1_34_fu_1254_p2 = (i_reg_219 + ap_const_lv16_23);

assign i_1_35_cast_cast_fu_1285_p1 = i_1_35_fu_1279_p2;

assign i_1_35_fu_1279_p2 = (i_reg_219 + ap_const_lv16_24);

assign i_1_36_cast_cast_fu_1310_p1 = i_1_36_fu_1304_p2;

assign i_1_36_fu_1304_p2 = (i_reg_219 + ap_const_lv16_25);

assign i_1_37_cast_cast_fu_1335_p1 = i_1_37_fu_1329_p2;

assign i_1_37_fu_1329_p2 = (i_reg_219 + ap_const_lv16_26);

assign i_1_38_cast_cast_fu_1360_p1 = i_1_38_fu_1354_p2;

assign i_1_38_fu_1354_p2 = (i_reg_219 + ap_const_lv16_27);

assign i_1_39_cast_cast_fu_1385_p1 = i_1_39_fu_1379_p2;

assign i_1_39_fu_1379_p2 = (i_reg_219 + ap_const_lv16_28);

assign i_1_3_cast_cast_fu_485_p1 = i_1_3_fu_479_p2;

assign i_1_3_fu_479_p2 = (i_reg_219 + ap_const_lv16_4);

assign i_1_40_cast_cast_fu_1410_p1 = i_1_40_fu_1404_p2;

assign i_1_40_fu_1404_p2 = (i_reg_219 + ap_const_lv16_29);

assign i_1_41_cast_cast_fu_1435_p1 = i_1_41_fu_1429_p2;

assign i_1_41_fu_1429_p2 = (i_reg_219 + ap_const_lv16_2A);

assign i_1_42_cast_cast_fu_1460_p1 = i_1_42_fu_1454_p2;

assign i_1_42_fu_1454_p2 = (i_reg_219 + ap_const_lv16_2B);

assign i_1_43_cast_cast_fu_1485_p1 = i_1_43_fu_1479_p2;

assign i_1_43_fu_1479_p2 = (i_reg_219 + ap_const_lv16_2C);

assign i_1_44_cast_cast_fu_1510_p1 = i_1_44_fu_1504_p2;

assign i_1_44_fu_1504_p2 = (i_reg_219 + ap_const_lv16_2D);

assign i_1_45_cast_cast_fu_1535_p1 = i_1_45_fu_1529_p2;

assign i_1_45_fu_1529_p2 = (i_reg_219 + ap_const_lv16_2E);

assign i_1_46_cast_cast_fu_1560_p1 = i_1_46_fu_1554_p2;

assign i_1_46_fu_1554_p2 = (i_reg_219 + ap_const_lv16_2F);

assign i_1_47_cast_cast_fu_1575_p1 = i_1_47_fu_1569_p2;

assign i_1_47_fu_1569_p2 = (i_reg_219 + ap_const_lv16_30);

assign i_1_48_cast_cast_fu_1584_p1 = i_1_48_reg_1706;

assign i_1_48_fu_384_p2 = (i_reg_219 + ap_const_lv16_31);

assign i_1_49_fu_1592_p2 = (i_reg_219 + ap_const_lv16_32);

assign i_1_4_cast_cast_fu_510_p1 = i_1_4_fu_504_p2;

assign i_1_4_fu_504_p2 = (i_reg_219 + ap_const_lv16_5);

assign i_1_5_cast_cast_fu_535_p1 = i_1_5_fu_529_p2;

assign i_1_5_fu_529_p2 = (i_reg_219 + ap_const_lv16_6);

assign i_1_6_cast_cast_fu_560_p1 = i_1_6_fu_554_p2;

assign i_1_6_fu_554_p2 = (i_reg_219 + ap_const_lv16_7);

assign i_1_7_cast_cast_fu_585_p1 = i_1_7_fu_579_p2;

assign i_1_7_fu_579_p2 = (i_reg_219 + ap_const_lv16_8);

assign i_1_8_cast_cast_fu_610_p1 = i_1_8_fu_604_p2;

assign i_1_8_fu_604_p2 = (i_reg_219 + ap_const_lv16_9);

assign i_1_9_cast_cast_fu_635_p1 = i_1_9_fu_629_p2;

assign i_1_9_fu_629_p2 = (i_reg_219 + ap_const_lv16_A);

assign i_1_cast_cast_fu_406_p1 = i_1_s_fu_400_p2;

assign i_1_s_fu_400_p2 = (i_reg_219 | ap_const_lv16_1);

assign i_cast_cast_fu_369_p1 = i_reg_219;

assign log3_fu_335_p4 = {{log[ap_const_lv32_1F : ap_const_lv32_2]}};

assign sum_1_s_fu_1633_p2 = (tmp_s_fu_1628_p2 + sum_reg_207);

assign tmp_1_fu_345_p1 = log3_fu_335_p4;

assign tmp_2_cast_fu_365_p1 = tmp_2_fu_355_p4;

assign tmp_2_fu_355_p4 = {{a[ap_const_lv32_1F : ap_const_lv32_2]}};

assign tmp_s_fu_1628_p2 = (tmp_reg_2086 + grp_fu_329_p2);

always @ (posedge ap_clk) begin
    LOG_BUS_addr_reg_1639[31:30] <= 2'b00;
    tmp_2_cast_reg_1644[30] <= 1'b0;
end

endmodule //fetch_readalloc
