// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="add,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.080000,HLS_SYN_LAT=1008,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=422,HLS_SYN_LUT=334}" *)

module add (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_pp0_stage0 = 3'b10;
parameter    ap_ST_fsm_state10 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv10_3E8 = 10'b1111101000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv32_2 = 32'b10;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (C_S_AXI_CRTL_BUS_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [3:0] inStream_TKEEP;
input  [3:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [31:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [3:0] outStream_TKEEP;
output  [3:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1 : 0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1 : 0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1 : 0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
reg  signed [31:0] inStream_V_data_V_0_data_out;
wire    inStream_V_data_V_0_vld_in;
wire    inStream_V_data_V_0_vld_out;
wire    inStream_V_data_V_0_ack_in;
reg    inStream_V_data_V_0_ack_out;
reg   [31:0] inStream_V_data_V_0_payload_A;
reg   [31:0] inStream_V_data_V_0_payload_B;
reg    inStream_V_data_V_0_sel_rd;
reg    inStream_V_data_V_0_sel_wr;
wire    inStream_V_data_V_0_sel;
wire    inStream_V_data_V_0_load_A;
wire    inStream_V_data_V_0_load_B;
reg   [1:0] inStream_V_data_V_0_state;
wire    inStream_V_data_V_0_state_cmp_full;
reg   [3:0] inStream_V_keep_V_0_data_out;
wire    inStream_V_keep_V_0_vld_in;
wire    inStream_V_keep_V_0_vld_out;
wire    inStream_V_keep_V_0_ack_in;
reg    inStream_V_keep_V_0_ack_out;
reg   [3:0] inStream_V_keep_V_0_payload_A;
reg   [3:0] inStream_V_keep_V_0_payload_B;
reg    inStream_V_keep_V_0_sel_rd;
reg    inStream_V_keep_V_0_sel_wr;
wire    inStream_V_keep_V_0_sel;
wire    inStream_V_keep_V_0_load_A;
wire    inStream_V_keep_V_0_load_B;
reg   [1:0] inStream_V_keep_V_0_state;
wire    inStream_V_keep_V_0_state_cmp_full;
reg   [3:0] inStream_V_strb_V_0_data_out;
wire    inStream_V_strb_V_0_vld_in;
wire    inStream_V_strb_V_0_vld_out;
wire    inStream_V_strb_V_0_ack_in;
reg    inStream_V_strb_V_0_ack_out;
reg   [3:0] inStream_V_strb_V_0_payload_A;
reg   [3:0] inStream_V_strb_V_0_payload_B;
reg    inStream_V_strb_V_0_sel_rd;
reg    inStream_V_strb_V_0_sel_wr;
wire    inStream_V_strb_V_0_sel;
wire    inStream_V_strb_V_0_load_A;
wire    inStream_V_strb_V_0_load_B;
reg   [1:0] inStream_V_strb_V_0_state;
wire    inStream_V_strb_V_0_state_cmp_full;
reg   [1:0] inStream_V_user_V_0_data_out;
wire    inStream_V_user_V_0_vld_in;
wire    inStream_V_user_V_0_vld_out;
wire    inStream_V_user_V_0_ack_in;
reg    inStream_V_user_V_0_ack_out;
reg   [1:0] inStream_V_user_V_0_payload_A;
reg   [1:0] inStream_V_user_V_0_payload_B;
reg    inStream_V_user_V_0_sel_rd;
reg    inStream_V_user_V_0_sel_wr;
wire    inStream_V_user_V_0_sel;
wire    inStream_V_user_V_0_load_A;
wire    inStream_V_user_V_0_load_B;
reg   [1:0] inStream_V_user_V_0_state;
wire    inStream_V_user_V_0_state_cmp_full;
reg   [0:0] inStream_V_last_V_0_data_out;
wire    inStream_V_last_V_0_vld_in;
wire    inStream_V_last_V_0_vld_out;
wire    inStream_V_last_V_0_ack_in;
reg    inStream_V_last_V_0_ack_out;
reg   [0:0] inStream_V_last_V_0_payload_A;
reg   [0:0] inStream_V_last_V_0_payload_B;
reg    inStream_V_last_V_0_sel_rd;
reg    inStream_V_last_V_0_sel_wr;
wire    inStream_V_last_V_0_sel;
wire    inStream_V_last_V_0_load_A;
wire    inStream_V_last_V_0_load_B;
reg   [1:0] inStream_V_last_V_0_state;
wire    inStream_V_last_V_0_state_cmp_full;
reg   [4:0] inStream_V_id_V_0_data_out;
wire    inStream_V_id_V_0_vld_in;
wire    inStream_V_id_V_0_vld_out;
wire    inStream_V_id_V_0_ack_in;
reg    inStream_V_id_V_0_ack_out;
reg   [4:0] inStream_V_id_V_0_payload_A;
reg   [4:0] inStream_V_id_V_0_payload_B;
reg    inStream_V_id_V_0_sel_rd;
reg    inStream_V_id_V_0_sel_wr;
wire    inStream_V_id_V_0_sel;
wire    inStream_V_id_V_0_load_A;
wire    inStream_V_id_V_0_load_B;
reg   [1:0] inStream_V_id_V_0_state;
wire    inStream_V_id_V_0_state_cmp_full;
reg   [5:0] inStream_V_dest_V_0_data_out;
wire    inStream_V_dest_V_0_vld_in;
wire    inStream_V_dest_V_0_vld_out;
wire    inStream_V_dest_V_0_ack_in;
reg    inStream_V_dest_V_0_ack_out;
reg   [5:0] inStream_V_dest_V_0_payload_A;
reg   [5:0] inStream_V_dest_V_0_payload_B;
reg    inStream_V_dest_V_0_sel_rd;
reg    inStream_V_dest_V_0_sel_wr;
wire    inStream_V_dest_V_0_sel;
wire    inStream_V_dest_V_0_load_A;
wire    inStream_V_dest_V_0_load_B;
reg   [1:0] inStream_V_dest_V_0_state;
wire    inStream_V_dest_V_0_state_cmp_full;
reg   [31:0] outStream_V_data_V_1_data_out;
reg    outStream_V_data_V_1_vld_in;
wire    outStream_V_data_V_1_vld_out;
wire    outStream_V_data_V_1_ack_in;
wire    outStream_V_data_V_1_ack_out;
reg   [31:0] outStream_V_data_V_1_payload_A;
reg   [31:0] outStream_V_data_V_1_payload_B;
reg    outStream_V_data_V_1_sel_rd;
reg    outStream_V_data_V_1_sel_wr;
wire    outStream_V_data_V_1_sel;
wire    outStream_V_data_V_1_load_A;
wire    outStream_V_data_V_1_load_B;
reg   [1:0] outStream_V_data_V_1_state;
wire    outStream_V_data_V_1_state_cmp_full;
reg   [3:0] outStream_V_keep_V_1_data_out;
reg    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg   [3:0] outStream_V_keep_V_1_payload_A;
reg   [3:0] outStream_V_keep_V_1_payload_B;
reg    outStream_V_keep_V_1_sel_rd;
reg    outStream_V_keep_V_1_sel_wr;
wire    outStream_V_keep_V_1_sel;
wire    outStream_V_keep_V_1_load_A;
wire    outStream_V_keep_V_1_load_B;
reg   [1:0] outStream_V_keep_V_1_state;
wire    outStream_V_keep_V_1_state_cmp_full;
reg   [3:0] outStream_V_strb_V_1_data_out;
reg    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg   [3:0] outStream_V_strb_V_1_payload_A;
reg   [3:0] outStream_V_strb_V_1_payload_B;
reg    outStream_V_strb_V_1_sel_rd;
reg    outStream_V_strb_V_1_sel_wr;
wire    outStream_V_strb_V_1_sel;
wire    outStream_V_strb_V_1_load_A;
wire    outStream_V_strb_V_1_load_B;
reg   [1:0] outStream_V_strb_V_1_state;
wire    outStream_V_strb_V_1_state_cmp_full;
reg   [1:0] outStream_V_user_V_1_data_out;
reg    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg   [1:0] outStream_V_user_V_1_payload_A;
reg   [1:0] outStream_V_user_V_1_payload_B;
reg    outStream_V_user_V_1_sel_rd;
reg    outStream_V_user_V_1_sel_wr;
wire    outStream_V_user_V_1_sel;
wire    outStream_V_user_V_1_load_A;
wire    outStream_V_user_V_1_load_B;
reg   [1:0] outStream_V_user_V_1_state;
wire    outStream_V_user_V_1_state_cmp_full;
reg   [0:0] outStream_V_last_V_1_data_out;
reg    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
reg   [4:0] outStream_V_id_V_1_data_out;
reg    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg   [4:0] outStream_V_id_V_1_payload_A;
reg   [4:0] outStream_V_id_V_1_payload_B;
reg    outStream_V_id_V_1_sel_rd;
reg    outStream_V_id_V_1_sel_wr;
wire    outStream_V_id_V_1_sel;
wire    outStream_V_id_V_1_load_A;
wire    outStream_V_id_V_1_load_B;
reg   [1:0] outStream_V_id_V_1_state;
wire    outStream_V_id_V_1_state_cmp_full;
reg   [5:0] outStream_V_dest_V_1_data_out;
reg    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg   [5:0] outStream_V_dest_V_1_payload_A;
reg   [5:0] outStream_V_dest_V_1_payload_B;
reg    outStream_V_dest_V_1_sel_rd;
reg    outStream_V_dest_V_1_sel_wr;
wire    outStream_V_dest_V_1_sel;
wire    outStream_V_dest_V_1_load_A;
wire    outStream_V_dest_V_1_load_B;
reg   [1:0] outStream_V_dest_V_1_state;
wire    outStream_V_dest_V_1_state_cmp_full;
wire   [31:0] gain;
reg    inStream_TDATA_blk_n;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_reg_189;
reg    outStream_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter6;
reg   [0:0] ap_pipeline_reg_pp0_iter5_exitcond_reg_189;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] ap_pipeline_reg_pp0_iter6_exitcond_reg_189;
reg   [9:0] idx_reg_127;
reg  signed [31:0] gain_read_reg_184;
wire   [0:0] exitcond_fu_138_p2;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_reg_189;
reg   [0:0] ap_pipeline_reg_pp0_iter2_exitcond_reg_189;
reg   [0:0] ap_pipeline_reg_pp0_iter3_exitcond_reg_189;
reg   [0:0] ap_pipeline_reg_pp0_iter4_exitcond_reg_189;
wire   [9:0] idx_1_fu_144_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [3:0] tmp_keep_V_reg_203;
reg   [3:0] ap_pipeline_reg_pp0_iter2_tmp_keep_V_reg_203;
reg   [3:0] ap_pipeline_reg_pp0_iter3_tmp_keep_V_reg_203;
reg   [3:0] ap_pipeline_reg_pp0_iter4_tmp_keep_V_reg_203;
reg   [3:0] ap_pipeline_reg_pp0_iter5_tmp_keep_V_reg_203;
reg   [3:0] tmp_strb_V_reg_208;
reg   [3:0] ap_pipeline_reg_pp0_iter2_tmp_strb_V_reg_208;
reg   [3:0] ap_pipeline_reg_pp0_iter3_tmp_strb_V_reg_208;
reg   [3:0] ap_pipeline_reg_pp0_iter4_tmp_strb_V_reg_208;
reg   [3:0] ap_pipeline_reg_pp0_iter5_tmp_strb_V_reg_208;
reg   [1:0] tmp_user_V_reg_213;
reg   [1:0] ap_pipeline_reg_pp0_iter2_tmp_user_V_reg_213;
reg   [1:0] ap_pipeline_reg_pp0_iter3_tmp_user_V_reg_213;
reg   [1:0] ap_pipeline_reg_pp0_iter4_tmp_user_V_reg_213;
reg   [1:0] ap_pipeline_reg_pp0_iter5_tmp_user_V_reg_213;
reg   [0:0] tmp_last_V_reg_218;
reg   [0:0] ap_pipeline_reg_pp0_iter2_tmp_last_V_reg_218;
reg   [0:0] ap_pipeline_reg_pp0_iter3_tmp_last_V_reg_218;
reg   [0:0] ap_pipeline_reg_pp0_iter4_tmp_last_V_reg_218;
reg   [0:0] ap_pipeline_reg_pp0_iter5_tmp_last_V_reg_218;
reg   [4:0] tmp_id_V_reg_223;
reg   [4:0] ap_pipeline_reg_pp0_iter2_tmp_id_V_reg_223;
reg   [4:0] ap_pipeline_reg_pp0_iter3_tmp_id_V_reg_223;
reg   [4:0] ap_pipeline_reg_pp0_iter4_tmp_id_V_reg_223;
reg   [4:0] ap_pipeline_reg_pp0_iter5_tmp_id_V_reg_223;
reg   [5:0] tmp_dest_V_reg_228;
reg   [5:0] ap_pipeline_reg_pp0_iter2_tmp_dest_V_reg_228;
reg   [5:0] ap_pipeline_reg_pp0_iter3_tmp_dest_V_reg_228;
reg   [5:0] ap_pipeline_reg_pp0_iter4_tmp_dest_V_reg_228;
reg   [5:0] ap_pipeline_reg_pp0_iter5_tmp_dest_V_reg_228;
wire   [31:0] grp_fu_178_p2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    grp_fu_178_ce;
wire   [0:0] ap_CS_fsm_state10;
reg    ap_condition_1125;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'b1;
#0 inStream_V_data_V_0_sel_rd = 1'b0;
#0 inStream_V_data_V_0_sel_wr = 1'b0;
#0 inStream_V_data_V_0_state = 2'b00;
#0 inStream_V_keep_V_0_sel_rd = 1'b0;
#0 inStream_V_keep_V_0_sel_wr = 1'b0;
#0 inStream_V_keep_V_0_state = 2'b00;
#0 inStream_V_strb_V_0_sel_rd = 1'b0;
#0 inStream_V_strb_V_0_sel_wr = 1'b0;
#0 inStream_V_strb_V_0_state = 2'b00;
#0 inStream_V_user_V_0_sel_rd = 1'b0;
#0 inStream_V_user_V_0_sel_wr = 1'b0;
#0 inStream_V_user_V_0_state = 2'b00;
#0 inStream_V_last_V_0_sel_rd = 1'b0;
#0 inStream_V_last_V_0_sel_wr = 1'b0;
#0 inStream_V_last_V_0_state = 2'b00;
#0 inStream_V_id_V_0_sel_rd = 1'b0;
#0 inStream_V_id_V_0_sel_wr = 1'b0;
#0 inStream_V_id_V_0_state = 2'b00;
#0 inStream_V_dest_V_0_sel_rd = 1'b0;
#0 inStream_V_dest_V_0_sel_wr = 1'b0;
#0 inStream_V_dest_V_0_state = 2'b00;
#0 outStream_V_data_V_1_sel_rd = 1'b0;
#0 outStream_V_data_V_1_sel_wr = 1'b0;
#0 outStream_V_data_V_1_state = 2'b00;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_sel_wr = 1'b0;
#0 outStream_V_keep_V_1_state = 2'b00;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_sel_wr = 1'b0;
#0 outStream_V_strb_V_1_state = 2'b00;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_sel_wr = 1'b0;
#0 outStream_V_user_V_1_state = 2'b00;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'b00;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_sel_wr = 1'b0;
#0 outStream_V_id_V_1_state = 2'b00;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_sel_wr = 1'b0;
#0 outStream_V_dest_V_1_state = 2'b00;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

add_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
add_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .gain(gain)
);

add_mul_32s_32s_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
add_mul_32s_32s_3bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(inStream_V_data_V_0_data_out),
    .din1(gain_read_reg_184),
    .ce(grp_fu_178_ce),
    .dout(grp_fu_178_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))) & ~(1'b0 == exitcond_fu_138_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))) & (1'b0 == exitcond_fu_138_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))) & ~(1'b0 == exitcond_fu_138_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_data_V_0_ack_out) & (1'b1 == inStream_V_data_V_0_vld_out))) begin
            inStream_V_data_V_0_sel_rd <= ~inStream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_data_V_0_vld_in) & (1'b1 == inStream_V_data_V_0_ack_in))) begin
            inStream_V_data_V_0_sel_wr <= ~inStream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == inStream_V_data_V_0_vld_in) & (1'b1 == inStream_V_data_V_0_ack_out) & (inStream_V_data_V_0_state == ap_const_lv2_3)) | ((1'b0 == inStream_V_data_V_0_vld_in) & (inStream_V_data_V_0_state == ap_const_lv2_2)))) begin
            inStream_V_data_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == inStream_V_data_V_0_vld_in) & (1'b0 == inStream_V_data_V_0_ack_out) & (inStream_V_data_V_0_state == ap_const_lv2_3)) | ((1'b0 == inStream_V_data_V_0_ack_out) & (inStream_V_data_V_0_state == ap_const_lv2_1)))) begin
            inStream_V_data_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == inStream_V_data_V_0_vld_in) & (inStream_V_data_V_0_state == ap_const_lv2_2)) | ((1'b1 == inStream_V_data_V_0_ack_out) & (inStream_V_data_V_0_state == ap_const_lv2_1)) | ((inStream_V_data_V_0_state == ap_const_lv2_3) & ~((1'b1 == inStream_V_data_V_0_vld_in) & (1'b0 == inStream_V_data_V_0_ack_out)) & ~((1'b0 == inStream_V_data_V_0_vld_in) & (1'b1 == inStream_V_data_V_0_ack_out))))) begin
            inStream_V_data_V_0_state <= ap_const_lv2_3;
        end else begin
            inStream_V_data_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_dest_V_0_ack_out) & (1'b1 == inStream_V_dest_V_0_vld_out))) begin
            inStream_V_dest_V_0_sel_rd <= ~inStream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_dest_V_0_vld_in) & (1'b1 == inStream_V_dest_V_0_ack_in))) begin
            inStream_V_dest_V_0_sel_wr <= ~inStream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == inStream_V_dest_V_0_vld_in) & (1'b1 == inStream_V_dest_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_dest_V_0_state)) | ((1'b0 == inStream_V_dest_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_dest_V_0_state)))) begin
            inStream_V_dest_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == inStream_V_dest_V_0_vld_in) & (1'b0 == inStream_V_dest_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_dest_V_0_state)) | ((1'b0 == inStream_V_dest_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_dest_V_0_state)))) begin
            inStream_V_dest_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == inStream_V_dest_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_dest_V_0_state)) | ((1'b1 == inStream_V_dest_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_dest_V_0_state)) | ((ap_const_lv2_3 == inStream_V_dest_V_0_state) & ~((1'b1 == inStream_V_dest_V_0_vld_in) & (1'b0 == inStream_V_dest_V_0_ack_out)) & ~((1'b0 == inStream_V_dest_V_0_vld_in) & (1'b1 == inStream_V_dest_V_0_ack_out))))) begin
            inStream_V_dest_V_0_state <= ap_const_lv2_3;
        end else begin
            inStream_V_dest_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_id_V_0_ack_out) & (1'b1 == inStream_V_id_V_0_vld_out))) begin
            inStream_V_id_V_0_sel_rd <= ~inStream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_id_V_0_vld_in) & (1'b1 == inStream_V_id_V_0_ack_in))) begin
            inStream_V_id_V_0_sel_wr <= ~inStream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == inStream_V_id_V_0_vld_in) & (1'b1 == inStream_V_id_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_id_V_0_state)) | ((1'b0 == inStream_V_id_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_id_V_0_state)))) begin
            inStream_V_id_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == inStream_V_id_V_0_vld_in) & (1'b0 == inStream_V_id_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_id_V_0_state)) | ((1'b0 == inStream_V_id_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_id_V_0_state)))) begin
            inStream_V_id_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == inStream_V_id_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_id_V_0_state)) | ((1'b1 == inStream_V_id_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_id_V_0_state)) | ((ap_const_lv2_3 == inStream_V_id_V_0_state) & ~((1'b1 == inStream_V_id_V_0_vld_in) & (1'b0 == inStream_V_id_V_0_ack_out)) & ~((1'b0 == inStream_V_id_V_0_vld_in) & (1'b1 == inStream_V_id_V_0_ack_out))))) begin
            inStream_V_id_V_0_state <= ap_const_lv2_3;
        end else begin
            inStream_V_id_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_keep_V_0_ack_out) & (1'b1 == inStream_V_keep_V_0_vld_out))) begin
            inStream_V_keep_V_0_sel_rd <= ~inStream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_keep_V_0_vld_in) & (1'b1 == inStream_V_keep_V_0_ack_in))) begin
            inStream_V_keep_V_0_sel_wr <= ~inStream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == inStream_V_keep_V_0_vld_in) & (1'b1 == inStream_V_keep_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_keep_V_0_state)) | ((1'b0 == inStream_V_keep_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_keep_V_0_state)))) begin
            inStream_V_keep_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == inStream_V_keep_V_0_vld_in) & (1'b0 == inStream_V_keep_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_keep_V_0_state)) | ((1'b0 == inStream_V_keep_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_keep_V_0_state)))) begin
            inStream_V_keep_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == inStream_V_keep_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_keep_V_0_state)) | ((1'b1 == inStream_V_keep_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_keep_V_0_state)) | ((ap_const_lv2_3 == inStream_V_keep_V_0_state) & ~((1'b1 == inStream_V_keep_V_0_vld_in) & (1'b0 == inStream_V_keep_V_0_ack_out)) & ~((1'b0 == inStream_V_keep_V_0_vld_in) & (1'b1 == inStream_V_keep_V_0_ack_out))))) begin
            inStream_V_keep_V_0_state <= ap_const_lv2_3;
        end else begin
            inStream_V_keep_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_last_V_0_ack_out) & (1'b1 == inStream_V_last_V_0_vld_out))) begin
            inStream_V_last_V_0_sel_rd <= ~inStream_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_last_V_0_vld_in) & (1'b1 == inStream_V_last_V_0_ack_in))) begin
            inStream_V_last_V_0_sel_wr <= ~inStream_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == inStream_V_last_V_0_vld_in) & (1'b1 == inStream_V_last_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_last_V_0_state)) | ((1'b0 == inStream_V_last_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_last_V_0_state)))) begin
            inStream_V_last_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == inStream_V_last_V_0_vld_in) & (1'b0 == inStream_V_last_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_last_V_0_state)) | ((1'b0 == inStream_V_last_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_last_V_0_state)))) begin
            inStream_V_last_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == inStream_V_last_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_last_V_0_state)) | ((1'b1 == inStream_V_last_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_last_V_0_state)) | ((ap_const_lv2_3 == inStream_V_last_V_0_state) & ~((1'b1 == inStream_V_last_V_0_vld_in) & (1'b0 == inStream_V_last_V_0_ack_out)) & ~((1'b0 == inStream_V_last_V_0_vld_in) & (1'b1 == inStream_V_last_V_0_ack_out))))) begin
            inStream_V_last_V_0_state <= ap_const_lv2_3;
        end else begin
            inStream_V_last_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_strb_V_0_ack_out) & (1'b1 == inStream_V_strb_V_0_vld_out))) begin
            inStream_V_strb_V_0_sel_rd <= ~inStream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_strb_V_0_vld_in) & (1'b1 == inStream_V_strb_V_0_ack_in))) begin
            inStream_V_strb_V_0_sel_wr <= ~inStream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == inStream_V_strb_V_0_vld_in) & (1'b1 == inStream_V_strb_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_strb_V_0_state)) | ((1'b0 == inStream_V_strb_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_strb_V_0_state)))) begin
            inStream_V_strb_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == inStream_V_strb_V_0_vld_in) & (1'b0 == inStream_V_strb_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_strb_V_0_state)) | ((1'b0 == inStream_V_strb_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_strb_V_0_state)))) begin
            inStream_V_strb_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == inStream_V_strb_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_strb_V_0_state)) | ((1'b1 == inStream_V_strb_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_strb_V_0_state)) | ((ap_const_lv2_3 == inStream_V_strb_V_0_state) & ~((1'b1 == inStream_V_strb_V_0_vld_in) & (1'b0 == inStream_V_strb_V_0_ack_out)) & ~((1'b0 == inStream_V_strb_V_0_vld_in) & (1'b1 == inStream_V_strb_V_0_ack_out))))) begin
            inStream_V_strb_V_0_state <= ap_const_lv2_3;
        end else begin
            inStream_V_strb_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_user_V_0_ack_out) & (1'b1 == inStream_V_user_V_0_vld_out))) begin
            inStream_V_user_V_0_sel_rd <= ~inStream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == inStream_V_user_V_0_vld_in) & (1'b1 == inStream_V_user_V_0_ack_in))) begin
            inStream_V_user_V_0_sel_wr <= ~inStream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == inStream_V_user_V_0_vld_in) & (1'b1 == inStream_V_user_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_user_V_0_state)) | ((1'b0 == inStream_V_user_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_user_V_0_state)))) begin
            inStream_V_user_V_0_state <= ap_const_lv2_2;
        end else if ((((1'b1 == inStream_V_user_V_0_vld_in) & (1'b0 == inStream_V_user_V_0_ack_out) & (ap_const_lv2_3 == inStream_V_user_V_0_state)) | ((1'b0 == inStream_V_user_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_user_V_0_state)))) begin
            inStream_V_user_V_0_state <= ap_const_lv2_1;
        end else if ((((1'b1 == inStream_V_user_V_0_vld_in) & (ap_const_lv2_2 == inStream_V_user_V_0_state)) | ((1'b1 == inStream_V_user_V_0_ack_out) & (ap_const_lv2_1 == inStream_V_user_V_0_state)) | ((ap_const_lv2_3 == inStream_V_user_V_0_state) & ~((1'b1 == inStream_V_user_V_0_vld_in) & (1'b0 == inStream_V_user_V_0_ack_out)) & ~((1'b0 == inStream_V_user_V_0_vld_in) & (1'b1 == inStream_V_user_V_0_ack_out))))) begin
            inStream_V_user_V_0_state <= ap_const_lv2_3;
        end else begin
            inStream_V_user_V_0_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_data_V_1_ack_out) & (1'b1 == outStream_V_data_V_1_vld_out))) begin
            outStream_V_data_V_1_sel_rd <= ~outStream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_data_V_1_vld_in) & (1'b1 == outStream_V_data_V_1_ack_in))) begin
            outStream_V_data_V_1_sel_wr <= ~outStream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_data_V_1_vld_in) & (1'b1 == outStream_V_data_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_data_V_1_state)) | ((1'b0 == outStream_V_data_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_data_V_1_state)))) begin
            outStream_V_data_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_data_V_1_vld_in) & (1'b0 == outStream_V_data_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_data_V_1_state)) | ((1'b0 == outStream_V_data_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_data_V_1_state)))) begin
            outStream_V_data_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_data_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_data_V_1_state)) | ((1'b1 == outStream_V_data_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_data_V_1_state)) | ((ap_const_lv2_3 == outStream_V_data_V_1_state) & ~((1'b1 == outStream_V_data_V_1_vld_in) & (1'b0 == outStream_V_data_V_1_ack_out)) & ~((1'b0 == outStream_V_data_V_1_vld_in) & (1'b1 == outStream_V_data_V_1_ack_out))))) begin
            outStream_V_data_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_data_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_dest_V_1_ack_out) & (1'b1 == outStream_V_dest_V_1_vld_out))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_dest_V_1_vld_in) & (1'b1 == outStream_V_dest_V_1_ack_in))) begin
            outStream_V_dest_V_1_sel_wr <= ~outStream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_dest_V_1_vld_in) & (1'b1 == outStream_V_dest_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_dest_V_1_state)) | ((1'b0 == outStream_V_dest_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_dest_V_1_state)))) begin
            outStream_V_dest_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_dest_V_1_vld_in) & (1'b0 == outStream_V_dest_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_dest_V_1_state)) | ((1'b0 == outStream_V_dest_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_dest_V_1_state)))) begin
            outStream_V_dest_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_dest_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_dest_V_1_state)) | ((1'b1 == outStream_V_dest_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_dest_V_1_state)) | ((ap_const_lv2_3 == outStream_V_dest_V_1_state) & ~((1'b1 == outStream_V_dest_V_1_vld_in) & (1'b0 == outStream_V_dest_V_1_ack_out)) & ~((1'b0 == outStream_V_dest_V_1_vld_in) & (1'b1 == outStream_V_dest_V_1_ack_out))))) begin
            outStream_V_dest_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_dest_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_id_V_1_ack_out) & (1'b1 == outStream_V_id_V_1_vld_out))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_id_V_1_vld_in) & (1'b1 == outStream_V_id_V_1_ack_in))) begin
            outStream_V_id_V_1_sel_wr <= ~outStream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_id_V_1_vld_in) & (1'b1 == outStream_V_id_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_id_V_1_state)) | ((1'b0 == outStream_V_id_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_id_V_1_state)))) begin
            outStream_V_id_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_id_V_1_vld_in) & (1'b0 == outStream_V_id_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_id_V_1_state)) | ((1'b0 == outStream_V_id_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_id_V_1_state)))) begin
            outStream_V_id_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_id_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_id_V_1_state)) | ((1'b1 == outStream_V_id_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_id_V_1_state)) | ((ap_const_lv2_3 == outStream_V_id_V_1_state) & ~((1'b1 == outStream_V_id_V_1_vld_in) & (1'b0 == outStream_V_id_V_1_ack_out)) & ~((1'b0 == outStream_V_id_V_1_vld_in) & (1'b1 == outStream_V_id_V_1_ack_out))))) begin
            outStream_V_id_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_id_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_keep_V_1_ack_out) & (1'b1 == outStream_V_keep_V_1_vld_out))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_keep_V_1_vld_in) & (1'b1 == outStream_V_keep_V_1_ack_in))) begin
            outStream_V_keep_V_1_sel_wr <= ~outStream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_keep_V_1_vld_in) & (1'b1 == outStream_V_keep_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_keep_V_1_state)) | ((1'b0 == outStream_V_keep_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_keep_V_1_state)))) begin
            outStream_V_keep_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_keep_V_1_vld_in) & (1'b0 == outStream_V_keep_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_keep_V_1_state)) | ((1'b0 == outStream_V_keep_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_keep_V_1_state)))) begin
            outStream_V_keep_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_keep_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_keep_V_1_state)) | ((1'b1 == outStream_V_keep_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_keep_V_1_state)) | ((ap_const_lv2_3 == outStream_V_keep_V_1_state) & ~((1'b1 == outStream_V_keep_V_1_vld_in) & (1'b0 == outStream_V_keep_V_1_ack_out)) & ~((1'b0 == outStream_V_keep_V_1_vld_in) & (1'b1 == outStream_V_keep_V_1_ack_out))))) begin
            outStream_V_keep_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_keep_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_last_V_1_ack_out) & (1'b1 == outStream_V_last_V_1_vld_out))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_last_V_1_vld_in) & (1'b1 == outStream_V_last_V_1_ack_in))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_last_V_1_vld_in) & (1'b1 == outStream_V_last_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_last_V_1_state)) | ((1'b0 == outStream_V_last_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_last_V_1_state)))) begin
            outStream_V_last_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_last_V_1_vld_in) & (1'b0 == outStream_V_last_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_last_V_1_state)) | ((1'b0 == outStream_V_last_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_last_V_1_state)))) begin
            outStream_V_last_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_last_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_last_V_1_state)) | ((1'b1 == outStream_V_last_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_last_V_1_state)) | ((ap_const_lv2_3 == outStream_V_last_V_1_state) & ~((1'b1 == outStream_V_last_V_1_vld_in) & (1'b0 == outStream_V_last_V_1_ack_out)) & ~((1'b0 == outStream_V_last_V_1_vld_in) & (1'b1 == outStream_V_last_V_1_ack_out))))) begin
            outStream_V_last_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_last_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_strb_V_1_ack_out) & (1'b1 == outStream_V_strb_V_1_vld_out))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_strb_V_1_vld_in) & (1'b1 == outStream_V_strb_V_1_ack_in))) begin
            outStream_V_strb_V_1_sel_wr <= ~outStream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_strb_V_1_vld_in) & (1'b1 == outStream_V_strb_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_strb_V_1_state)) | ((1'b0 == outStream_V_strb_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_strb_V_1_state)))) begin
            outStream_V_strb_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_strb_V_1_vld_in) & (1'b0 == outStream_V_strb_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_strb_V_1_state)) | ((1'b0 == outStream_V_strb_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_strb_V_1_state)))) begin
            outStream_V_strb_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_strb_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_strb_V_1_state)) | ((1'b1 == outStream_V_strb_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_strb_V_1_state)) | ((ap_const_lv2_3 == outStream_V_strb_V_1_state) & ~((1'b1 == outStream_V_strb_V_1_vld_in) & (1'b0 == outStream_V_strb_V_1_ack_out)) & ~((1'b0 == outStream_V_strb_V_1_vld_in) & (1'b1 == outStream_V_strb_V_1_ack_out))))) begin
            outStream_V_strb_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_strb_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_user_V_1_ack_out) & (1'b1 == outStream_V_user_V_1_vld_out))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outStream_V_user_V_1_vld_in) & (1'b1 == outStream_V_user_V_1_ack_in))) begin
            outStream_V_user_V_1_sel_wr <= ~outStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outStream_V_user_V_1_vld_in) & (1'b1 == outStream_V_user_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_user_V_1_state)) | ((1'b0 == outStream_V_user_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_user_V_1_state)))) begin
            outStream_V_user_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outStream_V_user_V_1_vld_in) & (1'b0 == outStream_V_user_V_1_ack_out) & (ap_const_lv2_3 == outStream_V_user_V_1_state)) | ((1'b0 == outStream_V_user_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_user_V_1_state)))) begin
            outStream_V_user_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outStream_V_user_V_1_vld_in) & (ap_const_lv2_2 == outStream_V_user_V_1_state)) | ((1'b1 == outStream_V_user_V_1_ack_out) & (ap_const_lv2_1 == outStream_V_user_V_1_state)) | ((ap_const_lv2_3 == outStream_V_user_V_1_state) & ~((1'b1 == outStream_V_user_V_1_vld_in) & (1'b0 == outStream_V_user_V_1_ack_out)) & ~((1'b0 == outStream_V_user_V_1_vld_in) & (1'b1 == outStream_V_user_V_1_ack_out))))) begin
            outStream_V_user_V_1_state <= ap_const_lv2_3;
        end else begin
            outStream_V_user_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == exitcond_fu_138_p2))) begin
        idx_reg_127 <= idx_1_fu_144_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        idx_reg_127 <= ap_const_lv10_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        ap_pipeline_reg_pp0_iter1_exitcond_reg_189 <= exitcond_reg_189;
        exitcond_reg_189 <= exitcond_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)))) begin
        ap_pipeline_reg_pp0_iter2_exitcond_reg_189 <= ap_pipeline_reg_pp0_iter1_exitcond_reg_189;
        ap_pipeline_reg_pp0_iter2_tmp_dest_V_reg_228 <= tmp_dest_V_reg_228;
        ap_pipeline_reg_pp0_iter2_tmp_id_V_reg_223 <= tmp_id_V_reg_223;
        ap_pipeline_reg_pp0_iter2_tmp_keep_V_reg_203 <= tmp_keep_V_reg_203;
        ap_pipeline_reg_pp0_iter2_tmp_last_V_reg_218 <= tmp_last_V_reg_218;
        ap_pipeline_reg_pp0_iter2_tmp_strb_V_reg_208 <= tmp_strb_V_reg_208;
        ap_pipeline_reg_pp0_iter2_tmp_user_V_reg_213 <= tmp_user_V_reg_213;
        ap_pipeline_reg_pp0_iter3_exitcond_reg_189 <= ap_pipeline_reg_pp0_iter2_exitcond_reg_189;
        ap_pipeline_reg_pp0_iter3_tmp_dest_V_reg_228 <= ap_pipeline_reg_pp0_iter2_tmp_dest_V_reg_228;
        ap_pipeline_reg_pp0_iter3_tmp_id_V_reg_223 <= ap_pipeline_reg_pp0_iter2_tmp_id_V_reg_223;
        ap_pipeline_reg_pp0_iter3_tmp_keep_V_reg_203 <= ap_pipeline_reg_pp0_iter2_tmp_keep_V_reg_203;
        ap_pipeline_reg_pp0_iter3_tmp_last_V_reg_218 <= ap_pipeline_reg_pp0_iter2_tmp_last_V_reg_218;
        ap_pipeline_reg_pp0_iter3_tmp_strb_V_reg_208 <= ap_pipeline_reg_pp0_iter2_tmp_strb_V_reg_208;
        ap_pipeline_reg_pp0_iter3_tmp_user_V_reg_213 <= ap_pipeline_reg_pp0_iter2_tmp_user_V_reg_213;
        ap_pipeline_reg_pp0_iter4_exitcond_reg_189 <= ap_pipeline_reg_pp0_iter3_exitcond_reg_189;
        ap_pipeline_reg_pp0_iter4_tmp_dest_V_reg_228 <= ap_pipeline_reg_pp0_iter3_tmp_dest_V_reg_228;
        ap_pipeline_reg_pp0_iter4_tmp_id_V_reg_223 <= ap_pipeline_reg_pp0_iter3_tmp_id_V_reg_223;
        ap_pipeline_reg_pp0_iter4_tmp_keep_V_reg_203 <= ap_pipeline_reg_pp0_iter3_tmp_keep_V_reg_203;
        ap_pipeline_reg_pp0_iter4_tmp_last_V_reg_218 <= ap_pipeline_reg_pp0_iter3_tmp_last_V_reg_218;
        ap_pipeline_reg_pp0_iter4_tmp_strb_V_reg_208 <= ap_pipeline_reg_pp0_iter3_tmp_strb_V_reg_208;
        ap_pipeline_reg_pp0_iter4_tmp_user_V_reg_213 <= ap_pipeline_reg_pp0_iter3_tmp_user_V_reg_213;
        ap_pipeline_reg_pp0_iter5_exitcond_reg_189 <= ap_pipeline_reg_pp0_iter4_exitcond_reg_189;
        ap_pipeline_reg_pp0_iter5_tmp_dest_V_reg_228 <= ap_pipeline_reg_pp0_iter4_tmp_dest_V_reg_228;
        ap_pipeline_reg_pp0_iter5_tmp_id_V_reg_223 <= ap_pipeline_reg_pp0_iter4_tmp_id_V_reg_223;
        ap_pipeline_reg_pp0_iter5_tmp_keep_V_reg_203 <= ap_pipeline_reg_pp0_iter4_tmp_keep_V_reg_203;
        ap_pipeline_reg_pp0_iter5_tmp_last_V_reg_218 <= ap_pipeline_reg_pp0_iter4_tmp_last_V_reg_218;
        ap_pipeline_reg_pp0_iter5_tmp_strb_V_reg_208 <= ap_pipeline_reg_pp0_iter4_tmp_strb_V_reg_208;
        ap_pipeline_reg_pp0_iter5_tmp_user_V_reg_213 <= ap_pipeline_reg_pp0_iter4_tmp_user_V_reg_213;
        ap_pipeline_reg_pp0_iter6_exitcond_reg_189 <= ap_pipeline_reg_pp0_iter5_exitcond_reg_189;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        gain_read_reg_184 <= gain;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_data_V_0_load_A)) begin
        inStream_V_data_V_0_payload_A <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_data_V_0_load_B)) begin
        inStream_V_data_V_0_payload_B <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_dest_V_0_load_A)) begin
        inStream_V_dest_V_0_payload_A <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_dest_V_0_load_B)) begin
        inStream_V_dest_V_0_payload_B <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_id_V_0_load_A)) begin
        inStream_V_id_V_0_payload_A <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_id_V_0_load_B)) begin
        inStream_V_id_V_0_payload_B <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_keep_V_0_load_A)) begin
        inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_keep_V_0_load_B)) begin
        inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_last_V_0_load_A)) begin
        inStream_V_last_V_0_payload_A <= inStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_last_V_0_load_B)) begin
        inStream_V_last_V_0_payload_B <= inStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_strb_V_0_load_A)) begin
        inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_strb_V_0_load_B)) begin
        inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_user_V_0_load_A)) begin
        inStream_V_user_V_0_payload_A <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == inStream_V_user_V_0_load_B)) begin
        inStream_V_user_V_0_payload_B <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_data_V_1_load_A)) begin
        outStream_V_data_V_1_payload_A <= grp_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_data_V_1_load_B)) begin
        outStream_V_data_V_1_payload_B <= grp_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_dest_V_1_load_A)) begin
        outStream_V_dest_V_1_payload_A <= ap_pipeline_reg_pp0_iter5_tmp_dest_V_reg_228;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_dest_V_1_load_B)) begin
        outStream_V_dest_V_1_payload_B <= ap_pipeline_reg_pp0_iter5_tmp_dest_V_reg_228;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_id_V_1_load_A)) begin
        outStream_V_id_V_1_payload_A <= ap_pipeline_reg_pp0_iter5_tmp_id_V_reg_223;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_id_V_1_load_B)) begin
        outStream_V_id_V_1_payload_B <= ap_pipeline_reg_pp0_iter5_tmp_id_V_reg_223;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_keep_V_1_load_A)) begin
        outStream_V_keep_V_1_payload_A <= ap_pipeline_reg_pp0_iter5_tmp_keep_V_reg_203;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_keep_V_1_load_B)) begin
        outStream_V_keep_V_1_payload_B <= ap_pipeline_reg_pp0_iter5_tmp_keep_V_reg_203;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_last_V_1_load_A)) begin
        outStream_V_last_V_1_payload_A <= ap_pipeline_reg_pp0_iter5_tmp_last_V_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_last_V_1_load_B)) begin
        outStream_V_last_V_1_payload_B <= ap_pipeline_reg_pp0_iter5_tmp_last_V_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_strb_V_1_load_A)) begin
        outStream_V_strb_V_1_payload_A <= ap_pipeline_reg_pp0_iter5_tmp_strb_V_reg_208;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_strb_V_1_load_B)) begin
        outStream_V_strb_V_1_payload_B <= ap_pipeline_reg_pp0_iter5_tmp_strb_V_reg_208;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_user_V_1_load_A)) begin
        outStream_V_user_V_1_payload_A <= ap_pipeline_reg_pp0_iter5_tmp_user_V_reg_213;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outStream_V_user_V_1_load_B)) begin
        outStream_V_user_V_1_payload_B <= ap_pipeline_reg_pp0_iter5_tmp_user_V_reg_213;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == exitcond_reg_189) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        tmp_dest_V_reg_228 <= inStream_V_dest_V_0_data_out;
        tmp_id_V_reg_223 <= inStream_V_id_V_0_data_out;
        tmp_keep_V_reg_203 <= inStream_V_keep_V_0_data_out;
        tmp_last_V_reg_218 <= inStream_V_last_V_0_data_out;
        tmp_strb_V_reg_208 <= inStream_V_strb_V_0_data_out;
        tmp_user_V_reg_213 <= inStream_V_user_V_0_data_out;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(ap_condition_1125 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(ap_condition_1125 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        grp_fu_178_ce = 1'b1;
    end else begin
        grp_fu_178_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189))) begin
        inStream_TDATA_blk_n = inStream_V_data_V_0_state[1'b0];
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        inStream_V_data_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == inStream_V_data_V_0_sel)) begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_B;
    end else begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        inStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == inStream_V_dest_V_0_sel)) begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B;
    end else begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        inStream_V_id_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == inStream_V_id_V_0_sel)) begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B;
    end else begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        inStream_V_keep_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == inStream_V_keep_V_0_sel)) begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B;
    end else begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        inStream_V_last_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == inStream_V_last_V_0_sel)) begin
        inStream_V_last_V_0_data_out = inStream_V_last_V_0_payload_B;
    end else begin
        inStream_V_last_V_0_data_out = inStream_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        inStream_V_strb_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == inStream_V_strb_V_0_sel)) begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B;
    end else begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        inStream_V_user_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == inStream_V_user_V_0_sel)) begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B;
    end else begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189)))) begin
        outStream_TDATA_blk_n = outStream_V_data_V_1_state[1'b1];
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == outStream_V_data_V_1_sel)) begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_B;
    end else begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        outStream_V_data_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == outStream_V_dest_V_1_sel)) begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B;
    end else begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        outStream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == outStream_V_id_V_1_sel)) begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B;
    end else begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        outStream_V_id_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == outStream_V_keep_V_1_sel)) begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B;
    end else begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        outStream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == outStream_V_last_V_1_sel)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        outStream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == outStream_V_strb_V_1_sel)) begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B;
    end else begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        outStream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == outStream_V_user_V_1_sel)) begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B;
    end else begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))))) begin
        outStream_V_user_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter7) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))) & ~(1'b1 == ap_enable_reg_pp0_iter6)) & ~(~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_fu_138_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter7) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))) & ~(1'b1 == ap_enable_reg_pp0_iter6)) | (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_reg_189) & (inStream_V_data_V_0_vld_out == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_pipeline_reg_pp0_iter5_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in)) | ((1'b1 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_pipeline_reg_pp0_iter6_exitcond_reg_189) & (1'b0 == outStream_V_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_fu_138_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            if (~(ap_condition_1125 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_2];

always @ (*) begin
    ap_condition_1125 = ((outStream_V_data_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_dest_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_fu_138_p2 = ((idx_reg_127 == ap_const_lv10_3E8) ? 1'b1 : 1'b0);

assign idx_1_fu_144_p2 = (idx_reg_127 + ap_const_lv10_1);

assign inStream_TREADY = inStream_V_dest_V_0_state[1'b1];

assign inStream_V_data_V_0_ack_in = inStream_V_data_V_0_state[1'b1];

assign inStream_V_data_V_0_load_A = (inStream_V_data_V_0_state_cmp_full & ~inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_load_B = (inStream_V_data_V_0_sel_wr & inStream_V_data_V_0_state_cmp_full);

assign inStream_V_data_V_0_sel = inStream_V_data_V_0_sel_rd;

assign inStream_V_data_V_0_state_cmp_full = ((inStream_V_data_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign inStream_V_data_V_0_vld_in = inStream_TVALID;

assign inStream_V_data_V_0_vld_out = inStream_V_data_V_0_state[1'b0];

assign inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state[1'b1];

assign inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full & ~inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_sel_wr & inStream_V_dest_V_0_state_cmp_full);

assign inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd;

assign inStream_V_dest_V_0_state_cmp_full = ((inStream_V_dest_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign inStream_V_dest_V_0_vld_in = inStream_TVALID;

assign inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state[1'b0];

assign inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state[1'b1];

assign inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full & ~inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_load_B = (inStream_V_id_V_0_sel_wr & inStream_V_id_V_0_state_cmp_full);

assign inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd;

assign inStream_V_id_V_0_state_cmp_full = ((inStream_V_id_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign inStream_V_id_V_0_vld_in = inStream_TVALID;

assign inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state[1'b0];

assign inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state[1'b1];

assign inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full & ~inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_sel_wr & inStream_V_keep_V_0_state_cmp_full);

assign inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd;

assign inStream_V_keep_V_0_state_cmp_full = ((inStream_V_keep_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign inStream_V_keep_V_0_vld_in = inStream_TVALID;

assign inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state[1'b0];

assign inStream_V_last_V_0_ack_in = inStream_V_last_V_0_state[1'b1];

assign inStream_V_last_V_0_load_A = (inStream_V_last_V_0_state_cmp_full & ~inStream_V_last_V_0_sel_wr);

assign inStream_V_last_V_0_load_B = (inStream_V_last_V_0_sel_wr & inStream_V_last_V_0_state_cmp_full);

assign inStream_V_last_V_0_sel = inStream_V_last_V_0_sel_rd;

assign inStream_V_last_V_0_state_cmp_full = ((inStream_V_last_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign inStream_V_last_V_0_vld_in = inStream_TVALID;

assign inStream_V_last_V_0_vld_out = inStream_V_last_V_0_state[1'b0];

assign inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state[1'b1];

assign inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full & ~inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_sel_wr & inStream_V_strb_V_0_state_cmp_full);

assign inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd;

assign inStream_V_strb_V_0_state_cmp_full = ((inStream_V_strb_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign inStream_V_strb_V_0_vld_in = inStream_TVALID;

assign inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state[1'b0];

assign inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state[1'b1];

assign inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full & ~inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_load_B = (inStream_V_user_V_0_sel_wr & inStream_V_user_V_0_state_cmp_full);

assign inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd;

assign inStream_V_user_V_0_state_cmp_full = ((inStream_V_user_V_0_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign inStream_V_user_V_0_vld_in = inStream_TVALID;

assign inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state[1'b0];

assign outStream_TDATA = outStream_V_data_V_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'b0];

assign outStream_V_data_V_1_ack_in = outStream_V_data_V_1_state[1'b1];

assign outStream_V_data_V_1_ack_out = outStream_TREADY;

assign outStream_V_data_V_1_load_A = (outStream_V_data_V_1_state_cmp_full & ~outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_load_B = (outStream_V_data_V_1_sel_wr & outStream_V_data_V_1_state_cmp_full);

assign outStream_V_data_V_1_sel = outStream_V_data_V_1_sel_rd;

assign outStream_V_data_V_1_state_cmp_full = ((outStream_V_data_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outStream_V_data_V_1_vld_out = outStream_V_data_V_1_state[1'b0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'b1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full & ~outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_sel_wr & outStream_V_dest_V_1_state_cmp_full);

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_state_cmp_full = ((outStream_V_dest_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'b0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'b1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full & ~outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_load_B = (outStream_V_id_V_1_sel_wr & outStream_V_id_V_1_state_cmp_full);

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_state_cmp_full = ((outStream_V_id_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'b0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'b1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full & ~outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_sel_wr & outStream_V_keep_V_1_state_cmp_full);

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_state_cmp_full = ((outStream_V_keep_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'b0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'b1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_sel_wr & outStream_V_last_V_1_state_cmp_full);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'b0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'b1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full & ~outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_sel_wr & outStream_V_strb_V_1_state_cmp_full);

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_state_cmp_full = ((outStream_V_strb_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'b0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'b1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full & ~outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_load_B = (outStream_V_user_V_1_sel_wr & outStream_V_user_V_1_state_cmp_full);

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_state_cmp_full = ((outStream_V_user_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'b0];

endmodule //add
