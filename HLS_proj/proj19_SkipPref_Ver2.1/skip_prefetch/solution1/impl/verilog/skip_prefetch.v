// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="skip_prefetch,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.848000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=4,HLS_SYN_FF=1789,HLS_SYN_LUT=2239}" *)

module skip_prefetch (
        ap_clk,
        ap_rst_n,
        m_axi_A_BUS_AWVALID,
        m_axi_A_BUS_AWREADY,
        m_axi_A_BUS_AWADDR,
        m_axi_A_BUS_AWID,
        m_axi_A_BUS_AWLEN,
        m_axi_A_BUS_AWSIZE,
        m_axi_A_BUS_AWBURST,
        m_axi_A_BUS_AWLOCK,
        m_axi_A_BUS_AWCACHE,
        m_axi_A_BUS_AWPROT,
        m_axi_A_BUS_AWQOS,
        m_axi_A_BUS_AWREGION,
        m_axi_A_BUS_AWUSER,
        m_axi_A_BUS_WVALID,
        m_axi_A_BUS_WREADY,
        m_axi_A_BUS_WDATA,
        m_axi_A_BUS_WSTRB,
        m_axi_A_BUS_WLAST,
        m_axi_A_BUS_WID,
        m_axi_A_BUS_WUSER,
        m_axi_A_BUS_ARVALID,
        m_axi_A_BUS_ARREADY,
        m_axi_A_BUS_ARADDR,
        m_axi_A_BUS_ARID,
        m_axi_A_BUS_ARLEN,
        m_axi_A_BUS_ARSIZE,
        m_axi_A_BUS_ARBURST,
        m_axi_A_BUS_ARLOCK,
        m_axi_A_BUS_ARCACHE,
        m_axi_A_BUS_ARPROT,
        m_axi_A_BUS_ARQOS,
        m_axi_A_BUS_ARREGION,
        m_axi_A_BUS_ARUSER,
        m_axi_A_BUS_RVALID,
        m_axi_A_BUS_RREADY,
        m_axi_A_BUS_RDATA,
        m_axi_A_BUS_RLAST,
        m_axi_A_BUS_RID,
        m_axi_A_BUS_RUSER,
        m_axi_A_BUS_RRESP,
        m_axi_A_BUS_BVALID,
        m_axi_A_BUS_BREADY,
        m_axi_A_BUS_BRESP,
        m_axi_A_BUS_BID,
        m_axi_A_BUS_BUSER,
        m_axi_PREF_WINDOW_AWVALID,
        m_axi_PREF_WINDOW_AWREADY,
        m_axi_PREF_WINDOW_AWADDR,
        m_axi_PREF_WINDOW_AWID,
        m_axi_PREF_WINDOW_AWLEN,
        m_axi_PREF_WINDOW_AWSIZE,
        m_axi_PREF_WINDOW_AWBURST,
        m_axi_PREF_WINDOW_AWLOCK,
        m_axi_PREF_WINDOW_AWCACHE,
        m_axi_PREF_WINDOW_AWPROT,
        m_axi_PREF_WINDOW_AWQOS,
        m_axi_PREF_WINDOW_AWREGION,
        m_axi_PREF_WINDOW_AWUSER,
        m_axi_PREF_WINDOW_WVALID,
        m_axi_PREF_WINDOW_WREADY,
        m_axi_PREF_WINDOW_WDATA,
        m_axi_PREF_WINDOW_WSTRB,
        m_axi_PREF_WINDOW_WLAST,
        m_axi_PREF_WINDOW_WID,
        m_axi_PREF_WINDOW_WUSER,
        m_axi_PREF_WINDOW_ARVALID,
        m_axi_PREF_WINDOW_ARREADY,
        m_axi_PREF_WINDOW_ARADDR,
        m_axi_PREF_WINDOW_ARID,
        m_axi_PREF_WINDOW_ARLEN,
        m_axi_PREF_WINDOW_ARSIZE,
        m_axi_PREF_WINDOW_ARBURST,
        m_axi_PREF_WINDOW_ARLOCK,
        m_axi_PREF_WINDOW_ARCACHE,
        m_axi_PREF_WINDOW_ARPROT,
        m_axi_PREF_WINDOW_ARQOS,
        m_axi_PREF_WINDOW_ARREGION,
        m_axi_PREF_WINDOW_ARUSER,
        m_axi_PREF_WINDOW_RVALID,
        m_axi_PREF_WINDOW_RREADY,
        m_axi_PREF_WINDOW_RDATA,
        m_axi_PREF_WINDOW_RLAST,
        m_axi_PREF_WINDOW_RID,
        m_axi_PREF_WINDOW_RUSER,
        m_axi_PREF_WINDOW_RRESP,
        m_axi_PREF_WINDOW_BVALID,
        m_axi_PREF_WINDOW_BREADY,
        m_axi_PREF_WINDOW_BRESP,
        m_axi_PREF_WINDOW_BID,
        m_axi_PREF_WINDOW_BUSER,
        s_axi_CFG_AWVALID,
        s_axi_CFG_AWREADY,
        s_axi_CFG_AWADDR,
        s_axi_CFG_WVALID,
        s_axi_CFG_WREADY,
        s_axi_CFG_WDATA,
        s_axi_CFG_WSTRB,
        s_axi_CFG_ARVALID,
        s_axi_CFG_ARREADY,
        s_axi_CFG_ARADDR,
        s_axi_CFG_RVALID,
        s_axi_CFG_RREADY,
        s_axi_CFG_RDATA,
        s_axi_CFG_RRESP,
        s_axi_CFG_BVALID,
        s_axi_CFG_BREADY,
        s_axi_CFG_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 29'b1;
parameter    ap_ST_fsm_state2 = 29'b10;
parameter    ap_ST_fsm_state3 = 29'b100;
parameter    ap_ST_fsm_state4 = 29'b1000;
parameter    ap_ST_fsm_state5 = 29'b10000;
parameter    ap_ST_fsm_state6 = 29'b100000;
parameter    ap_ST_fsm_state7 = 29'b1000000;
parameter    ap_ST_fsm_state8 = 29'b10000000;
parameter    ap_ST_fsm_state9 = 29'b100000000;
parameter    ap_ST_fsm_state10 = 29'b1000000000;
parameter    ap_ST_fsm_state11 = 29'b10000000000;
parameter    ap_ST_fsm_state12 = 29'b100000000000;
parameter    ap_ST_fsm_state13 = 29'b1000000000000;
parameter    ap_ST_fsm_state14 = 29'b10000000000000;
parameter    ap_ST_fsm_state15 = 29'b100000000000000;
parameter    ap_ST_fsm_state16 = 29'b1000000000000000;
parameter    ap_ST_fsm_state17 = 29'b10000000000000000;
parameter    ap_ST_fsm_state18 = 29'b100000000000000000;
parameter    ap_ST_fsm_state19 = 29'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 29'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 29'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 29'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 29'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 29'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 29'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 29'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 29'b100000000000000000000000000;
parameter    ap_ST_fsm_pp0_stage0 = 29'b1000000000000000000000000000;
parameter    ap_ST_fsm_state39 = 29'b10000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    C_S_AXI_CFG_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CFG_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_A_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_A_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_A_BUS_DATA_WIDTH = 64;
parameter    C_M_AXI_A_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_A_BUS_USER_VALUE = 0;
parameter    C_M_AXI_A_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_A_BUS_CACHE_VALUE = 3;
parameter    C_M_AXI_PREF_WINDOW_ID_WIDTH = 1;
parameter    C_M_AXI_PREF_WINDOW_ADDR_WIDTH = 32;
parameter    C_M_AXI_PREF_WINDOW_DATA_WIDTH = 32;
parameter    C_M_AXI_PREF_WINDOW_AWUSER_WIDTH = 1;
parameter    C_M_AXI_PREF_WINDOW_ARUSER_WIDTH = 1;
parameter    C_M_AXI_PREF_WINDOW_WUSER_WIDTH = 1;
parameter    C_M_AXI_PREF_WINDOW_RUSER_WIDTH = 1;
parameter    C_M_AXI_PREF_WINDOW_BUSER_WIDTH = 1;
parameter    C_M_AXI_PREF_WINDOW_USER_VALUE = 0;
parameter    C_M_AXI_PREF_WINDOW_PROT_VALUE = 0;
parameter    C_M_AXI_PREF_WINDOW_CACHE_VALUE = 3;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv19_0 = 19'b0000000000000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_FFFFFFFB = 32'b11111111111111111111111111111011;
parameter    ap_const_lv65_19999999A = 65'b110011001100110011001100110011010;
parameter    ap_const_lv32_23 = 32'b100011;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv65_0 = 65'b00000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv8_0 = 8'b00000000;

parameter C_S_AXI_CFG_WSTRB_WIDTH = (C_S_AXI_CFG_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_A_BUS_WSTRB_WIDTH = (C_M_AXI_A_BUS_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_PREF_WINDOW_WSTRB_WIDTH = (C_M_AXI_PREF_WINDOW_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_A_BUS_AWVALID;
input   m_axi_A_BUS_AWREADY;
output  [C_M_AXI_A_BUS_ADDR_WIDTH - 1 : 0] m_axi_A_BUS_AWADDR;
output  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_AWID;
output  [7:0] m_axi_A_BUS_AWLEN;
output  [2:0] m_axi_A_BUS_AWSIZE;
output  [1:0] m_axi_A_BUS_AWBURST;
output  [1:0] m_axi_A_BUS_AWLOCK;
output  [3:0] m_axi_A_BUS_AWCACHE;
output  [2:0] m_axi_A_BUS_AWPROT;
output  [3:0] m_axi_A_BUS_AWQOS;
output  [3:0] m_axi_A_BUS_AWREGION;
output  [C_M_AXI_A_BUS_AWUSER_WIDTH - 1 : 0] m_axi_A_BUS_AWUSER;
output   m_axi_A_BUS_WVALID;
input   m_axi_A_BUS_WREADY;
output  [C_M_AXI_A_BUS_DATA_WIDTH - 1 : 0] m_axi_A_BUS_WDATA;
output  [C_M_AXI_A_BUS_WSTRB_WIDTH - 1 : 0] m_axi_A_BUS_WSTRB;
output   m_axi_A_BUS_WLAST;
output  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_WID;
output  [C_M_AXI_A_BUS_WUSER_WIDTH - 1 : 0] m_axi_A_BUS_WUSER;
output   m_axi_A_BUS_ARVALID;
input   m_axi_A_BUS_ARREADY;
output  [C_M_AXI_A_BUS_ADDR_WIDTH - 1 : 0] m_axi_A_BUS_ARADDR;
output  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_ARID;
output  [7:0] m_axi_A_BUS_ARLEN;
output  [2:0] m_axi_A_BUS_ARSIZE;
output  [1:0] m_axi_A_BUS_ARBURST;
output  [1:0] m_axi_A_BUS_ARLOCK;
output  [3:0] m_axi_A_BUS_ARCACHE;
output  [2:0] m_axi_A_BUS_ARPROT;
output  [3:0] m_axi_A_BUS_ARQOS;
output  [3:0] m_axi_A_BUS_ARREGION;
output  [C_M_AXI_A_BUS_ARUSER_WIDTH - 1 : 0] m_axi_A_BUS_ARUSER;
input   m_axi_A_BUS_RVALID;
output   m_axi_A_BUS_RREADY;
input  [C_M_AXI_A_BUS_DATA_WIDTH - 1 : 0] m_axi_A_BUS_RDATA;
input   m_axi_A_BUS_RLAST;
input  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_RID;
input  [C_M_AXI_A_BUS_RUSER_WIDTH - 1 : 0] m_axi_A_BUS_RUSER;
input  [1:0] m_axi_A_BUS_RRESP;
input   m_axi_A_BUS_BVALID;
output   m_axi_A_BUS_BREADY;
input  [1:0] m_axi_A_BUS_BRESP;
input  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_BID;
input  [C_M_AXI_A_BUS_BUSER_WIDTH - 1 : 0] m_axi_A_BUS_BUSER;
output   m_axi_PREF_WINDOW_AWVALID;
input   m_axi_PREF_WINDOW_AWREADY;
output  [C_M_AXI_PREF_WINDOW_ADDR_WIDTH - 1 : 0] m_axi_PREF_WINDOW_AWADDR;
output  [C_M_AXI_PREF_WINDOW_ID_WIDTH - 1 : 0] m_axi_PREF_WINDOW_AWID;
output  [7:0] m_axi_PREF_WINDOW_AWLEN;
output  [2:0] m_axi_PREF_WINDOW_AWSIZE;
output  [1:0] m_axi_PREF_WINDOW_AWBURST;
output  [1:0] m_axi_PREF_WINDOW_AWLOCK;
output  [3:0] m_axi_PREF_WINDOW_AWCACHE;
output  [2:0] m_axi_PREF_WINDOW_AWPROT;
output  [3:0] m_axi_PREF_WINDOW_AWQOS;
output  [3:0] m_axi_PREF_WINDOW_AWREGION;
output  [C_M_AXI_PREF_WINDOW_AWUSER_WIDTH - 1 : 0] m_axi_PREF_WINDOW_AWUSER;
output   m_axi_PREF_WINDOW_WVALID;
input   m_axi_PREF_WINDOW_WREADY;
output  [C_M_AXI_PREF_WINDOW_DATA_WIDTH - 1 : 0] m_axi_PREF_WINDOW_WDATA;
output  [C_M_AXI_PREF_WINDOW_WSTRB_WIDTH - 1 : 0] m_axi_PREF_WINDOW_WSTRB;
output   m_axi_PREF_WINDOW_WLAST;
output  [C_M_AXI_PREF_WINDOW_ID_WIDTH - 1 : 0] m_axi_PREF_WINDOW_WID;
output  [C_M_AXI_PREF_WINDOW_WUSER_WIDTH - 1 : 0] m_axi_PREF_WINDOW_WUSER;
output   m_axi_PREF_WINDOW_ARVALID;
input   m_axi_PREF_WINDOW_ARREADY;
output  [C_M_AXI_PREF_WINDOW_ADDR_WIDTH - 1 : 0] m_axi_PREF_WINDOW_ARADDR;
output  [C_M_AXI_PREF_WINDOW_ID_WIDTH - 1 : 0] m_axi_PREF_WINDOW_ARID;
output  [7:0] m_axi_PREF_WINDOW_ARLEN;
output  [2:0] m_axi_PREF_WINDOW_ARSIZE;
output  [1:0] m_axi_PREF_WINDOW_ARBURST;
output  [1:0] m_axi_PREF_WINDOW_ARLOCK;
output  [3:0] m_axi_PREF_WINDOW_ARCACHE;
output  [2:0] m_axi_PREF_WINDOW_ARPROT;
output  [3:0] m_axi_PREF_WINDOW_ARQOS;
output  [3:0] m_axi_PREF_WINDOW_ARREGION;
output  [C_M_AXI_PREF_WINDOW_ARUSER_WIDTH - 1 : 0] m_axi_PREF_WINDOW_ARUSER;
input   m_axi_PREF_WINDOW_RVALID;
output   m_axi_PREF_WINDOW_RREADY;
input  [C_M_AXI_PREF_WINDOW_DATA_WIDTH - 1 : 0] m_axi_PREF_WINDOW_RDATA;
input   m_axi_PREF_WINDOW_RLAST;
input  [C_M_AXI_PREF_WINDOW_ID_WIDTH - 1 : 0] m_axi_PREF_WINDOW_RID;
input  [C_M_AXI_PREF_WINDOW_RUSER_WIDTH - 1 : 0] m_axi_PREF_WINDOW_RUSER;
input  [1:0] m_axi_PREF_WINDOW_RRESP;
input   m_axi_PREF_WINDOW_BVALID;
output   m_axi_PREF_WINDOW_BREADY;
input  [1:0] m_axi_PREF_WINDOW_BRESP;
input  [C_M_AXI_PREF_WINDOW_ID_WIDTH - 1 : 0] m_axi_PREF_WINDOW_BID;
input  [C_M_AXI_PREF_WINDOW_BUSER_WIDTH - 1 : 0] m_axi_PREF_WINDOW_BUSER;
input   s_axi_CFG_AWVALID;
output   s_axi_CFG_AWREADY;
input  [C_S_AXI_CFG_ADDR_WIDTH - 1 : 0] s_axi_CFG_AWADDR;
input   s_axi_CFG_WVALID;
output   s_axi_CFG_WREADY;
input  [C_S_AXI_CFG_DATA_WIDTH - 1 : 0] s_axi_CFG_WDATA;
input  [C_S_AXI_CFG_WSTRB_WIDTH - 1 : 0] s_axi_CFG_WSTRB;
input   s_axi_CFG_ARVALID;
output   s_axi_CFG_ARREADY;
input  [C_S_AXI_CFG_ADDR_WIDTH - 1 : 0] s_axi_CFG_ARADDR;
output   s_axi_CFG_RVALID;
input   s_axi_CFG_RREADY;
output  [C_S_AXI_CFG_DATA_WIDTH - 1 : 0] s_axi_CFG_RDATA;
output  [1:0] s_axi_CFG_RRESP;
output   s_axi_CFG_BVALID;
input   s_axi_CFG_BREADY;
output  [1:0] s_axi_CFG_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] a;
wire   [31:0] n;
reg    A_BUS_blk_n_AR;
wire   [0:0] ap_CS_fsm_state11;
reg    A_BUS_blk_n_R;
wire   [0:0] ap_CS_fsm_state18;
wire   [0:0] ap_CS_fsm_state12;
wire   [0:0] ap_CS_fsm_state19;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond_reg_570;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_reg_570;
reg    ap_enable_reg_pp0_iter9;
reg   [0:0] ap_pipeline_reg_pp0_iter8_exitcond_reg_570;
reg    PREF_WINDOW_blk_n_AR;
wire   [0:0] ap_CS_fsm_state2;
reg    PREF_WINDOW_blk_n_R;
wire   [0:0] ap_CS_fsm_state9;
wire    A_BUS_AWREADY;
wire    A_BUS_WREADY;
reg    A_BUS_ARVALID;
wire    A_BUS_ARREADY;
reg   [31:0] A_BUS_ARADDR;
wire    A_BUS_RVALID;
reg    A_BUS_RREADY;
wire   [63:0] A_BUS_RDATA;
wire    A_BUS_RLAST;
wire   [0:0] A_BUS_RID;
wire   [0:0] A_BUS_RUSER;
wire   [1:0] A_BUS_RRESP;
wire    A_BUS_BVALID;
wire   [1:0] A_BUS_BRESP;
wire   [0:0] A_BUS_BID;
wire   [0:0] A_BUS_BUSER;
wire    PREF_WINDOW_AWREADY;
wire    PREF_WINDOW_WREADY;
reg    PREF_WINDOW_ARVALID;
wire    PREF_WINDOW_ARREADY;
wire    PREF_WINDOW_RVALID;
reg    PREF_WINDOW_RREADY;
wire   [31:0] PREF_WINDOW_RDATA;
wire    PREF_WINDOW_RLAST;
wire   [0:0] PREF_WINDOW_RID;
wire   [0:0] PREF_WINDOW_RUSER;
wire   [1:0] PREF_WINDOW_RRESP;
wire    PREF_WINDOW_BVALID;
wire   [1:0] PREF_WINDOW_BRESP;
wire   [0:0] PREF_WINDOW_BID;
wire   [0:0] PREF_WINDOW_BUSER;
reg   [2:0] j_reg_209;
reg   [15:0] reg_230;
reg    ap_sig_ioackin_A_BUS_ARREADY;
reg   [29:0] n3_reg_473;
reg   [28:0] a1_reg_478;
reg    ap_sig_ioackin_PREF_WINDOW_ARREADY;
wire   [31:0] tmp_10_fu_264_p1;
reg   [31:0] tmp_10_reg_496;
wire   [30:0] tmp_10_cast_fu_267_p1;
reg   [30:0] tmp_10_cast_reg_501;
wire   [31:0] i_cast2_fu_275_p1;
reg   [31:0] i_cast2_reg_506;
wire   [0:0] ap_CS_fsm_state10;
wire   [2:0] i_1_fu_285_p2;
reg   [2:0] i_1_reg_514;
wire   [30:0] a2_sum_fu_295_p2;
reg   [30:0] a2_sum_reg_519;
wire   [0:0] exitcond1_fu_279_p2;
reg   [31:0] A_BUS_addr_reg_524;
reg   [15:0] tmp_4_reg_530;
wire   [18:0] cum_offs_1_fu_338_p2;
wire   [0:0] ap_CS_fsm_state20;
wire   [0:0] ap_CS_fsm_state21;
reg   [0:0] tmp_14_reg_545;
wire   [64:0] grp_fu_357_p2;
reg   [64:0] mul_reg_551;
wire   [0:0] ap_CS_fsm_state26;
reg   [29:0] tmp_16_reg_556;
wire   [0:0] tmp_7_fu_423_p2;
wire   [0:0] ap_CS_fsm_state27;
wire   [31:0] i_2_fu_429_p2;
reg   [31:0] i_2_reg_565;
wire   [0:0] exitcond_fu_435_p2;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg   [0:0] ap_pipeline_reg_pp0_iter2_exitcond_reg_570;
reg   [0:0] ap_pipeline_reg_pp0_iter3_exitcond_reg_570;
reg   [0:0] ap_pipeline_reg_pp0_iter4_exitcond_reg_570;
reg   [0:0] ap_pipeline_reg_pp0_iter5_exitcond_reg_570;
reg   [0:0] ap_pipeline_reg_pp0_iter6_exitcond_reg_570;
reg   [0:0] ap_pipeline_reg_pp0_iter7_exitcond_reg_570;
reg   [0:0] ap_pipeline_reg_pp0_iter9_exitcond_reg_570;
wire   [2:0] j_1_fu_441_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [2:0] buff_addr_1_reg_579;
reg   [2:0] ap_pipeline_reg_pp0_iter1_buff_addr_1_reg_579;
reg   [2:0] ap_pipeline_reg_pp0_iter2_buff_addr_1_reg_579;
reg   [2:0] ap_pipeline_reg_pp0_iter3_buff_addr_1_reg_579;
reg   [2:0] ap_pipeline_reg_pp0_iter4_buff_addr_1_reg_579;
reg   [2:0] ap_pipeline_reg_pp0_iter5_buff_addr_1_reg_579;
reg   [2:0] ap_pipeline_reg_pp0_iter6_buff_addr_1_reg_579;
reg   [2:0] ap_pipeline_reg_pp0_iter7_buff_addr_1_reg_579;
reg   [2:0] ap_pipeline_reg_pp0_iter8_buff_addr_1_reg_579;
reg   [2:0] ap_pipeline_reg_pp0_iter9_buff_addr_1_reg_579;
wire   [31:0] buff_q0;
reg   [31:0] buff_load_reg_585;
reg    ap_enable_reg_pp0_iter1;
reg   [31:0] ap_pipeline_reg_pp0_iter2_buff_load_reg_585;
reg   [31:0] ap_pipeline_reg_pp0_iter3_buff_load_reg_585;
reg   [31:0] ap_pipeline_reg_pp0_iter4_buff_load_reg_585;
reg   [31:0] ap_pipeline_reg_pp0_iter5_buff_load_reg_585;
reg   [31:0] ap_pipeline_reg_pp0_iter6_buff_load_reg_585;
reg   [31:0] ap_pipeline_reg_pp0_iter7_buff_load_reg_585;
reg   [31:0] ap_pipeline_reg_pp0_iter8_buff_load_reg_585;
reg   [31:0] ap_pipeline_reg_pp0_iter9_buff_load_reg_585;
wire   [31:0] a2_sum5_fu_452_p2;
reg   [31:0] a2_sum5_reg_590;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter10;
reg   [2:0] buff_address0;
reg    buff_ce0;
reg    buff_we0;
wire   [31:0] buff_d0;
reg    buff_ce1;
reg    buff_we1;
wire   [31:0] buff_d1;
reg   [18:0] cum_offs_reg_175;
reg   [2:0] i_reg_187;
reg   [31:0] i1_reg_198;
wire   [0:0] ap_CS_fsm_state39;
wire   [31:0] j_cast1_fu_447_p1;
wire   [31:0] tmp_fu_254_p1;
wire  signed [31:0] a2_sum_cast_fu_300_p1;
reg    ap_reg_ioackin_PREF_WINDOW_ARREADY;
reg    ap_reg_ioackin_A_BUS_ARREADY;
reg   [31:0] N_fu_114;
wire  signed [30:0] cum_offs_cast6_cast_fu_291_p1;
wire  signed [18:0] tmp_cast_fu_310_p1;
wire   [18:0] tmp_1_fu_314_p2;
wire  signed [18:0] tmp_2_cast_fu_335_p1;
wire  signed [31:0] tmp_5_fu_347_p2;
wire   [33:0] grp_fu_357_p1;
wire   [64:0] neg_mul_fu_381_p2;
wire   [29:0] tmp_15_fu_386_p4;
wire  signed [31:0] tmp_11_fu_396_p1;
wire  signed [31:0] tmp_12_fu_400_p1;
wire   [31:0] tmp_13_fu_403_p3;
wire   [31:0] neg_ti_fu_410_p2;
wire   [31:0] tmp_6_fu_416_p3;
wire  signed [31:0] tmp_9_fu_463_p1;
reg   [28:0] ap_NS_fsm;
reg    ap_condition_629;

// power-on initialization
initial begin
#0 ap_CS_fsm = 29'b1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_reg_ioackin_PREF_WINDOW_ARREADY = 1'b0;
#0 ap_reg_ioackin_A_BUS_ARREADY = 1'b0;
end

skip_prefetch_CFG_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CFG_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CFG_DATA_WIDTH ))
skip_prefetch_CFG_s_axi_U(
    .AWVALID(s_axi_CFG_AWVALID),
    .AWREADY(s_axi_CFG_AWREADY),
    .AWADDR(s_axi_CFG_AWADDR),
    .WVALID(s_axi_CFG_WVALID),
    .WREADY(s_axi_CFG_WREADY),
    .WDATA(s_axi_CFG_WDATA),
    .WSTRB(s_axi_CFG_WSTRB),
    .ARVALID(s_axi_CFG_ARVALID),
    .ARREADY(s_axi_CFG_ARREADY),
    .ARADDR(s_axi_CFG_ARADDR),
    .RVALID(s_axi_CFG_RVALID),
    .RREADY(s_axi_CFG_RREADY),
    .RDATA(s_axi_CFG_RDATA),
    .RRESP(s_axi_CFG_RRESP),
    .BVALID(s_axi_CFG_BVALID),
    .BREADY(s_axi_CFG_BREADY),
    .BRESP(s_axi_CFG_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .a(a),
    .n(n)
);

skip_prefetch_A_BUS_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_A_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_A_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_A_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_A_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_A_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_A_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_A_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_A_BUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_A_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_A_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_A_BUS_CACHE_VALUE ))
skip_prefetch_A_BUS_m_axi_U(
    .AWVALID(m_axi_A_BUS_AWVALID),
    .AWREADY(m_axi_A_BUS_AWREADY),
    .AWADDR(m_axi_A_BUS_AWADDR),
    .AWID(m_axi_A_BUS_AWID),
    .AWLEN(m_axi_A_BUS_AWLEN),
    .AWSIZE(m_axi_A_BUS_AWSIZE),
    .AWBURST(m_axi_A_BUS_AWBURST),
    .AWLOCK(m_axi_A_BUS_AWLOCK),
    .AWCACHE(m_axi_A_BUS_AWCACHE),
    .AWPROT(m_axi_A_BUS_AWPROT),
    .AWQOS(m_axi_A_BUS_AWQOS),
    .AWREGION(m_axi_A_BUS_AWREGION),
    .AWUSER(m_axi_A_BUS_AWUSER),
    .WVALID(m_axi_A_BUS_WVALID),
    .WREADY(m_axi_A_BUS_WREADY),
    .WDATA(m_axi_A_BUS_WDATA),
    .WSTRB(m_axi_A_BUS_WSTRB),
    .WLAST(m_axi_A_BUS_WLAST),
    .WID(m_axi_A_BUS_WID),
    .WUSER(m_axi_A_BUS_WUSER),
    .ARVALID(m_axi_A_BUS_ARVALID),
    .ARREADY(m_axi_A_BUS_ARREADY),
    .ARADDR(m_axi_A_BUS_ARADDR),
    .ARID(m_axi_A_BUS_ARID),
    .ARLEN(m_axi_A_BUS_ARLEN),
    .ARSIZE(m_axi_A_BUS_ARSIZE),
    .ARBURST(m_axi_A_BUS_ARBURST),
    .ARLOCK(m_axi_A_BUS_ARLOCK),
    .ARCACHE(m_axi_A_BUS_ARCACHE),
    .ARPROT(m_axi_A_BUS_ARPROT),
    .ARQOS(m_axi_A_BUS_ARQOS),
    .ARREGION(m_axi_A_BUS_ARREGION),
    .ARUSER(m_axi_A_BUS_ARUSER),
    .RVALID(m_axi_A_BUS_RVALID),
    .RREADY(m_axi_A_BUS_RREADY),
    .RDATA(m_axi_A_BUS_RDATA),
    .RLAST(m_axi_A_BUS_RLAST),
    .RID(m_axi_A_BUS_RID),
    .RUSER(m_axi_A_BUS_RUSER),
    .RRESP(m_axi_A_BUS_RRESP),
    .BVALID(m_axi_A_BUS_BVALID),
    .BREADY(m_axi_A_BUS_BREADY),
    .BRESP(m_axi_A_BUS_BRESP),
    .BID(m_axi_A_BUS_BID),
    .BUSER(m_axi_A_BUS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(A_BUS_ARVALID),
    .I_ARREADY(A_BUS_ARREADY),
    .I_ARADDR(A_BUS_ARADDR),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_1),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(A_BUS_RVALID),
    .I_RREADY(A_BUS_RREADY),
    .I_RDATA(A_BUS_RDATA),
    .I_RID(A_BUS_RID),
    .I_RUSER(A_BUS_RUSER),
    .I_RRESP(A_BUS_RRESP),
    .I_RLAST(A_BUS_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(A_BUS_AWREADY),
    .I_AWADDR(ap_const_lv32_0),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_0),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(1'b0),
    .I_WREADY(A_BUS_WREADY),
    .I_WDATA(ap_const_lv64_0),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(ap_const_lv8_0),
    .I_BVALID(A_BUS_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(A_BUS_BRESP),
    .I_BID(A_BUS_BID),
    .I_BUSER(A_BUS_BUSER)
);

skip_prefetch_PREF_WINDOW_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_PREF_WINDOW_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_PREF_WINDOW_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_PREF_WINDOW_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_PREF_WINDOW_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_PREF_WINDOW_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_PREF_WINDOW_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_PREF_WINDOW_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_PREF_WINDOW_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_PREF_WINDOW_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_PREF_WINDOW_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_PREF_WINDOW_CACHE_VALUE ))
skip_prefetch_PREF_WINDOW_m_axi_U(
    .AWVALID(m_axi_PREF_WINDOW_AWVALID),
    .AWREADY(m_axi_PREF_WINDOW_AWREADY),
    .AWADDR(m_axi_PREF_WINDOW_AWADDR),
    .AWID(m_axi_PREF_WINDOW_AWID),
    .AWLEN(m_axi_PREF_WINDOW_AWLEN),
    .AWSIZE(m_axi_PREF_WINDOW_AWSIZE),
    .AWBURST(m_axi_PREF_WINDOW_AWBURST),
    .AWLOCK(m_axi_PREF_WINDOW_AWLOCK),
    .AWCACHE(m_axi_PREF_WINDOW_AWCACHE),
    .AWPROT(m_axi_PREF_WINDOW_AWPROT),
    .AWQOS(m_axi_PREF_WINDOW_AWQOS),
    .AWREGION(m_axi_PREF_WINDOW_AWREGION),
    .AWUSER(m_axi_PREF_WINDOW_AWUSER),
    .WVALID(m_axi_PREF_WINDOW_WVALID),
    .WREADY(m_axi_PREF_WINDOW_WREADY),
    .WDATA(m_axi_PREF_WINDOW_WDATA),
    .WSTRB(m_axi_PREF_WINDOW_WSTRB),
    .WLAST(m_axi_PREF_WINDOW_WLAST),
    .WID(m_axi_PREF_WINDOW_WID),
    .WUSER(m_axi_PREF_WINDOW_WUSER),
    .ARVALID(m_axi_PREF_WINDOW_ARVALID),
    .ARREADY(m_axi_PREF_WINDOW_ARREADY),
    .ARADDR(m_axi_PREF_WINDOW_ARADDR),
    .ARID(m_axi_PREF_WINDOW_ARID),
    .ARLEN(m_axi_PREF_WINDOW_ARLEN),
    .ARSIZE(m_axi_PREF_WINDOW_ARSIZE),
    .ARBURST(m_axi_PREF_WINDOW_ARBURST),
    .ARLOCK(m_axi_PREF_WINDOW_ARLOCK),
    .ARCACHE(m_axi_PREF_WINDOW_ARCACHE),
    .ARPROT(m_axi_PREF_WINDOW_ARPROT),
    .ARQOS(m_axi_PREF_WINDOW_ARQOS),
    .ARREGION(m_axi_PREF_WINDOW_ARREGION),
    .ARUSER(m_axi_PREF_WINDOW_ARUSER),
    .RVALID(m_axi_PREF_WINDOW_RVALID),
    .RREADY(m_axi_PREF_WINDOW_RREADY),
    .RDATA(m_axi_PREF_WINDOW_RDATA),
    .RLAST(m_axi_PREF_WINDOW_RLAST),
    .RID(m_axi_PREF_WINDOW_RID),
    .RUSER(m_axi_PREF_WINDOW_RUSER),
    .RRESP(m_axi_PREF_WINDOW_RRESP),
    .BVALID(m_axi_PREF_WINDOW_BVALID),
    .BREADY(m_axi_PREF_WINDOW_BREADY),
    .BRESP(m_axi_PREF_WINDOW_BRESP),
    .BID(m_axi_PREF_WINDOW_BID),
    .BUSER(m_axi_PREF_WINDOW_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(PREF_WINDOW_ARVALID),
    .I_ARREADY(PREF_WINDOW_ARREADY),
    .I_ARADDR(tmp_fu_254_p1),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_1),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(PREF_WINDOW_RVALID),
    .I_RREADY(PREF_WINDOW_RREADY),
    .I_RDATA(PREF_WINDOW_RDATA),
    .I_RID(PREF_WINDOW_RID),
    .I_RUSER(PREF_WINDOW_RUSER),
    .I_RRESP(PREF_WINDOW_RRESP),
    .I_RLAST(PREF_WINDOW_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(PREF_WINDOW_AWREADY),
    .I_AWADDR(ap_const_lv32_0),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_0),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(1'b0),
    .I_WREADY(PREF_WINDOW_WREADY),
    .I_WDATA(ap_const_lv32_0),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(ap_const_lv4_0),
    .I_BVALID(PREF_WINDOW_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(PREF_WINDOW_BRESP),
    .I_BID(PREF_WINDOW_BID),
    .I_BUSER(PREF_WINDOW_BUSER)
);

skip_prefetch_buff #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
buff_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buff_address0),
    .ce0(buff_ce0),
    .we0(buff_we0),
    .d0(buff_d0),
    .q0(buff_q0),
    .address1(ap_pipeline_reg_pp0_iter9_buff_addr_1_reg_579),
    .ce1(buff_ce1),
    .we1(buff_we1),
    .d1(buff_d1)
);

skip_prefetch_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
skip_prefetch_mulbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_5_fu_347_p2),
    .din1(grp_fu_357_p1),
    .ce(1'b1),
    .dout(grp_fu_357_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_pp0_stage0) & ~(1'b0 == exitcond_fu_435_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state27) & ~(1'b0 == tmp_7_fu_423_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == exitcond_fu_435_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((1'b1 == ap_CS_fsm_state27) & ~(1'b0 == tmp_7_fu_423_p2)) | (~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_pp0_stage0) & ~(1'b0 == exitcond_fu_435_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0)))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if (((1'b1 == ap_CS_fsm_state27) & ~(1'b0 == tmp_7_fu_423_p2))) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0)))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0)))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0)))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0)))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0)))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0)))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_A_BUS_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state11) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state12) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & ~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0)))))) begin
            ap_reg_ioackin_A_BUS_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state11) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b1 == A_BUS_ARREADY) & ~((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0))))) begin
            ap_reg_ioackin_A_BUS_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_PREF_WINDOW_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if (~(1'b0 == ap_sig_ioackin_PREF_WINDOW_ARREADY)) begin
                ap_reg_ioackin_PREF_WINDOW_ARREADY <= 1'b0;
            end else if ((1'b1 == PREF_WINDOW_ARREADY)) begin
                ap_reg_ioackin_PREF_WINDOW_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        cum_offs_reg_175 <= cum_offs_1_fu_338_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & ~(PREF_WINDOW_RVALID == 1'b0))) begin
        cum_offs_reg_175 <= ap_const_lv19_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(1'b0 == exitcond1_fu_279_p2))) begin
        i1_reg_198 <= ap_const_lv32_0;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        i1_reg_198 <= i_2_reg_565;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_reg_187 <= i_1_reg_514;
    end else if (((1'b1 == ap_CS_fsm_state9) & ~(PREF_WINDOW_RVALID == 1'b0))) begin
        i_reg_187 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) & ~(1'b0 == tmp_7_fu_423_p2))) begin
        j_reg_209 <= ap_const_lv3_0;
    end else if ((~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == exitcond_fu_435_p2))) begin
        j_reg_209 <= j_1_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
        A_BUS_addr_reg_524 <= a2_sum_cast_fu_300_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(PREF_WINDOW_RVALID == 1'b0))) begin
        N_fu_114 <= PREF_WINDOW_RDATA;
        tmp_10_cast_reg_501[28 : 0] <= tmp_10_cast_fu_267_p1[28 : 0];
        tmp_10_reg_496[28 : 0] <= tmp_10_fu_264_p1[28 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        a1_reg_478 <= {{a[ap_const_lv32_1F : ap_const_lv32_3]}};
        n3_reg_473 <= {{n[ap_const_lv32_1F : ap_const_lv32_2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_reg_570 == 1'b0))) begin
        a2_sum5_reg_590 <= a2_sum5_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'b0 == exitcond1_fu_279_p2))) begin
        a2_sum_reg_519 <= a2_sum_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_pipeline_reg_pp0_iter1_buff_addr_1_reg_579 <= buff_addr_1_reg_579;
        ap_pipeline_reg_pp0_iter1_exitcond_reg_570 <= exitcond_reg_570;
        exitcond_reg_570 <= exitcond_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if (~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0)))) begin
        ap_pipeline_reg_pp0_iter2_buff_addr_1_reg_579 <= ap_pipeline_reg_pp0_iter1_buff_addr_1_reg_579;
        ap_pipeline_reg_pp0_iter2_buff_load_reg_585 <= buff_load_reg_585;
        ap_pipeline_reg_pp0_iter2_exitcond_reg_570 <= ap_pipeline_reg_pp0_iter1_exitcond_reg_570;
        ap_pipeline_reg_pp0_iter3_buff_addr_1_reg_579 <= ap_pipeline_reg_pp0_iter2_buff_addr_1_reg_579;
        ap_pipeline_reg_pp0_iter3_buff_load_reg_585 <= ap_pipeline_reg_pp0_iter2_buff_load_reg_585;
        ap_pipeline_reg_pp0_iter3_exitcond_reg_570 <= ap_pipeline_reg_pp0_iter2_exitcond_reg_570;
        ap_pipeline_reg_pp0_iter4_buff_addr_1_reg_579 <= ap_pipeline_reg_pp0_iter3_buff_addr_1_reg_579;
        ap_pipeline_reg_pp0_iter4_buff_load_reg_585 <= ap_pipeline_reg_pp0_iter3_buff_load_reg_585;
        ap_pipeline_reg_pp0_iter4_exitcond_reg_570 <= ap_pipeline_reg_pp0_iter3_exitcond_reg_570;
        ap_pipeline_reg_pp0_iter5_buff_addr_1_reg_579 <= ap_pipeline_reg_pp0_iter4_buff_addr_1_reg_579;
        ap_pipeline_reg_pp0_iter5_buff_load_reg_585 <= ap_pipeline_reg_pp0_iter4_buff_load_reg_585;
        ap_pipeline_reg_pp0_iter5_exitcond_reg_570 <= ap_pipeline_reg_pp0_iter4_exitcond_reg_570;
        ap_pipeline_reg_pp0_iter6_buff_addr_1_reg_579 <= ap_pipeline_reg_pp0_iter5_buff_addr_1_reg_579;
        ap_pipeline_reg_pp0_iter6_buff_load_reg_585 <= ap_pipeline_reg_pp0_iter5_buff_load_reg_585;
        ap_pipeline_reg_pp0_iter6_exitcond_reg_570 <= ap_pipeline_reg_pp0_iter5_exitcond_reg_570;
        ap_pipeline_reg_pp0_iter7_buff_addr_1_reg_579 <= ap_pipeline_reg_pp0_iter6_buff_addr_1_reg_579;
        ap_pipeline_reg_pp0_iter7_buff_load_reg_585 <= ap_pipeline_reg_pp0_iter6_buff_load_reg_585;
        ap_pipeline_reg_pp0_iter7_exitcond_reg_570 <= ap_pipeline_reg_pp0_iter6_exitcond_reg_570;
        ap_pipeline_reg_pp0_iter8_buff_addr_1_reg_579 <= ap_pipeline_reg_pp0_iter7_buff_addr_1_reg_579;
        ap_pipeline_reg_pp0_iter8_buff_load_reg_585 <= ap_pipeline_reg_pp0_iter7_buff_load_reg_585;
        ap_pipeline_reg_pp0_iter8_exitcond_reg_570 <= ap_pipeline_reg_pp0_iter7_exitcond_reg_570;
        ap_pipeline_reg_pp0_iter9_buff_addr_1_reg_579 <= ap_pipeline_reg_pp0_iter8_buff_addr_1_reg_579;
        ap_pipeline_reg_pp0_iter9_buff_load_reg_585 <= ap_pipeline_reg_pp0_iter8_buff_load_reg_585;
        ap_pipeline_reg_pp0_iter9_exitcond_reg_570 <= ap_pipeline_reg_pp0_iter8_exitcond_reg_570;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == exitcond_fu_435_p2))) begin
        buff_addr_1_reg_579 <= j_cast1_fu_447_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_reg_570 == 1'b0))) begin
        buff_load_reg_585 <= buff_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_1_reg_514 <= i_1_fu_285_p2;
        i_cast2_reg_506[2 : 0] <= i_cast2_fu_275_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        i_2_reg_565 <= i_2_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        mul_reg_551 <= grp_fu_357_p2;
        tmp_16_reg_556 <= {{grp_fu_357_p2[ap_const_lv32_40 : ap_const_lv32_23]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state18) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & ~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0)))))) begin
        reg_230 <= {{A_BUS_RDATA[ap_const_lv32_3F : ap_const_lv32_30]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_14_reg_545 <= tmp_5_fu_347_p2[ap_const_lv32_1F];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & ~(A_BUS_RVALID == 1'b0))) begin
        tmp_4_reg_530 <= {{A_BUS_RDATA[ap_const_lv32_2F : ap_const_lv32_20]}};
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) begin
        if ((ap_condition_629 == 1'b1)) begin
            A_BUS_ARADDR = a2_sum5_reg_590;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            A_BUS_ARADDR = A_BUS_addr_reg_524;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            A_BUS_ARADDR = a2_sum_cast_fu_300_p1;
        end else begin
            A_BUS_ARADDR = 'bx;
        end
    end else begin
        A_BUS_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY) & ~((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0))))) begin
        A_BUS_ARVALID = 1'b1;
    end else begin
        A_BUS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state18) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & ~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0)))) | ((1'b1 == ap_CS_fsm_state19) & ~(A_BUS_RVALID == 1'b0)))) begin
        A_BUS_RREADY = 1'b1;
    end else begin
        A_BUS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0)))) begin
        A_BUS_blk_n_AR = m_axi_A_BUS_ARREADY;
    end else begin
        A_BUS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570)))) begin
        A_BUS_blk_n_R = m_axi_A_BUS_RVALID;
    end else begin
        A_BUS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_reg_ioackin_PREF_WINDOW_ARREADY))) begin
        PREF_WINDOW_ARVALID = 1'b1;
    end else begin
        PREF_WINDOW_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(PREF_WINDOW_RVALID == 1'b0))) begin
        PREF_WINDOW_RREADY = 1'b1;
    end else begin
        PREF_WINDOW_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        PREF_WINDOW_blk_n_AR = m_axi_PREF_WINDOW_ARREADY;
    end else begin
        PREF_WINDOW_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        PREF_WINDOW_blk_n_R = m_axi_PREF_WINDOW_RVALID;
    end else begin
        PREF_WINDOW_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (1'b0 == tmp_7_fu_423_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (1'b0 == tmp_7_fu_423_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) begin
        ap_sig_ioackin_A_BUS_ARREADY = A_BUS_ARREADY;
    end else begin
        ap_sig_ioackin_A_BUS_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_PREF_WINDOW_ARREADY)) begin
        ap_sig_ioackin_PREF_WINDOW_ARREADY = PREF_WINDOW_ARREADY;
    end else begin
        ap_sig_ioackin_PREF_WINDOW_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        buff_address0 = j_cast1_fu_447_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buff_address0 = i_cast2_reg_506;
    end else begin
        buff_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state19) & ~(A_BUS_RVALID == 1'b0)) | (~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0))) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)))) begin
        buff_ce0 = 1'b1;
    end else begin
        buff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0))) & (1'b1 == ap_enable_reg_pp0_iter10))) begin
        buff_ce1 = 1'b1;
    end else begin
        buff_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) & ~(A_BUS_RVALID == 1'b0))) begin
        buff_we0 = 1'b1;
    end else begin
        buff_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0))) & (1'b1 == ap_enable_reg_pp0_iter10) & (1'b0 == ap_pipeline_reg_pp0_iter9_exitcond_reg_570))) begin
        buff_we1 = 1'b1;
    end else begin
        buff_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == ap_sig_ioackin_PREF_WINDOW_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (~(PREF_WINDOW_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (~(1'b0 == exitcond1_fu_279_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if ((1'b0 == tmp_7_fu_423_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~(~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0))) & (1'b1 == ap_enable_reg_pp0_iter10) & ~(1'b1 == ap_enable_reg_pp0_iter9)) & ~(~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0))) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_fu_435_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0))) & (1'b1 == ap_enable_reg_pp0_iter10) & ~(1'b1 == ap_enable_reg_pp0_iter9)) | (~(((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & (1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0))) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_fu_435_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a2_sum5_fu_452_p2 = (tmp_10_reg_496 + buff_q0);

assign a2_sum_cast_fu_300_p1 = $signed(a2_sum_reg_519);

assign a2_sum_fu_295_p2 = ($signed(cum_offs_cast6_cast_fu_291_p1) + $signed(tmp_10_cast_reg_501));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1B];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state39 = ap_CS_fsm[ap_const_lv32_1C];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

always @ (*) begin
    ap_condition_629 = ((1'b1 == ap_enable_reg_pp0_iter2) & (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_pipeline_reg_pp0_iter8_exitcond_reg_570) & (A_BUS_RVALID == 1'b0)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign buff_d0 = $signed(tmp_1_fu_314_p2);

assign buff_d1 = ($signed(ap_pipeline_reg_pp0_iter9_buff_load_reg_585) + $signed(tmp_9_fu_463_p1));

assign cum_offs_1_fu_338_p2 = ($signed(cum_offs_reg_175) + $signed(tmp_2_cast_fu_335_p1));

assign cum_offs_cast6_cast_fu_291_p1 = $signed(cum_offs_reg_175);

assign exitcond1_fu_279_p2 = ((i_reg_187 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign exitcond_fu_435_p2 = ((j_reg_209 == ap_const_lv3_5) ? 1'b1 : 1'b0);

assign grp_fu_357_p1 = ap_const_lv65_19999999A;

assign i_1_fu_285_p2 = (i_reg_187 + ap_const_lv3_1);

assign i_2_fu_429_p2 = (i1_reg_198 + ap_const_lv32_1);

assign i_cast2_fu_275_p1 = i_reg_187;

assign j_1_fu_441_p2 = (j_reg_209 + ap_const_lv3_1);

assign j_cast1_fu_447_p1 = j_reg_209;

assign neg_mul_fu_381_p2 = (ap_const_lv65_0 - mul_reg_551);

assign neg_ti_fu_410_p2 = (ap_const_lv32_0 - tmp_13_fu_403_p3);

assign tmp_10_cast_fu_267_p1 = a1_reg_478;

assign tmp_10_fu_264_p1 = a1_reg_478;

assign tmp_11_fu_396_p1 = $signed(tmp_15_fu_386_p4);

assign tmp_12_fu_400_p1 = $signed(tmp_16_reg_556);

assign tmp_13_fu_403_p3 = ((tmp_14_reg_545[0:0] === 1'b1) ? tmp_11_fu_396_p1 : tmp_12_fu_400_p1);

assign tmp_15_fu_386_p4 = {{neg_mul_fu_381_p2[ap_const_lv32_40 : ap_const_lv32_23]}};

assign tmp_1_fu_314_p2 = ($signed(tmp_cast_fu_310_p1) + $signed(cum_offs_reg_175));

assign tmp_2_cast_fu_335_p1 = $signed(tmp_4_reg_530);

assign tmp_5_fu_347_p2 = ($signed(N_fu_114) + $signed(ap_const_lv32_FFFFFFFB));

assign tmp_6_fu_416_p3 = ((tmp_14_reg_545[0:0] === 1'b1) ? neg_ti_fu_410_p2 : tmp_12_fu_400_p1);

assign tmp_7_fu_423_p2 = (($signed(i1_reg_198) < $signed(tmp_6_fu_416_p3)) ? 1'b1 : 1'b0);

assign tmp_9_fu_463_p1 = $signed(reg_230);

assign tmp_cast_fu_310_p1 = $signed(reg_230);

assign tmp_fu_254_p1 = n3_reg_473;

always @ (posedge ap_clk) begin
    tmp_10_reg_496[31:29] <= 3'b000;
    tmp_10_cast_reg_501[30:29] <= 2'b00;
    i_cast2_reg_506[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //skip_prefetch
