-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity skip_prefetch is
generic (
    C_M_AXI_A_BUS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_A_BUS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_A_BUS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_A_BUS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_PREF_WINDOW_ID_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PREF_WINDOW_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_PREF_WINDOW_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CFG_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CFG_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_PREF_WINDOW_USER_VALUE : INTEGER := 0;
    C_M_AXI_PREF_WINDOW_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_A_BUS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_A_BUS_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_A_BUS_USER_VALUE : INTEGER := 0;
    C_M_AXI_PREF_WINDOW_PROT_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_A_BUS_AWVALID : OUT STD_LOGIC;
    m_axi_A_BUS_AWREADY : IN STD_LOGIC;
    m_axi_A_BUS_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_A_BUS_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_A_BUS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_BUS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_BUS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_AWUSER_WIDTH-1 downto 0);
    m_axi_A_BUS_WVALID : OUT STD_LOGIC;
    m_axi_A_BUS_WREADY : IN STD_LOGIC;
    m_axi_A_BUS_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_DATA_WIDTH-1 downto 0);
    m_axi_A_BUS_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_DATA_WIDTH/8-1 downto 0);
    m_axi_A_BUS_WLAST : OUT STD_LOGIC;
    m_axi_A_BUS_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_WUSER_WIDTH-1 downto 0);
    m_axi_A_BUS_ARVALID : OUT STD_LOGIC;
    m_axi_A_BUS_ARREADY : IN STD_LOGIC;
    m_axi_A_BUS_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_A_BUS_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_A_BUS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_BUS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_A_BUS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_A_BUS_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ARUSER_WIDTH-1 downto 0);
    m_axi_A_BUS_RVALID : IN STD_LOGIC;
    m_axi_A_BUS_RREADY : OUT STD_LOGIC;
    m_axi_A_BUS_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_DATA_WIDTH-1 downto 0);
    m_axi_A_BUS_RLAST : IN STD_LOGIC;
    m_axi_A_BUS_RID : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_RUSER_WIDTH-1 downto 0);
    m_axi_A_BUS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_BVALID : IN STD_LOGIC;
    m_axi_A_BUS_BREADY : OUT STD_LOGIC;
    m_axi_A_BUS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_A_BUS_BID : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_ID_WIDTH-1 downto 0);
    m_axi_A_BUS_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_A_BUS_BUSER_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_AWVALID : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_AWREADY : IN STD_LOGIC;
    m_axi_PREF_WINDOW_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ADDR_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ID_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_PREF_WINDOW_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_PREF_WINDOW_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_PREF_WINDOW_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_AWUSER_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_WVALID : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_WREADY : IN STD_LOGIC;
    m_axi_PREF_WINDOW_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_DATA_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_DATA_WIDTH/8-1 downto 0);
    m_axi_PREF_WINDOW_WLAST : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ID_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_WUSER_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_ARVALID : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_ARREADY : IN STD_LOGIC;
    m_axi_PREF_WINDOW_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ADDR_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ID_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_PREF_WINDOW_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_PREF_WINDOW_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_PREF_WINDOW_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_PREF_WINDOW_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ARUSER_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_RVALID : IN STD_LOGIC;
    m_axi_PREF_WINDOW_RREADY : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_DATA_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_RLAST : IN STD_LOGIC;
    m_axi_PREF_WINDOW_RID : IN STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ID_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_RUSER_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_BVALID : IN STD_LOGIC;
    m_axi_PREF_WINDOW_BREADY : OUT STD_LOGIC;
    m_axi_PREF_WINDOW_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_PREF_WINDOW_BID : IN STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_ID_WIDTH-1 downto 0);
    m_axi_PREF_WINDOW_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_PREF_WINDOW_BUSER_WIDTH-1 downto 0);
    s_axi_CFG_AWVALID : IN STD_LOGIC;
    s_axi_CFG_AWREADY : OUT STD_LOGIC;
    s_axi_CFG_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_ADDR_WIDTH-1 downto 0);
    s_axi_CFG_WVALID : IN STD_LOGIC;
    s_axi_CFG_WREADY : OUT STD_LOGIC;
    s_axi_CFG_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_DATA_WIDTH-1 downto 0);
    s_axi_CFG_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_DATA_WIDTH/8-1 downto 0);
    s_axi_CFG_ARVALID : IN STD_LOGIC;
    s_axi_CFG_ARREADY : OUT STD_LOGIC;
    s_axi_CFG_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CFG_ADDR_WIDTH-1 downto 0);
    s_axi_CFG_RVALID : OUT STD_LOGIC;
    s_axi_CFG_RREADY : IN STD_LOGIC;
    s_axi_CFG_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CFG_DATA_WIDTH-1 downto 0);
    s_axi_CFG_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CFG_BVALID : OUT STD_LOGIC;
    s_axi_CFG_BREADY : IN STD_LOGIC;
    s_axi_CFG_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of skip_prefetch is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "skip_prefetch,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.848000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=4,HLS_SYN_FF=1789,HLS_SYN_LUT=2239}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_FFFFFFFB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111011";
    constant ap_const_lv65_19999999A : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000110011001100110011001100110011010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (31 downto 0);
    signal n : STD_LOGIC_VECTOR (31 downto 0);
    signal A_BUS_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal A_BUS_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal exitcond_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter1_exitcond_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_pipeline_reg_pp0_iter8_exitcond_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal PREF_WINDOW_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal PREF_WINDOW_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal A_BUS_AWREADY : STD_LOGIC;
    signal A_BUS_WREADY : STD_LOGIC;
    signal A_BUS_ARVALID : STD_LOGIC;
    signal A_BUS_ARREADY : STD_LOGIC;
    signal A_BUS_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal A_BUS_RVALID : STD_LOGIC;
    signal A_BUS_RREADY : STD_LOGIC;
    signal A_BUS_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal A_BUS_RLAST : STD_LOGIC;
    signal A_BUS_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal A_BUS_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal A_BUS_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal A_BUS_BVALID : STD_LOGIC;
    signal A_BUS_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal A_BUS_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal A_BUS_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal PREF_WINDOW_AWREADY : STD_LOGIC;
    signal PREF_WINDOW_WREADY : STD_LOGIC;
    signal PREF_WINDOW_ARVALID : STD_LOGIC;
    signal PREF_WINDOW_ARREADY : STD_LOGIC;
    signal PREF_WINDOW_RVALID : STD_LOGIC;
    signal PREF_WINDOW_RREADY : STD_LOGIC;
    signal PREF_WINDOW_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal PREF_WINDOW_RLAST : STD_LOGIC;
    signal PREF_WINDOW_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal PREF_WINDOW_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal PREF_WINDOW_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal PREF_WINDOW_BVALID : STD_LOGIC;
    signal PREF_WINDOW_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal PREF_WINDOW_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal PREF_WINDOW_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_209 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_230 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_ioackin_A_BUS_ARREADY : STD_LOGIC;
    signal n3_reg_473 : STD_LOGIC_VECTOR (29 downto 0);
    signal a1_reg_478 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_sig_ioackin_PREF_WINDOW_ARREADY : STD_LOGIC;
    signal tmp_10_fu_264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_cast_fu_267_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_cast_reg_501 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_cast2_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast2_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_1_fu_285_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_514 : STD_LOGIC_VECTOR (2 downto 0);
    signal a2_sum_fu_295_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal a2_sum_reg_519 : STD_LOGIC_VECTOR (30 downto 0);
    signal exitcond1_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_BUS_addr_reg_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_530 : STD_LOGIC_VECTOR (15 downto 0);
    signal cum_offs_1_fu_338_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_14_reg_545 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_357_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_reg_551 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_16_reg_556 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_7_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_2_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_pipeline_reg_pp0_iter2_exitcond_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter3_exitcond_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter4_exitcond_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter5_exitcond_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter6_exitcond_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter7_exitcond_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter9_exitcond_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_441_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal buff_addr_1_reg_579 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter1_buff_addr_1_reg_579 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter2_buff_addr_1_reg_579 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter3_buff_addr_1_reg_579 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter4_buff_addr_1_reg_579 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter5_buff_addr_1_reg_579 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter6_buff_addr_1_reg_579 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter7_buff_addr_1_reg_579 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter8_buff_addr_1_reg_579 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_pipeline_reg_pp0_iter9_buff_addr_1_reg_579 : STD_LOGIC_VECTOR (2 downto 0);
    signal buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_load_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_pipeline_reg_pp0_iter2_buff_load_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter3_buff_load_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter4_buff_load_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter5_buff_load_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter6_buff_load_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter7_buff_load_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter8_buff_load_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_pipeline_reg_pp0_iter9_buff_load_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal a2_sum5_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a2_sum5_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal buff_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal buff_ce0 : STD_LOGIC;
    signal buff_we0 : STD_LOGIC;
    signal buff_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buff_ce1 : STD_LOGIC;
    signal buff_we1 : STD_LOGIC;
    signal buff_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cum_offs_reg_175 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_reg_187 : STD_LOGIC_VECTOR (2 downto 0);
    signal i1_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal j_cast1_fu_447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a2_sum_cast_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_PREF_WINDOW_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_A_BUS_ARREADY : STD_LOGIC := '0';
    signal N_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal cum_offs_cast6_cast_fu_291_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_cast_fu_310_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_1_fu_314_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_2_cast_fu_335_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_5_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_357_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal neg_mul_fu_381_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_15_fu_386_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_11_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_403_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_ti_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_416_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_463_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_condition_629 : BOOLEAN;

    component skip_prefetch_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component skip_prefetch_buff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component skip_prefetch_CFG_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        a : OUT STD_LOGIC_VECTOR (31 downto 0);
        n : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component skip_prefetch_A_BUS_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component skip_prefetch_PREF_WINDOW_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    skip_prefetch_CFG_s_axi_U : component skip_prefetch_CFG_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CFG_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CFG_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CFG_AWVALID,
        AWREADY => s_axi_CFG_AWREADY,
        AWADDR => s_axi_CFG_AWADDR,
        WVALID => s_axi_CFG_WVALID,
        WREADY => s_axi_CFG_WREADY,
        WDATA => s_axi_CFG_WDATA,
        WSTRB => s_axi_CFG_WSTRB,
        ARVALID => s_axi_CFG_ARVALID,
        ARREADY => s_axi_CFG_ARREADY,
        ARADDR => s_axi_CFG_ARADDR,
        RVALID => s_axi_CFG_RVALID,
        RREADY => s_axi_CFG_RREADY,
        RDATA => s_axi_CFG_RDATA,
        RRESP => s_axi_CFG_RRESP,
        BVALID => s_axi_CFG_BVALID,
        BREADY => s_axi_CFG_BREADY,
        BRESP => s_axi_CFG_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        a => a,
        n => n);

    skip_prefetch_A_BUS_m_axi_U : component skip_prefetch_A_BUS_m_axi
    generic map (
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_A_BUS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_A_BUS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_A_BUS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_A_BUS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_A_BUS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_A_BUS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_A_BUS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_A_BUS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_A_BUS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_A_BUS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_A_BUS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_A_BUS_AWVALID,
        AWREADY => m_axi_A_BUS_AWREADY,
        AWADDR => m_axi_A_BUS_AWADDR,
        AWID => m_axi_A_BUS_AWID,
        AWLEN => m_axi_A_BUS_AWLEN,
        AWSIZE => m_axi_A_BUS_AWSIZE,
        AWBURST => m_axi_A_BUS_AWBURST,
        AWLOCK => m_axi_A_BUS_AWLOCK,
        AWCACHE => m_axi_A_BUS_AWCACHE,
        AWPROT => m_axi_A_BUS_AWPROT,
        AWQOS => m_axi_A_BUS_AWQOS,
        AWREGION => m_axi_A_BUS_AWREGION,
        AWUSER => m_axi_A_BUS_AWUSER,
        WVALID => m_axi_A_BUS_WVALID,
        WREADY => m_axi_A_BUS_WREADY,
        WDATA => m_axi_A_BUS_WDATA,
        WSTRB => m_axi_A_BUS_WSTRB,
        WLAST => m_axi_A_BUS_WLAST,
        WID => m_axi_A_BUS_WID,
        WUSER => m_axi_A_BUS_WUSER,
        ARVALID => m_axi_A_BUS_ARVALID,
        ARREADY => m_axi_A_BUS_ARREADY,
        ARADDR => m_axi_A_BUS_ARADDR,
        ARID => m_axi_A_BUS_ARID,
        ARLEN => m_axi_A_BUS_ARLEN,
        ARSIZE => m_axi_A_BUS_ARSIZE,
        ARBURST => m_axi_A_BUS_ARBURST,
        ARLOCK => m_axi_A_BUS_ARLOCK,
        ARCACHE => m_axi_A_BUS_ARCACHE,
        ARPROT => m_axi_A_BUS_ARPROT,
        ARQOS => m_axi_A_BUS_ARQOS,
        ARREGION => m_axi_A_BUS_ARREGION,
        ARUSER => m_axi_A_BUS_ARUSER,
        RVALID => m_axi_A_BUS_RVALID,
        RREADY => m_axi_A_BUS_RREADY,
        RDATA => m_axi_A_BUS_RDATA,
        RLAST => m_axi_A_BUS_RLAST,
        RID => m_axi_A_BUS_RID,
        RUSER => m_axi_A_BUS_RUSER,
        RRESP => m_axi_A_BUS_RRESP,
        BVALID => m_axi_A_BUS_BVALID,
        BREADY => m_axi_A_BUS_BREADY,
        BRESP => m_axi_A_BUS_BRESP,
        BID => m_axi_A_BUS_BID,
        BUSER => m_axi_A_BUS_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => A_BUS_ARVALID,
        I_ARREADY => A_BUS_ARREADY,
        I_ARADDR => A_BUS_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => A_BUS_RVALID,
        I_RREADY => A_BUS_RREADY,
        I_RDATA => A_BUS_RDATA,
        I_RID => A_BUS_RID,
        I_RUSER => A_BUS_RUSER,
        I_RRESP => A_BUS_RRESP,
        I_RLAST => A_BUS_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => A_BUS_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => A_BUS_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => A_BUS_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => A_BUS_BRESP,
        I_BID => A_BUS_BID,
        I_BUSER => A_BUS_BUSER);

    skip_prefetch_PREF_WINDOW_m_axi_U : component skip_prefetch_PREF_WINDOW_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_PREF_WINDOW_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_PREF_WINDOW_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_PREF_WINDOW_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_PREF_WINDOW_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_PREF_WINDOW_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_PREF_WINDOW_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_PREF_WINDOW_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_PREF_WINDOW_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_PREF_WINDOW_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_PREF_WINDOW_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_PREF_WINDOW_CACHE_VALUE)
    port map (
        AWVALID => m_axi_PREF_WINDOW_AWVALID,
        AWREADY => m_axi_PREF_WINDOW_AWREADY,
        AWADDR => m_axi_PREF_WINDOW_AWADDR,
        AWID => m_axi_PREF_WINDOW_AWID,
        AWLEN => m_axi_PREF_WINDOW_AWLEN,
        AWSIZE => m_axi_PREF_WINDOW_AWSIZE,
        AWBURST => m_axi_PREF_WINDOW_AWBURST,
        AWLOCK => m_axi_PREF_WINDOW_AWLOCK,
        AWCACHE => m_axi_PREF_WINDOW_AWCACHE,
        AWPROT => m_axi_PREF_WINDOW_AWPROT,
        AWQOS => m_axi_PREF_WINDOW_AWQOS,
        AWREGION => m_axi_PREF_WINDOW_AWREGION,
        AWUSER => m_axi_PREF_WINDOW_AWUSER,
        WVALID => m_axi_PREF_WINDOW_WVALID,
        WREADY => m_axi_PREF_WINDOW_WREADY,
        WDATA => m_axi_PREF_WINDOW_WDATA,
        WSTRB => m_axi_PREF_WINDOW_WSTRB,
        WLAST => m_axi_PREF_WINDOW_WLAST,
        WID => m_axi_PREF_WINDOW_WID,
        WUSER => m_axi_PREF_WINDOW_WUSER,
        ARVALID => m_axi_PREF_WINDOW_ARVALID,
        ARREADY => m_axi_PREF_WINDOW_ARREADY,
        ARADDR => m_axi_PREF_WINDOW_ARADDR,
        ARID => m_axi_PREF_WINDOW_ARID,
        ARLEN => m_axi_PREF_WINDOW_ARLEN,
        ARSIZE => m_axi_PREF_WINDOW_ARSIZE,
        ARBURST => m_axi_PREF_WINDOW_ARBURST,
        ARLOCK => m_axi_PREF_WINDOW_ARLOCK,
        ARCACHE => m_axi_PREF_WINDOW_ARCACHE,
        ARPROT => m_axi_PREF_WINDOW_ARPROT,
        ARQOS => m_axi_PREF_WINDOW_ARQOS,
        ARREGION => m_axi_PREF_WINDOW_ARREGION,
        ARUSER => m_axi_PREF_WINDOW_ARUSER,
        RVALID => m_axi_PREF_WINDOW_RVALID,
        RREADY => m_axi_PREF_WINDOW_RREADY,
        RDATA => m_axi_PREF_WINDOW_RDATA,
        RLAST => m_axi_PREF_WINDOW_RLAST,
        RID => m_axi_PREF_WINDOW_RID,
        RUSER => m_axi_PREF_WINDOW_RUSER,
        RRESP => m_axi_PREF_WINDOW_RRESP,
        BVALID => m_axi_PREF_WINDOW_BVALID,
        BREADY => m_axi_PREF_WINDOW_BREADY,
        BRESP => m_axi_PREF_WINDOW_BRESP,
        BID => m_axi_PREF_WINDOW_BID,
        BUSER => m_axi_PREF_WINDOW_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => PREF_WINDOW_ARVALID,
        I_ARREADY => PREF_WINDOW_ARREADY,
        I_ARADDR => tmp_fu_254_p1,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => PREF_WINDOW_RVALID,
        I_RREADY => PREF_WINDOW_RREADY,
        I_RDATA => PREF_WINDOW_RDATA,
        I_RID => PREF_WINDOW_RID,
        I_RUSER => PREF_WINDOW_RUSER,
        I_RRESP => PREF_WINDOW_RRESP,
        I_RLAST => PREF_WINDOW_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => PREF_WINDOW_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => PREF_WINDOW_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => PREF_WINDOW_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => PREF_WINDOW_BRESP,
        I_BID => PREF_WINDOW_BID,
        I_BUSER => PREF_WINDOW_BUSER);

    buff_U : component skip_prefetch_buff
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buff_address0,
        ce0 => buff_ce0,
        we0 => buff_we0,
        d0 => buff_d0,
        q0 => buff_q0,
        address1 => ap_pipeline_reg_pp0_iter9_buff_addr_1_reg_579,
        ce1 => buff_ce1,
        we1 => buff_we1,
        d1 => buff_d1);

    skip_prefetch_mulbkb_U0 : component skip_prefetch_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_5_fu_347_p2,
        din1 => grp_fu_357_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_357_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0)))) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = exitcond_fu_435_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state27) and not((ap_const_lv1_0 = tmp_7_fu_423_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0)))) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_fu_435_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state27) and not((ap_const_lv1_0 = tmp_7_fu_423_p2))) or (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0)))) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = exitcond_fu_435_p2))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0))))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state27) and not((ap_const_lv1_0 = tmp_7_fu_423_p2)))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0))))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0))))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0))))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0))))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0))))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0))))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0))))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0))))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_A_BUS_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_A_BUS_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_lv1_1 = ap_CS_fsm_state11) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_lv1_1 = ap_CS_fsm_state12) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0))))))) then 
                    ap_reg_ioackin_A_BUS_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state11) and (ap_const_logic_1 = A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state12) and (ap_const_logic_1 = A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_1 = A_BUS_ARREADY) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0)))))) then 
                    ap_reg_ioackin_A_BUS_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_PREF_WINDOW_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_PREF_WINDOW_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state2)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_PREF_WINDOW_ARREADY))) then 
                        ap_reg_ioackin_PREF_WINDOW_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = PREF_WINDOW_ARREADY)) then 
                        ap_reg_ioackin_PREF_WINDOW_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    cum_offs_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                cum_offs_reg_175 <= cum_offs_1_fu_338_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((PREF_WINDOW_RVALID = ap_const_logic_0)))) then 
                cum_offs_reg_175 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    i1_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((ap_const_lv1_0 = exitcond1_fu_279_p2)))) then 
                i1_reg_198 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state39))) then 
                i1_reg_198 <= i_2_reg_565;
            end if; 
        end if;
    end process;

    i_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state20))) then 
                i_reg_187 <= i_1_reg_514;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((PREF_WINDOW_RVALID = ap_const_logic_0)))) then 
                i_reg_187 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state27) and not((ap_const_lv1_0 = tmp_7_fu_423_p2)))) then 
                j_reg_209 <= ap_const_lv3_0;
            elsif ((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0)))) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_fu_435_p2))) then 
                j_reg_209 <= j_1_fu_441_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state11) and not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)))) then
                A_BUS_addr_reg_524 <= a2_sum_cast_fu_300_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((PREF_WINDOW_RVALID = ap_const_logic_0)))) then
                N_fu_114 <= PREF_WINDOW_RDATA;
                    tmp_10_cast_reg_501(28 downto 0) <= tmp_10_cast_fu_267_p1(28 downto 0);
                    tmp_10_reg_496(28 downto 0) <= tmp_10_fu_264_p1(28 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                a1_reg_478 <= a(31 downto 3);
                n3_reg_473 <= n(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0)))) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_570 = ap_const_lv1_0))) then
                a2_sum5_reg_590 <= a2_sum5_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond1_fu_279_p2))) then
                a2_sum_reg_519 <= a2_sum_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0)))) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_buff_addr_1_reg_579 <= buff_addr_1_reg_579;
                ap_pipeline_reg_pp0_iter1_exitcond_reg_570 <= exitcond_reg_570;
                exitcond_reg_570 <= exitcond_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0))))) then
                ap_pipeline_reg_pp0_iter2_buff_addr_1_reg_579 <= ap_pipeline_reg_pp0_iter1_buff_addr_1_reg_579;
                ap_pipeline_reg_pp0_iter2_buff_load_reg_585 <= buff_load_reg_585;
                ap_pipeline_reg_pp0_iter2_exitcond_reg_570 <= ap_pipeline_reg_pp0_iter1_exitcond_reg_570;
                ap_pipeline_reg_pp0_iter3_buff_addr_1_reg_579 <= ap_pipeline_reg_pp0_iter2_buff_addr_1_reg_579;
                ap_pipeline_reg_pp0_iter3_buff_load_reg_585 <= ap_pipeline_reg_pp0_iter2_buff_load_reg_585;
                ap_pipeline_reg_pp0_iter3_exitcond_reg_570 <= ap_pipeline_reg_pp0_iter2_exitcond_reg_570;
                ap_pipeline_reg_pp0_iter4_buff_addr_1_reg_579 <= ap_pipeline_reg_pp0_iter3_buff_addr_1_reg_579;
                ap_pipeline_reg_pp0_iter4_buff_load_reg_585 <= ap_pipeline_reg_pp0_iter3_buff_load_reg_585;
                ap_pipeline_reg_pp0_iter4_exitcond_reg_570 <= ap_pipeline_reg_pp0_iter3_exitcond_reg_570;
                ap_pipeline_reg_pp0_iter5_buff_addr_1_reg_579 <= ap_pipeline_reg_pp0_iter4_buff_addr_1_reg_579;
                ap_pipeline_reg_pp0_iter5_buff_load_reg_585 <= ap_pipeline_reg_pp0_iter4_buff_load_reg_585;
                ap_pipeline_reg_pp0_iter5_exitcond_reg_570 <= ap_pipeline_reg_pp0_iter4_exitcond_reg_570;
                ap_pipeline_reg_pp0_iter6_buff_addr_1_reg_579 <= ap_pipeline_reg_pp0_iter5_buff_addr_1_reg_579;
                ap_pipeline_reg_pp0_iter6_buff_load_reg_585 <= ap_pipeline_reg_pp0_iter5_buff_load_reg_585;
                ap_pipeline_reg_pp0_iter6_exitcond_reg_570 <= ap_pipeline_reg_pp0_iter5_exitcond_reg_570;
                ap_pipeline_reg_pp0_iter7_buff_addr_1_reg_579 <= ap_pipeline_reg_pp0_iter6_buff_addr_1_reg_579;
                ap_pipeline_reg_pp0_iter7_buff_load_reg_585 <= ap_pipeline_reg_pp0_iter6_buff_load_reg_585;
                ap_pipeline_reg_pp0_iter7_exitcond_reg_570 <= ap_pipeline_reg_pp0_iter6_exitcond_reg_570;
                ap_pipeline_reg_pp0_iter8_buff_addr_1_reg_579 <= ap_pipeline_reg_pp0_iter7_buff_addr_1_reg_579;
                ap_pipeline_reg_pp0_iter8_buff_load_reg_585 <= ap_pipeline_reg_pp0_iter7_buff_load_reg_585;
                ap_pipeline_reg_pp0_iter8_exitcond_reg_570 <= ap_pipeline_reg_pp0_iter7_exitcond_reg_570;
                ap_pipeline_reg_pp0_iter9_buff_addr_1_reg_579 <= ap_pipeline_reg_pp0_iter8_buff_addr_1_reg_579;
                ap_pipeline_reg_pp0_iter9_buff_load_reg_585 <= ap_pipeline_reg_pp0_iter8_buff_load_reg_585;
                ap_pipeline_reg_pp0_iter9_exitcond_reg_570 <= ap_pipeline_reg_pp0_iter8_exitcond_reg_570;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0)))) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_fu_435_p2))) then
                buff_addr_1_reg_579 <= j_cast1_fu_447_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0)))) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_570 = ap_const_lv1_0))) then
                buff_load_reg_585 <= buff_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then
                i_1_reg_514 <= i_1_fu_285_p2;
                    i_cast2_reg_506(2 downto 0) <= i_cast2_fu_275_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state27))) then
                i_2_reg_565 <= i_2_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state26))) then
                mul_reg_551 <= grp_fu_357_p2;
                tmp_16_reg_556 <= grp_fu_357_p2(64 downto 35);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = ap_CS_fsm_state18) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0))))))) then
                reg_230 <= A_BUS_RDATA(63 downto 48);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state21))) then
                tmp_14_reg_545 <= tmp_5_fu_347_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state19) and not((A_BUS_RVALID = ap_const_logic_0)))) then
                tmp_4_reg_530 <= A_BUS_RDATA(47 downto 32);
            end if;
        end if;
    end process;
    tmp_10_reg_496(31 downto 29) <= "000";
    tmp_10_cast_reg_501(30 downto 29) <= "00";
    i_cast2_reg_506(31 downto 3) <= "00000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_reg_570, ap_enable_reg_pp0_iter9, ap_pipeline_reg_pp0_iter8_exitcond_reg_570, A_BUS_RVALID, PREF_WINDOW_RVALID, ap_sig_ioackin_A_BUS_ARREADY, ap_sig_ioackin_PREF_WINDOW_ARREADY, exitcond1_fu_279_p2, tmp_7_fu_423_p2, exitcond_fu_435_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_PREF_WINDOW_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (not((PREF_WINDOW_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_279_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (not((A_BUS_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (not((A_BUS_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if ((ap_const_lv1_0 = tmp_7_fu_423_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter9)))) and not((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_fu_435_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter9))) or (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_fu_435_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_BUS_ARADDR_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, A_BUS_addr_reg_524, a2_sum5_reg_590, a2_sum_cast_fu_300_p1, ap_reg_ioackin_A_BUS_ARREADY, ap_condition_629)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) then
            if ((ap_condition_629 = ap_const_boolean_1)) then 
                A_BUS_ARADDR <= a2_sum5_reg_590;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_state12)) then 
                A_BUS_ARADDR <= A_BUS_addr_reg_524;
            elsif ((ap_const_lv1_1 = ap_CS_fsm_state11)) then 
                A_BUS_ARADDR <= a2_sum_cast_fu_300_p1;
            else 
                A_BUS_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            A_BUS_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_BUS_ARVALID_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_reg_570, ap_enable_reg_pp0_iter9, ap_pipeline_reg_pp0_iter8_exitcond_reg_570, A_BUS_RVALID, ap_reg_ioackin_A_BUS_ARREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state11) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_lv1_1 = ap_CS_fsm_state12) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0)))))) then 
            A_BUS_ARVALID <= ap_const_logic_1;
        else 
            A_BUS_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    A_BUS_RREADY_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_reg_570, ap_enable_reg_pp0_iter9, ap_pipeline_reg_pp0_iter8_exitcond_reg_570, A_BUS_RVALID, ap_sig_ioackin_A_BUS_ARREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state18) and not((A_BUS_RVALID = ap_const_logic_0))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0))))) or ((ap_const_lv1_1 = ap_CS_fsm_state19) and not((A_BUS_RVALID = ap_const_logic_0))))) then 
            A_BUS_RREADY <= ap_const_logic_1;
        else 
            A_BUS_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    A_BUS_blk_n_AR_assign_proc : process(m_axi_A_BUS_ARREADY, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_reg_570)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state11)) or ((ap_const_lv1_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0)))) then 
            A_BUS_blk_n_AR <= m_axi_A_BUS_ARREADY;
        else 
            A_BUS_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    A_BUS_blk_n_R_assign_proc : process(m_axi_A_BUS_RVALID, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_enable_reg_pp0_iter9, ap_pipeline_reg_pp0_iter8_exitcond_reg_570)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state18)) or ((ap_const_lv1_1 = ap_CS_fsm_state19)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570)))) then 
            A_BUS_blk_n_R <= m_axi_A_BUS_RVALID;
        else 
            A_BUS_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    PREF_WINDOW_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_PREF_WINDOW_ARREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_reg_ioackin_PREF_WINDOW_ARREADY))) then 
            PREF_WINDOW_ARVALID <= ap_const_logic_1;
        else 
            PREF_WINDOW_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    PREF_WINDOW_RREADY_assign_proc : process(ap_CS_fsm_state9, PREF_WINDOW_RVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9) and not((PREF_WINDOW_RVALID = ap_const_logic_0)))) then 
            PREF_WINDOW_RREADY <= ap_const_logic_1;
        else 
            PREF_WINDOW_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    PREF_WINDOW_blk_n_AR_assign_proc : process(m_axi_PREF_WINDOW_ARREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            PREF_WINDOW_blk_n_AR <= m_axi_PREF_WINDOW_ARREADY;
        else 
            PREF_WINDOW_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    PREF_WINDOW_blk_n_R_assign_proc : process(m_axi_PREF_WINDOW_RVALID, ap_CS_fsm_state9)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            PREF_WINDOW_blk_n_R <= m_axi_PREF_WINDOW_RVALID;
        else 
            PREF_WINDOW_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    a2_sum5_fu_452_p2 <= std_logic_vector(unsigned(tmp_10_reg_496) + unsigned(buff_q0));
        a2_sum_cast_fu_300_p1 <= std_logic_vector(resize(signed(a2_sum_reg_519),32));

    a2_sum_fu_295_p2 <= std_logic_vector(signed(cum_offs_cast6_cast_fu_291_p1) + signed(tmp_10_cast_reg_501));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(27 downto 27);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11 downto 11);
    ap_CS_fsm_state18 <= ap_CS_fsm(17 downto 17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18 downto 18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19 downto 19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20 downto 20);
    ap_CS_fsm_state26 <= ap_CS_fsm(25 downto 25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26 downto 26);
    ap_CS_fsm_state39 <= ap_CS_fsm(28 downto 28);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_condition_629_assign_proc : process(ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_reg_570, ap_enable_reg_pp0_iter9, ap_pipeline_reg_pp0_iter8_exitcond_reg_570, A_BUS_RVALID)
    begin
                ap_condition_629 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0))));
    end process;


    ap_done_assign_proc : process(tmp_7_fu_423_p2, ap_CS_fsm_state27)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state27) and (ap_const_lv1_0 = tmp_7_fu_423_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_7_fu_423_p2, ap_CS_fsm_state27)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state27) and (ap_const_lv1_0 = tmp_7_fu_423_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_A_BUS_ARREADY_assign_proc : process(A_BUS_ARREADY, ap_reg_ioackin_A_BUS_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_A_BUS_ARREADY)) then 
            ap_sig_ioackin_A_BUS_ARREADY <= A_BUS_ARREADY;
        else 
            ap_sig_ioackin_A_BUS_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_PREF_WINDOW_ARREADY_assign_proc : process(PREF_WINDOW_ARREADY, ap_reg_ioackin_PREF_WINDOW_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_PREF_WINDOW_ARREADY)) then 
            ap_sig_ioackin_PREF_WINDOW_ARREADY <= PREF_WINDOW_ARREADY;
        else 
            ap_sig_ioackin_PREF_WINDOW_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    buff_address0_assign_proc : process(ap_CS_fsm_state19, i_cast2_reg_506, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, j_cast1_fu_447_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            buff_address0 <= j_cast1_fu_447_p1(3 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state19))) then 
            buff_address0 <= i_cast2_reg_506(3 - 1 downto 0);
        else 
            buff_address0 <= "XXX";
        end if; 
    end process;


    buff_ce0_assign_proc : process(ap_CS_fsm_state19, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_reg_570, ap_enable_reg_pp0_iter9, ap_pipeline_reg_pp0_iter8_exitcond_reg_570, A_BUS_RVALID, ap_sig_ioackin_A_BUS_ARREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state19) and not((A_BUS_RVALID = ap_const_logic_0))) or (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0)))) and (ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)))) then 
            buff_ce0 <= ap_const_logic_1;
        else 
            buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_reg_570, ap_enable_reg_pp0_iter9, ap_pipeline_reg_pp0_iter8_exitcond_reg_570, A_BUS_RVALID, ap_sig_ioackin_A_BUS_ARREADY, ap_enable_reg_pp0_iter10)
    begin
        if ((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10))) then 
            buff_ce1 <= ap_const_logic_1;
        else 
            buff_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        buff_d0 <= std_logic_vector(resize(signed(tmp_1_fu_314_p2),32));

    buff_d1 <= std_logic_vector(unsigned(ap_pipeline_reg_pp0_iter9_buff_load_reg_585) + unsigned(tmp_9_fu_463_p1));

    buff_we0_assign_proc : process(ap_CS_fsm_state19, A_BUS_RVALID)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state19) and not((A_BUS_RVALID = ap_const_logic_0))))) then 
            buff_we0 <= ap_const_logic_1;
        else 
            buff_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_reg_570, ap_enable_reg_pp0_iter9, ap_pipeline_reg_pp0_iter8_exitcond_reg_570, A_BUS_RVALID, ap_sig_ioackin_A_BUS_ARREADY, ap_pipeline_reg_pp0_iter9_exitcond_reg_570, ap_enable_reg_pp0_iter10)
    begin
        if (((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond_reg_570 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_A_BUS_ARREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter8_exitcond_reg_570) and (A_BUS_RVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter10) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter9_exitcond_reg_570)))) then 
            buff_we1 <= ap_const_logic_1;
        else 
            buff_we1 <= ap_const_logic_0;
        end if; 
    end process;

    cum_offs_1_fu_338_p2 <= std_logic_vector(unsigned(cum_offs_reg_175) + unsigned(tmp_2_cast_fu_335_p1));
        cum_offs_cast6_cast_fu_291_p1 <= std_logic_vector(resize(signed(cum_offs_reg_175),31));

    exitcond1_fu_279_p2 <= "1" when (i_reg_187 = ap_const_lv3_5) else "0";
    exitcond_fu_435_p2 <= "1" when (j_reg_209 = ap_const_lv3_5) else "0";
    grp_fu_357_p1 <= ap_const_lv65_19999999A(34 - 1 downto 0);
    i_1_fu_285_p2 <= std_logic_vector(unsigned(i_reg_187) + unsigned(ap_const_lv3_1));
    i_2_fu_429_p2 <= std_logic_vector(unsigned(i1_reg_198) + unsigned(ap_const_lv32_1));
    i_cast2_fu_275_p1 <= std_logic_vector(resize(unsigned(i_reg_187),32));
    j_1_fu_441_p2 <= std_logic_vector(unsigned(j_reg_209) + unsigned(ap_const_lv3_1));
    j_cast1_fu_447_p1 <= std_logic_vector(resize(unsigned(j_reg_209),32));
    neg_mul_fu_381_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_reg_551));
    neg_ti_fu_410_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_13_fu_403_p3));
    tmp_10_cast_fu_267_p1 <= std_logic_vector(resize(unsigned(a1_reg_478),31));
    tmp_10_fu_264_p1 <= std_logic_vector(resize(unsigned(a1_reg_478),32));
        tmp_11_fu_396_p1 <= std_logic_vector(resize(signed(tmp_15_fu_386_p4),32));

        tmp_12_fu_400_p1 <= std_logic_vector(resize(signed(tmp_16_reg_556),32));

    tmp_13_fu_403_p3 <= 
        tmp_11_fu_396_p1 when (tmp_14_reg_545(0) = '1') else 
        tmp_12_fu_400_p1;
    tmp_15_fu_386_p4 <= neg_mul_fu_381_p2(64 downto 35);
    tmp_1_fu_314_p2 <= std_logic_vector(signed(tmp_cast_fu_310_p1) + signed(cum_offs_reg_175));
        tmp_2_cast_fu_335_p1 <= std_logic_vector(resize(signed(tmp_4_reg_530),19));

    tmp_5_fu_347_p2 <= std_logic_vector(unsigned(N_fu_114) + unsigned(ap_const_lv32_FFFFFFFB));
    tmp_6_fu_416_p3 <= 
        neg_ti_fu_410_p2 when (tmp_14_reg_545(0) = '1') else 
        tmp_12_fu_400_p1;
    tmp_7_fu_423_p2 <= "1" when (signed(i1_reg_198) < signed(tmp_6_fu_416_p3)) else "0";
        tmp_9_fu_463_p1 <= std_logic_vector(resize(signed(reg_230),32));

        tmp_cast_fu_310_p1 <= std_logic_vector(resize(signed(reg_230),19));

    tmp_fu_254_p1 <= std_logic_vector(resize(unsigned(n3_reg_473),32));
end behav;
