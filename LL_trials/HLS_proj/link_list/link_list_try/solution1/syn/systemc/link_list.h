// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _link_list_HH_
#define _link_list_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "link_list_CFG_s_axi.h"
#include "link_list_A_BUS_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_A_BUS_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_A_BUS_ID_WIDTH = 1,
         unsigned int C_M_AXI_A_BUS_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_A_BUS_DATA_WIDTH = 64,
         unsigned int C_M_AXI_A_BUS_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_A_BUS_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_A_BUS_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_A_BUS_BUSER_WIDTH = 1,
         unsigned int C_S_AXI_CFG_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CFG_DATA_WIDTH = 32>
struct link_list : public sc_module {
    // Port declarations 65
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_A_BUS_AWVALID;
    sc_in< sc_logic > m_axi_A_BUS_AWREADY;
    sc_out< sc_uint<C_M_AXI_A_BUS_ADDR_WIDTH> > m_axi_A_BUS_AWADDR;
    sc_out< sc_uint<C_M_AXI_A_BUS_ID_WIDTH> > m_axi_A_BUS_AWID;
    sc_out< sc_lv<8> > m_axi_A_BUS_AWLEN;
    sc_out< sc_lv<3> > m_axi_A_BUS_AWSIZE;
    sc_out< sc_lv<2> > m_axi_A_BUS_AWBURST;
    sc_out< sc_lv<2> > m_axi_A_BUS_AWLOCK;
    sc_out< sc_lv<4> > m_axi_A_BUS_AWCACHE;
    sc_out< sc_lv<3> > m_axi_A_BUS_AWPROT;
    sc_out< sc_lv<4> > m_axi_A_BUS_AWQOS;
    sc_out< sc_lv<4> > m_axi_A_BUS_AWREGION;
    sc_out< sc_uint<C_M_AXI_A_BUS_AWUSER_WIDTH> > m_axi_A_BUS_AWUSER;
    sc_out< sc_logic > m_axi_A_BUS_WVALID;
    sc_in< sc_logic > m_axi_A_BUS_WREADY;
    sc_out< sc_uint<C_M_AXI_A_BUS_DATA_WIDTH> > m_axi_A_BUS_WDATA;
    sc_out< sc_uint<C_M_AXI_A_BUS_DATA_WIDTH/8> > m_axi_A_BUS_WSTRB;
    sc_out< sc_logic > m_axi_A_BUS_WLAST;
    sc_out< sc_uint<C_M_AXI_A_BUS_ID_WIDTH> > m_axi_A_BUS_WID;
    sc_out< sc_uint<C_M_AXI_A_BUS_WUSER_WIDTH> > m_axi_A_BUS_WUSER;
    sc_out< sc_logic > m_axi_A_BUS_ARVALID;
    sc_in< sc_logic > m_axi_A_BUS_ARREADY;
    sc_out< sc_uint<C_M_AXI_A_BUS_ADDR_WIDTH> > m_axi_A_BUS_ARADDR;
    sc_out< sc_uint<C_M_AXI_A_BUS_ID_WIDTH> > m_axi_A_BUS_ARID;
    sc_out< sc_lv<8> > m_axi_A_BUS_ARLEN;
    sc_out< sc_lv<3> > m_axi_A_BUS_ARSIZE;
    sc_out< sc_lv<2> > m_axi_A_BUS_ARBURST;
    sc_out< sc_lv<2> > m_axi_A_BUS_ARLOCK;
    sc_out< sc_lv<4> > m_axi_A_BUS_ARCACHE;
    sc_out< sc_lv<3> > m_axi_A_BUS_ARPROT;
    sc_out< sc_lv<4> > m_axi_A_BUS_ARQOS;
    sc_out< sc_lv<4> > m_axi_A_BUS_ARREGION;
    sc_out< sc_uint<C_M_AXI_A_BUS_ARUSER_WIDTH> > m_axi_A_BUS_ARUSER;
    sc_in< sc_logic > m_axi_A_BUS_RVALID;
    sc_out< sc_logic > m_axi_A_BUS_RREADY;
    sc_in< sc_uint<C_M_AXI_A_BUS_DATA_WIDTH> > m_axi_A_BUS_RDATA;
    sc_in< sc_logic > m_axi_A_BUS_RLAST;
    sc_in< sc_uint<C_M_AXI_A_BUS_ID_WIDTH> > m_axi_A_BUS_RID;
    sc_in< sc_uint<C_M_AXI_A_BUS_RUSER_WIDTH> > m_axi_A_BUS_RUSER;
    sc_in< sc_lv<2> > m_axi_A_BUS_RRESP;
    sc_in< sc_logic > m_axi_A_BUS_BVALID;
    sc_out< sc_logic > m_axi_A_BUS_BREADY;
    sc_in< sc_lv<2> > m_axi_A_BUS_BRESP;
    sc_in< sc_uint<C_M_AXI_A_BUS_ID_WIDTH> > m_axi_A_BUS_BID;
    sc_in< sc_uint<C_M_AXI_A_BUS_BUSER_WIDTH> > m_axi_A_BUS_BUSER;
    sc_in< sc_logic > s_axi_CFG_AWVALID;
    sc_out< sc_logic > s_axi_CFG_AWREADY;
    sc_in< sc_uint<C_S_AXI_CFG_ADDR_WIDTH> > s_axi_CFG_AWADDR;
    sc_in< sc_logic > s_axi_CFG_WVALID;
    sc_out< sc_logic > s_axi_CFG_WREADY;
    sc_in< sc_uint<C_S_AXI_CFG_DATA_WIDTH> > s_axi_CFG_WDATA;
    sc_in< sc_uint<C_S_AXI_CFG_DATA_WIDTH/8> > s_axi_CFG_WSTRB;
    sc_in< sc_logic > s_axi_CFG_ARVALID;
    sc_out< sc_logic > s_axi_CFG_ARREADY;
    sc_in< sc_uint<C_S_AXI_CFG_ADDR_WIDTH> > s_axi_CFG_ARADDR;
    sc_out< sc_logic > s_axi_CFG_RVALID;
    sc_in< sc_logic > s_axi_CFG_RREADY;
    sc_out< sc_uint<C_S_AXI_CFG_DATA_WIDTH> > s_axi_CFG_RDATA;
    sc_out< sc_lv<2> > s_axi_CFG_RRESP;
    sc_out< sc_logic > s_axi_CFG_BVALID;
    sc_in< sc_logic > s_axi_CFG_BREADY;
    sc_out< sc_lv<2> > s_axi_CFG_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const6;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const1;
    sc_signal< sc_lv<3> > ap_var_for_const3;
    sc_signal< sc_lv<2> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const5;
    sc_signal< sc_lv<8> > ap_var_for_const7;


    // Module declarations
    link_list(sc_module_name name);
    SC_HAS_PROCESS(link_list);

    ~link_list();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    link_list_CFG_s_axi<C_S_AXI_CFG_ADDR_WIDTH,C_S_AXI_CFG_DATA_WIDTH>* link_list_CFG_s_axi_U;
    link_list_A_BUS_m_axi<64,32,5,16,16,16,16,C_M_AXI_A_BUS_ID_WIDTH,C_M_AXI_A_BUS_ADDR_WIDTH,C_M_AXI_A_BUS_DATA_WIDTH,C_M_AXI_A_BUS_AWUSER_WIDTH,C_M_AXI_A_BUS_ARUSER_WIDTH,C_M_AXI_A_BUS_WUSER_WIDTH,C_M_AXI_A_BUS_RUSER_WIDTH,C_M_AXI_A_BUS_BUSER_WIDTH,C_M_AXI_A_BUS_USER_VALUE,C_M_AXI_A_BUS_PROT_VALUE,C_M_AXI_A_BUS_CACHE_VALUE>* link_list_A_BUS_m_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<34> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > a;
    sc_signal< sc_logic > A_BUS_blk_n_AR;
    sc_signal< sc_lv<1> > ap_CS_fsm_state2;
    sc_signal< sc_logic > A_BUS_blk_n_R;
    sc_signal< sc_lv<1> > ap_CS_fsm_state9;
    sc_signal< sc_lv<1> > ap_CS_fsm_state12;
    sc_signal< sc_lv<1> > ap_CS_fsm_state19;
    sc_signal< sc_logic > A_BUS_blk_n_AW;
    sc_signal< sc_lv<1> > ap_CS_fsm_state20;
    sc_signal< sc_logic > A_BUS_blk_n_W;
    sc_signal< sc_lv<1> > ap_CS_fsm_state21;
    sc_signal< sc_logic > A_BUS_blk_n_B;
    sc_signal< sc_lv<1> > ap_CS_fsm_state26;
    sc_signal< sc_lv<1> > ap_CS_fsm_state27;
    sc_signal< sc_lv<1> > ap_CS_fsm_state34;
    sc_signal< sc_logic > A_BUS_AWVALID;
    sc_signal< sc_logic > A_BUS_AWREADY;
    sc_signal< sc_logic > A_BUS_WVALID;
    sc_signal< sc_logic > A_BUS_WREADY;
    sc_signal< sc_lv<64> > A_BUS_WDATA;
    sc_signal< sc_logic > A_BUS_ARVALID;
    sc_signal< sc_logic > A_BUS_ARREADY;
    sc_signal< sc_lv<32> > A_BUS_ARADDR;
    sc_signal< sc_logic > A_BUS_RVALID;
    sc_signal< sc_logic > A_BUS_RREADY;
    sc_signal< sc_lv<64> > A_BUS_RDATA;
    sc_signal< sc_logic > A_BUS_RLAST;
    sc_signal< sc_lv<1> > A_BUS_RID;
    sc_signal< sc_lv<1> > A_BUS_RUSER;
    sc_signal< sc_lv<2> > A_BUS_RRESP;
    sc_signal< sc_logic > A_BUS_BVALID;
    sc_signal< sc_logic > A_BUS_BREADY;
    sc_signal< sc_lv<2> > A_BUS_BRESP;
    sc_signal< sc_lv<1> > A_BUS_BID;
    sc_signal< sc_lv<1> > A_BUS_BUSER;
    sc_signal< sc_lv<29> > a1_reg_184;
    sc_signal< sc_lv<32> > tmp_1_fu_128_p1;
    sc_signal< sc_lv<32> > tmp_1_reg_189;
    sc_signal< sc_logic > ap_sig_ioackin_A_BUS_ARREADY;
    sc_signal< sc_lv<32> > curr_offs_new9_reg_201;
    sc_signal< sc_lv<32> > a2_sum_fu_144_p2;
    sc_signal< sc_lv<32> > a2_sum_reg_209;
    sc_signal< sc_lv<1> > ap_CS_fsm_state11;
    sc_signal< sc_lv<1> > tmp_fu_138_p2;
    sc_signal< sc_lv<32> > A_BUS_addr_1_reg_214;
    sc_signal< sc_lv<32> > temp_fu_155_p1;
    sc_signal< sc_lv<32> > temp_reg_220;
    sc_signal< sc_lv<32> > a_offs_load_new_reg_225;
    sc_signal< sc_lv<32> > temp_1_fu_159_p2;
    sc_signal< sc_lv<32> > temp_1_reg_230;
    sc_signal< sc_logic > ap_sig_ioackin_A_BUS_AWREADY;
    sc_signal< sc_lv<32> > cum_offs_1_fu_164_p2;
    sc_signal< sc_lv<32> > cum_offs_1_reg_235;
    sc_signal< sc_lv<32> > a2_sum3_fu_169_p2;
    sc_signal< sc_lv<32> > a2_sum3_reg_240;
    sc_signal< sc_lv<32> > cum_offs_reg_87;
    sc_signal< sc_lv<1> > ap_CS_fsm_state10;
    sc_signal< sc_lv<32> > curr_offs_reg_99;
    sc_signal< sc_logic > ap_reg_ioackin_A_BUS_ARREADY;
    sc_signal< sc_logic > ap_reg_ioackin_A_BUS_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_A_BUS_WREADY;
    sc_signal< sc_logic > ap_sig_ioackin_A_BUS_WREADY;
    sc_signal< sc_lv<34> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<34> ap_ST_fsm_state1;
    static const sc_lv<34> ap_ST_fsm_state2;
    static const sc_lv<34> ap_ST_fsm_state3;
    static const sc_lv<34> ap_ST_fsm_state4;
    static const sc_lv<34> ap_ST_fsm_state5;
    static const sc_lv<34> ap_ST_fsm_state6;
    static const sc_lv<34> ap_ST_fsm_state7;
    static const sc_lv<34> ap_ST_fsm_state8;
    static const sc_lv<34> ap_ST_fsm_state9;
    static const sc_lv<34> ap_ST_fsm_state10;
    static const sc_lv<34> ap_ST_fsm_state11;
    static const sc_lv<34> ap_ST_fsm_state12;
    static const sc_lv<34> ap_ST_fsm_state13;
    static const sc_lv<34> ap_ST_fsm_state14;
    static const sc_lv<34> ap_ST_fsm_state15;
    static const sc_lv<34> ap_ST_fsm_state16;
    static const sc_lv<34> ap_ST_fsm_state17;
    static const sc_lv<34> ap_ST_fsm_state18;
    static const sc_lv<34> ap_ST_fsm_state19;
    static const sc_lv<34> ap_ST_fsm_state20;
    static const sc_lv<34> ap_ST_fsm_state21;
    static const sc_lv<34> ap_ST_fsm_state22;
    static const sc_lv<34> ap_ST_fsm_state23;
    static const sc_lv<34> ap_ST_fsm_state24;
    static const sc_lv<34> ap_ST_fsm_state25;
    static const sc_lv<34> ap_ST_fsm_state26;
    static const sc_lv<34> ap_ST_fsm_state27;
    static const sc_lv<34> ap_ST_fsm_state28;
    static const sc_lv<34> ap_ST_fsm_state29;
    static const sc_lv<34> ap_ST_fsm_state30;
    static const sc_lv<34> ap_ST_fsm_state31;
    static const sc_lv<34> ap_ST_fsm_state32;
    static const sc_lv<34> ap_ST_fsm_state33;
    static const sc_lv<34> ap_ST_fsm_state34;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<32> ap_const_lv32_1A;
    static const sc_lv<32> ap_const_lv32_21;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_M_AXI_DATA_WIDTH;
    static const int C_M_AXI_A_BUS_USER_VALUE;
    static const int C_M_AXI_A_BUS_PROT_VALUE;
    static const int C_M_AXI_A_BUS_CACHE_VALUE;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_F;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1F;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const7();
    void thread_ap_clk_no_reset_();
    void thread_A_BUS_ARADDR();
    void thread_A_BUS_ARVALID();
    void thread_A_BUS_AWVALID();
    void thread_A_BUS_BREADY();
    void thread_A_BUS_RREADY();
    void thread_A_BUS_WDATA();
    void thread_A_BUS_WVALID();
    void thread_A_BUS_blk_n_AR();
    void thread_A_BUS_blk_n_AW();
    void thread_A_BUS_blk_n_B();
    void thread_A_BUS_blk_n_R();
    void thread_A_BUS_blk_n_W();
    void thread_a2_sum3_fu_169_p2();
    void thread_a2_sum_fu_144_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state19();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state20();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state26();
    void thread_ap_CS_fsm_state27();
    void thread_ap_CS_fsm_state34();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_A_BUS_ARREADY();
    void thread_ap_sig_ioackin_A_BUS_AWREADY();
    void thread_ap_sig_ioackin_A_BUS_WREADY();
    void thread_cum_offs_1_fu_164_p2();
    void thread_temp_1_fu_159_p2();
    void thread_temp_fu_155_p1();
    void thread_tmp_1_fu_128_p1();
    void thread_tmp_fu_138_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
