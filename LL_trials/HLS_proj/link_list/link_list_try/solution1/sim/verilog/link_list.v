// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="link_list,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1055,HLS_SYN_LUT=1173}" *)

module link_list (
        ap_clk,
        ap_rst_n,
        m_axi_A_BUS_AWVALID,
        m_axi_A_BUS_AWREADY,
        m_axi_A_BUS_AWADDR,
        m_axi_A_BUS_AWID,
        m_axi_A_BUS_AWLEN,
        m_axi_A_BUS_AWSIZE,
        m_axi_A_BUS_AWBURST,
        m_axi_A_BUS_AWLOCK,
        m_axi_A_BUS_AWCACHE,
        m_axi_A_BUS_AWPROT,
        m_axi_A_BUS_AWQOS,
        m_axi_A_BUS_AWREGION,
        m_axi_A_BUS_AWUSER,
        m_axi_A_BUS_WVALID,
        m_axi_A_BUS_WREADY,
        m_axi_A_BUS_WDATA,
        m_axi_A_BUS_WSTRB,
        m_axi_A_BUS_WLAST,
        m_axi_A_BUS_WID,
        m_axi_A_BUS_WUSER,
        m_axi_A_BUS_ARVALID,
        m_axi_A_BUS_ARREADY,
        m_axi_A_BUS_ARADDR,
        m_axi_A_BUS_ARID,
        m_axi_A_BUS_ARLEN,
        m_axi_A_BUS_ARSIZE,
        m_axi_A_BUS_ARBURST,
        m_axi_A_BUS_ARLOCK,
        m_axi_A_BUS_ARCACHE,
        m_axi_A_BUS_ARPROT,
        m_axi_A_BUS_ARQOS,
        m_axi_A_BUS_ARREGION,
        m_axi_A_BUS_ARUSER,
        m_axi_A_BUS_RVALID,
        m_axi_A_BUS_RREADY,
        m_axi_A_BUS_RDATA,
        m_axi_A_BUS_RLAST,
        m_axi_A_BUS_RID,
        m_axi_A_BUS_RUSER,
        m_axi_A_BUS_RRESP,
        m_axi_A_BUS_BVALID,
        m_axi_A_BUS_BREADY,
        m_axi_A_BUS_BRESP,
        m_axi_A_BUS_BID,
        m_axi_A_BUS_BUSER,
        s_axi_CFG_AWVALID,
        s_axi_CFG_AWREADY,
        s_axi_CFG_AWADDR,
        s_axi_CFG_WVALID,
        s_axi_CFG_WREADY,
        s_axi_CFG_WDATA,
        s_axi_CFG_WSTRB,
        s_axi_CFG_ARVALID,
        s_axi_CFG_ARREADY,
        s_axi_CFG_ARADDR,
        s_axi_CFG_RVALID,
        s_axi_CFG_RREADY,
        s_axi_CFG_RDATA,
        s_axi_CFG_RRESP,
        s_axi_CFG_BVALID,
        s_axi_CFG_BREADY,
        s_axi_CFG_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 34'b1;
parameter    ap_ST_fsm_state2 = 34'b10;
parameter    ap_ST_fsm_state3 = 34'b100;
parameter    ap_ST_fsm_state4 = 34'b1000;
parameter    ap_ST_fsm_state5 = 34'b10000;
parameter    ap_ST_fsm_state6 = 34'b100000;
parameter    ap_ST_fsm_state7 = 34'b1000000;
parameter    ap_ST_fsm_state8 = 34'b10000000;
parameter    ap_ST_fsm_state9 = 34'b100000000;
parameter    ap_ST_fsm_state10 = 34'b1000000000;
parameter    ap_ST_fsm_state11 = 34'b10000000000;
parameter    ap_ST_fsm_state12 = 34'b100000000000;
parameter    ap_ST_fsm_state13 = 34'b1000000000000;
parameter    ap_ST_fsm_state14 = 34'b10000000000000;
parameter    ap_ST_fsm_state15 = 34'b100000000000000;
parameter    ap_ST_fsm_state16 = 34'b1000000000000000;
parameter    ap_ST_fsm_state17 = 34'b10000000000000000;
parameter    ap_ST_fsm_state18 = 34'b100000000000000000;
parameter    ap_ST_fsm_state19 = 34'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 34'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 34'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 34'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 34'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 34'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 34'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 34'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 34'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 34'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 34'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 34'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 34'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 34'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 34'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 34'b1000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    C_S_AXI_CFG_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_CFG_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_A_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_A_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_A_BUS_DATA_WIDTH = 64;
parameter    C_M_AXI_A_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_A_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_A_BUS_USER_VALUE = 0;
parameter    C_M_AXI_A_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_A_BUS_CACHE_VALUE = 3;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv8_F = 8'b1111;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_1F = 32'b11111;

parameter C_S_AXI_CFG_WSTRB_WIDTH = (C_S_AXI_CFG_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_A_BUS_WSTRB_WIDTH = (C_M_AXI_A_BUS_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_A_BUS_AWVALID;
input   m_axi_A_BUS_AWREADY;
output  [C_M_AXI_A_BUS_ADDR_WIDTH - 1 : 0] m_axi_A_BUS_AWADDR;
output  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_AWID;
output  [7:0] m_axi_A_BUS_AWLEN;
output  [2:0] m_axi_A_BUS_AWSIZE;
output  [1:0] m_axi_A_BUS_AWBURST;
output  [1:0] m_axi_A_BUS_AWLOCK;
output  [3:0] m_axi_A_BUS_AWCACHE;
output  [2:0] m_axi_A_BUS_AWPROT;
output  [3:0] m_axi_A_BUS_AWQOS;
output  [3:0] m_axi_A_BUS_AWREGION;
output  [C_M_AXI_A_BUS_AWUSER_WIDTH - 1 : 0] m_axi_A_BUS_AWUSER;
output   m_axi_A_BUS_WVALID;
input   m_axi_A_BUS_WREADY;
output  [C_M_AXI_A_BUS_DATA_WIDTH - 1 : 0] m_axi_A_BUS_WDATA;
output  [C_M_AXI_A_BUS_WSTRB_WIDTH - 1 : 0] m_axi_A_BUS_WSTRB;
output   m_axi_A_BUS_WLAST;
output  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_WID;
output  [C_M_AXI_A_BUS_WUSER_WIDTH - 1 : 0] m_axi_A_BUS_WUSER;
output   m_axi_A_BUS_ARVALID;
input   m_axi_A_BUS_ARREADY;
output  [C_M_AXI_A_BUS_ADDR_WIDTH - 1 : 0] m_axi_A_BUS_ARADDR;
output  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_ARID;
output  [7:0] m_axi_A_BUS_ARLEN;
output  [2:0] m_axi_A_BUS_ARSIZE;
output  [1:0] m_axi_A_BUS_ARBURST;
output  [1:0] m_axi_A_BUS_ARLOCK;
output  [3:0] m_axi_A_BUS_ARCACHE;
output  [2:0] m_axi_A_BUS_ARPROT;
output  [3:0] m_axi_A_BUS_ARQOS;
output  [3:0] m_axi_A_BUS_ARREGION;
output  [C_M_AXI_A_BUS_ARUSER_WIDTH - 1 : 0] m_axi_A_BUS_ARUSER;
input   m_axi_A_BUS_RVALID;
output   m_axi_A_BUS_RREADY;
input  [C_M_AXI_A_BUS_DATA_WIDTH - 1 : 0] m_axi_A_BUS_RDATA;
input   m_axi_A_BUS_RLAST;
input  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_RID;
input  [C_M_AXI_A_BUS_RUSER_WIDTH - 1 : 0] m_axi_A_BUS_RUSER;
input  [1:0] m_axi_A_BUS_RRESP;
input   m_axi_A_BUS_BVALID;
output   m_axi_A_BUS_BREADY;
input  [1:0] m_axi_A_BUS_BRESP;
input  [C_M_AXI_A_BUS_ID_WIDTH - 1 : 0] m_axi_A_BUS_BID;
input  [C_M_AXI_A_BUS_BUSER_WIDTH - 1 : 0] m_axi_A_BUS_BUSER;
input   s_axi_CFG_AWVALID;
output   s_axi_CFG_AWREADY;
input  [C_S_AXI_CFG_ADDR_WIDTH - 1 : 0] s_axi_CFG_AWADDR;
input   s_axi_CFG_WVALID;
output   s_axi_CFG_WREADY;
input  [C_S_AXI_CFG_DATA_WIDTH - 1 : 0] s_axi_CFG_WDATA;
input  [C_S_AXI_CFG_WSTRB_WIDTH - 1 : 0] s_axi_CFG_WSTRB;
input   s_axi_CFG_ARVALID;
output   s_axi_CFG_ARREADY;
input  [C_S_AXI_CFG_ADDR_WIDTH - 1 : 0] s_axi_CFG_ARADDR;
output   s_axi_CFG_RVALID;
input   s_axi_CFG_RREADY;
output  [C_S_AXI_CFG_DATA_WIDTH - 1 : 0] s_axi_CFG_RDATA;
output  [1:0] s_axi_CFG_RRESP;
output   s_axi_CFG_BVALID;
input   s_axi_CFG_BREADY;
output  [1:0] s_axi_CFG_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] a;
reg    A_BUS_blk_n_AR;
wire   [0:0] ap_CS_fsm_state2;
reg    A_BUS_blk_n_R;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] ap_CS_fsm_state12;
wire   [0:0] ap_CS_fsm_state19;
reg    A_BUS_blk_n_AW;
wire   [0:0] ap_CS_fsm_state20;
reg    A_BUS_blk_n_W;
wire   [0:0] ap_CS_fsm_state21;
reg    A_BUS_blk_n_B;
wire   [0:0] ap_CS_fsm_state26;
wire   [0:0] ap_CS_fsm_state27;
wire   [0:0] ap_CS_fsm_state34;
reg    A_BUS_AWVALID;
wire    A_BUS_AWREADY;
reg    A_BUS_WVALID;
wire    A_BUS_WREADY;
wire   [63:0] A_BUS_WDATA;
reg    A_BUS_ARVALID;
wire    A_BUS_ARREADY;
reg   [31:0] A_BUS_ARADDR;
wire    A_BUS_RVALID;
reg    A_BUS_RREADY;
wire   [63:0] A_BUS_RDATA;
wire    A_BUS_RLAST;
wire   [0:0] A_BUS_RID;
wire   [0:0] A_BUS_RUSER;
wire   [1:0] A_BUS_RRESP;
wire    A_BUS_BVALID;
reg    A_BUS_BREADY;
wire   [1:0] A_BUS_BRESP;
wire   [0:0] A_BUS_BID;
wire   [0:0] A_BUS_BUSER;
reg   [28:0] a1_reg_184;
wire   [31:0] tmp_1_fu_128_p1;
reg   [31:0] tmp_1_reg_189;
reg    ap_sig_ioackin_A_BUS_ARREADY;
reg   [31:0] curr_offs_new9_reg_201;
wire   [31:0] a2_sum_fu_144_p2;
reg   [31:0] a2_sum_reg_209;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] tmp_fu_138_p2;
reg   [31:0] A_BUS_addr_1_reg_214;
wire   [31:0] temp_fu_155_p1;
reg   [31:0] temp_reg_220;
reg   [31:0] a_offs_load_new_reg_225;
wire   [31:0] temp_1_fu_159_p2;
reg   [31:0] temp_1_reg_230;
reg    ap_sig_ioackin_A_BUS_AWREADY;
wire   [31:0] cum_offs_1_fu_164_p2;
reg   [31:0] cum_offs_1_reg_235;
wire   [31:0] a2_sum3_fu_169_p2;
reg   [31:0] a2_sum3_reg_240;
reg   [31:0] cum_offs_reg_87;
wire   [0:0] ap_CS_fsm_state10;
reg   [31:0] curr_offs_reg_99;
reg    ap_reg_ioackin_A_BUS_ARREADY;
reg    ap_reg_ioackin_A_BUS_AWREADY;
reg    ap_reg_ioackin_A_BUS_WREADY;
reg    ap_sig_ioackin_A_BUS_WREADY;
reg   [33:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'b1;
#0 ap_reg_ioackin_A_BUS_ARREADY = 1'b0;
#0 ap_reg_ioackin_A_BUS_AWREADY = 1'b0;
#0 ap_reg_ioackin_A_BUS_WREADY = 1'b0;
end

link_list_CFG_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CFG_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CFG_DATA_WIDTH ))
link_list_CFG_s_axi_U(
    .AWVALID(s_axi_CFG_AWVALID),
    .AWREADY(s_axi_CFG_AWREADY),
    .AWADDR(s_axi_CFG_AWADDR),
    .WVALID(s_axi_CFG_WVALID),
    .WREADY(s_axi_CFG_WREADY),
    .WDATA(s_axi_CFG_WDATA),
    .WSTRB(s_axi_CFG_WSTRB),
    .ARVALID(s_axi_CFG_ARVALID),
    .ARREADY(s_axi_CFG_ARREADY),
    .ARADDR(s_axi_CFG_ARADDR),
    .RVALID(s_axi_CFG_RVALID),
    .RREADY(s_axi_CFG_RREADY),
    .RDATA(s_axi_CFG_RDATA),
    .RRESP(s_axi_CFG_RRESP),
    .BVALID(s_axi_CFG_BVALID),
    .BREADY(s_axi_CFG_BREADY),
    .BRESP(s_axi_CFG_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .a(a)
);

link_list_A_BUS_m_axi #(
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_A_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_A_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_A_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_A_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_A_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_A_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_A_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_A_BUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_A_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_A_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_A_BUS_CACHE_VALUE ))
link_list_A_BUS_m_axi_U(
    .AWVALID(m_axi_A_BUS_AWVALID),
    .AWREADY(m_axi_A_BUS_AWREADY),
    .AWADDR(m_axi_A_BUS_AWADDR),
    .AWID(m_axi_A_BUS_AWID),
    .AWLEN(m_axi_A_BUS_AWLEN),
    .AWSIZE(m_axi_A_BUS_AWSIZE),
    .AWBURST(m_axi_A_BUS_AWBURST),
    .AWLOCK(m_axi_A_BUS_AWLOCK),
    .AWCACHE(m_axi_A_BUS_AWCACHE),
    .AWPROT(m_axi_A_BUS_AWPROT),
    .AWQOS(m_axi_A_BUS_AWQOS),
    .AWREGION(m_axi_A_BUS_AWREGION),
    .AWUSER(m_axi_A_BUS_AWUSER),
    .WVALID(m_axi_A_BUS_WVALID),
    .WREADY(m_axi_A_BUS_WREADY),
    .WDATA(m_axi_A_BUS_WDATA),
    .WSTRB(m_axi_A_BUS_WSTRB),
    .WLAST(m_axi_A_BUS_WLAST),
    .WID(m_axi_A_BUS_WID),
    .WUSER(m_axi_A_BUS_WUSER),
    .ARVALID(m_axi_A_BUS_ARVALID),
    .ARREADY(m_axi_A_BUS_ARREADY),
    .ARADDR(m_axi_A_BUS_ARADDR),
    .ARID(m_axi_A_BUS_ARID),
    .ARLEN(m_axi_A_BUS_ARLEN),
    .ARSIZE(m_axi_A_BUS_ARSIZE),
    .ARBURST(m_axi_A_BUS_ARBURST),
    .ARLOCK(m_axi_A_BUS_ARLOCK),
    .ARCACHE(m_axi_A_BUS_ARCACHE),
    .ARPROT(m_axi_A_BUS_ARPROT),
    .ARQOS(m_axi_A_BUS_ARQOS),
    .ARREGION(m_axi_A_BUS_ARREGION),
    .ARUSER(m_axi_A_BUS_ARUSER),
    .RVALID(m_axi_A_BUS_RVALID),
    .RREADY(m_axi_A_BUS_RREADY),
    .RDATA(m_axi_A_BUS_RDATA),
    .RLAST(m_axi_A_BUS_RLAST),
    .RID(m_axi_A_BUS_RID),
    .RUSER(m_axi_A_BUS_RUSER),
    .RRESP(m_axi_A_BUS_RRESP),
    .BVALID(m_axi_A_BUS_BVALID),
    .BREADY(m_axi_A_BUS_BREADY),
    .BRESP(m_axi_A_BUS_BRESP),
    .BID(m_axi_A_BUS_BID),
    .BUSER(m_axi_A_BUS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(A_BUS_ARVALID),
    .I_ARREADY(A_BUS_ARREADY),
    .I_ARADDR(A_BUS_ARADDR),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_1),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(A_BUS_RVALID),
    .I_RREADY(A_BUS_RREADY),
    .I_RDATA(A_BUS_RDATA),
    .I_RID(A_BUS_RID),
    .I_RUSER(A_BUS_RUSER),
    .I_RRESP(A_BUS_RRESP),
    .I_RLAST(A_BUS_RLAST),
    .I_AWVALID(A_BUS_AWVALID),
    .I_AWREADY(A_BUS_AWREADY),
    .I_AWADDR(A_BUS_addr_1_reg_214),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_1),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(A_BUS_WVALID),
    .I_WREADY(A_BUS_WREADY),
    .I_WDATA(A_BUS_WDATA),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(ap_const_lv8_F),
    .I_BVALID(A_BUS_BVALID),
    .I_BREADY(A_BUS_BREADY),
    .I_BRESP(A_BUS_BRESP),
    .I_BID(A_BUS_BID),
    .I_BUSER(A_BUS_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_A_BUS_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state12) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state27) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)))) begin
            ap_reg_ioackin_A_BUS_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state2) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state12) & (1'b1 == A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state27) & (1'b1 == A_BUS_ARREADY)))) begin
            ap_reg_ioackin_A_BUS_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_A_BUS_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state20)) begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_AWREADY)) begin
                ap_reg_ioackin_A_BUS_AWREADY <= 1'b0;
            end else if ((1'b1 == A_BUS_AWREADY)) begin
                ap_reg_ioackin_A_BUS_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_A_BUS_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_WREADY)) begin
                ap_reg_ioackin_A_BUS_WREADY <= 1'b0;
            end else if ((1'b1 == A_BUS_WREADY)) begin
                ap_reg_ioackin_A_BUS_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & ~(A_BUS_RVALID == 1'b0))) begin
        cum_offs_reg_87 <= cum_offs_1_reg_235;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        cum_offs_reg_87 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & ~(A_BUS_RVALID == 1'b0))) begin
        curr_offs_reg_99 <= {{A_BUS_RDATA[ap_const_lv32_3F : ap_const_lv32_20]}};
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        curr_offs_reg_99 <= curr_offs_new9_reg_201;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
        A_BUS_addr_1_reg_214 <= a2_sum_reg_209;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        a1_reg_184 <= {{a[ap_const_lv32_1F : ap_const_lv32_3]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & ~(1'b0 == ap_sig_ioackin_A_BUS_AWREADY))) begin
        a2_sum3_reg_240 <= a2_sum3_fu_169_p2;
        cum_offs_1_reg_235 <= cum_offs_1_fu_164_p2;
        temp_1_reg_230 <= temp_1_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (tmp_fu_138_p2 == 1'b0))) begin
        a2_sum_reg_209 <= a2_sum_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & ~(A_BUS_RVALID == 1'b0))) begin
        a_offs_load_new_reg_225 <= {{A_BUS_RDATA[ap_const_lv32_3F : ap_const_lv32_20]}};
        temp_reg_220 <= temp_fu_155_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(A_BUS_RVALID == 1'b0))) begin
        curr_offs_new9_reg_201 <= {{A_BUS_RDATA[ap_const_lv32_3F : ap_const_lv32_20]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY))) begin
        tmp_1_reg_189[28 : 0] <= tmp_1_fu_128_p1[28 : 0];
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state27)) begin
            A_BUS_ARADDR = a2_sum3_reg_240;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            A_BUS_ARADDR = a2_sum_reg_209;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            A_BUS_ARADDR = tmp_1_fu_128_p1;
        end else begin
            A_BUS_ARADDR = 'bx;
        end
    end else begin
        A_BUS_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state12) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) | ((1'b1 == ap_CS_fsm_state27) & (1'b0 == ap_reg_ioackin_A_BUS_ARREADY)))) begin
        A_BUS_ARVALID = 1'b1;
    end else begin
        A_BUS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (1'b0 == ap_reg_ioackin_A_BUS_AWREADY))) begin
        A_BUS_AWVALID = 1'b1;
    end else begin
        A_BUS_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) & ~(A_BUS_BVALID == 1'b0))) begin
        A_BUS_BREADY = 1'b1;
    end else begin
        A_BUS_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state19) & ~(A_BUS_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state34) & ~(A_BUS_RVALID == 1'b0)))) begin
        A_BUS_RREADY = 1'b1;
    end else begin
        A_BUS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (1'b0 == ap_reg_ioackin_A_BUS_WREADY))) begin
        A_BUS_WVALID = 1'b1;
    end else begin
        A_BUS_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state27))) begin
        A_BUS_blk_n_AR = m_axi_A_BUS_ARREADY;
    end else begin
        A_BUS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        A_BUS_blk_n_AW = m_axi_A_BUS_AWREADY;
    end else begin
        A_BUS_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        A_BUS_blk_n_B = m_axi_A_BUS_BVALID;
    end else begin
        A_BUS_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state34))) begin
        A_BUS_blk_n_R = m_axi_A_BUS_RVALID;
    end else begin
        A_BUS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        A_BUS_blk_n_W = m_axi_A_BUS_WREADY;
    end else begin
        A_BUS_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~(tmp_fu_138_p2 == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~(tmp_fu_138_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_A_BUS_ARREADY)) begin
        ap_sig_ioackin_A_BUS_ARREADY = A_BUS_ARREADY;
    end else begin
        ap_sig_ioackin_A_BUS_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_A_BUS_AWREADY)) begin
        ap_sig_ioackin_A_BUS_AWREADY = A_BUS_AWREADY;
    end else begin
        ap_sig_ioackin_A_BUS_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_A_BUS_WREADY)) begin
        ap_sig_ioackin_A_BUS_WREADY = A_BUS_WREADY;
    end else begin
        ap_sig_ioackin_A_BUS_WREADY = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (~(tmp_fu_138_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_AWREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_WREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (~(A_BUS_BVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (~(1'b0 == ap_sig_ioackin_A_BUS_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (~(A_BUS_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_BUS_WDATA = temp_1_reg_230;

assign a2_sum3_fu_169_p2 = (cum_offs_1_fu_164_p2 + tmp_1_reg_189);

assign a2_sum_fu_144_p2 = (cum_offs_reg_87 + tmp_1_reg_189);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state34 = ap_CS_fsm[ap_const_lv32_21];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cum_offs_1_fu_164_p2 = (cum_offs_reg_87 + a_offs_load_new_reg_225);

assign temp_1_fu_159_p2 = (ap_const_lv32_14 + temp_reg_220);

assign temp_fu_155_p1 = A_BUS_RDATA[31:0];

assign tmp_1_fu_128_p1 = a1_reg_184;

assign tmp_fu_138_p2 = ((curr_offs_reg_99 == ap_const_lv32_0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_1_reg_189[31:29] <= 3'b000;
end

endmodule //link_list
